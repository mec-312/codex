CREATE OR REPLACE PACKAGE BODY COMUMGR."KYT_DOCU_DOCU"
IS
--
-- To modify this template, edit file PKGBODY.TXT in TEMPLATE
-- directory of SQL Navigatordbms_output.put_line('');
--
-- Purpose: Briefly explain the functionality of the package body
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  ------------------------------------------
   -- Enter procedure, function bodies as shown below


/*METODOS DE TABLA YTVCOLL*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

FUNCTION FKYT_DOCU_DOCU_PP_NFAP(P_CODE IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(4000);



BEGIN
SELECT XXX.YTRAPDO_SEQ INTO V_TEXTO
FROM (
SELECT YTRAPDO_SEQ FROM COMUMGR.YTRAPDO WHERE YTRAPDO_DOCU_CODE=P_CODE AND YTRAPDO_IND_ESTADO<>'A'
ORDER BY YTRAPDO_SEQ) XXX
WHERE ROWNUM=1;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;

FUNCTION FKYT_DOCU_DOCU_PP_AGRUPADO(P_CODE IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(4000);
V_ESTADO VARCHAR(10);
BEGIN
SELECT YTBCAEX_DESCRIPCION,YTBCAEX_IND_ESTADO INTO V_TEXTO,V_ESTADO
FROM COMUMGR.YTRDOCA ,COMUMGR.YTBCAEX
WHERE YTRDOCA_DOCU_CODE||'-'||YTRDOCA_DOCU_SEQ=P_CODE
AND YTRDOCA_CAEX_CODE=YTBCAEX_CODE;

 RETURN '{"CARPETA_NOM":"'||V_TEXTO||'","CARPETA_EST":"'||V_ESTADO||'"}';
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '{"CARPETA_NOM":"SIN CARPETA","CARPETA_EST":"A"}';

   when OTHERS then
         RETURN '{"CARPETA_NOM":"SIN CARPETA","CARPETA_EST":"A"}';
end;


FUNCTION FKYT_DOCU_DOCU_PP_QT_DOCU(P_CODE IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(4000);



BEGIN
SELECT XXX.DESCRIPCION INTO V_TEXTO
FROM (
SELECT YTRAPDO_SEQ||' - '||YTRAPDO_DESCRIPCION DESCRIPCION  FROM COMUMGR.YTRAPDO WHERE YTRAPDO_DOCU_CODE=P_CODE AND YTRAPDO_IND_ESTADO<>'A'
ORDER BY YTRAPDO_SEQ) XXX
WHERE ROWNUM=1;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;



FUNCTION FKYT_DOCU_DOCU_PP_COMO_LLEGO(P_COLL IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(4000);



BEGIN
SELECT YTVCOLL_DESCRIPCION INTO V_TEXTO FROM YTVCOLL WHERE YTVCOLL_CODE=P_COLL;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;


FUNCTION FKYT_DOCU_DOCU_PP_PARA(P_DOCU IN VARCHAR2,P_SEQ IN INT) return varchar2
IS

V_TEXTO VARCHAR2(4000);
vuelta int;

CURSOR DT(P_DOCU VARCHAR2,P_SEQ INT) IS
 SELECT DECODE(YTRAPDO_IND_PARA,'P','PARA','C','COPIA') PARA,YTRAPDO_DESCRIPCION
FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE=P_DOCU AND  YTRAPDO_DOCU_SEQ=P_SEQ AND YTRAPDO_IND_PARA IN('P','C');

DT_ROW DT%ROWTYPE;

BEGIN
V_TEXTO:=null;
vuelta:=0;
   OPEN DT(P_DOCU,P_SEQ);
    LOOP
        FETCH DT INTO DT_ROW;
            EXIT WHEN DT%NOTFOUND;

            IF(V_TEXTO IS NULL) THEN
                   V_TEXTO:='<span class="label label-success">'||DT_ROW.PARA ||':</span> '||DT_ROW.YTRAPDO_DESCRIPCION;
                   -- V_TEXTO:=DT_ROW.YTBDOCU_CODE;
            ELSE
                    IF vuelta=0 THEN
                    V_TEXTO:=V_TEXTO||' <span class="label label-danger">'||DT_ROW.PARA ||':</span> '||DT_ROW.YTRAPDO_DESCRIPCION;
                    ELSE
                    V_TEXTO:=V_TEXTO||', '||DT_ROW.YTRAPDO_DESCRIPCION;
                    END IF;
                    vuelta:=1;
            END IF;
    END LOOP;
 CLOSE  DT;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;






FUNCTION FKYT_DOCU_DOCU_PP_REFERENCIA_2(P_DOCU IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(4000);

CURSOR DT(P_DOCU VARCHAR2) IS
 SELECT YTBDOCU_CODE FROM YTBDOCU WHERE YTBDOCU_PADRE=P_DOCU;

DT_ROW DT%ROWTYPE;

BEGIN
V_TEXTO:=null;
   OPEN DT(P_DOCU);
    LOOP
        FETCH DT INTO DT_ROW;
            EXIT WHEN DT%NOTFOUND;

            IF(V_TEXTO IS NULL) THEN
                   V_TEXTO:='<a class="noenviar" href="javascript:detalle_documentoref('''||DT_ROW.YTBDOCU_CODE||''')" title="Editar Documento">' || DT_ROW.YTBDOCU_CODE || '</a>';
                   -- V_TEXTO:=DT_ROW.YTBDOCU_CODE;
            ELSE
                    V_TEXTO:=V_TEXTO||', '|| '<a class="noenviar" href=javascript:detalle_documentoref('''||DT_ROW.YTBDOCU_CODE||''') title="Editar Documento">' || DT_ROW.YTBDOCU_CODE || '</a>';
            END IF;
    END LOOP;
 CLOSE  DT;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;


FUNCTION FKYT_DOCU_DOCU_PP_UNI_USUA(P_USUA IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(1000);
CURSOR DT(P_USUA VARCHAR2) IS
SELECT YTRUSUN_UNID_CODE FROM comumgr.YTRUSUN
                         WHERE YTRUSUN_USUA_ID=P_USUA AND YTRUSUN_IND_ESTADO='A' ;

DT_ROW DT%ROWTYPE;

BEGIN
V_TEXTO:='0';
   OPEN DT(P_USUA);
    LOOP
     FETCH DT INTO DT_ROW;
     EXIT WHEN DT%NOTFOUND;

  IF(V_TEXTO='0') THEN
        V_TEXTO:=DT_ROW.YTRUSUN_UNID_CODE;
  ELSE
        V_TEXTO:=V_TEXTO||', '||DT_ROW.YTRUSUN_UNID_CODE;
  END IF;
    END LOOP;
 CLOSE  DT;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;


PROCEDURE KYT_GUARDAR_COMENTARIO(P_DOC IN VARCHAR,P_SEQ IN VARCHAR2,P_USUARIO IN VARCHAR2,P_TIPO IN VARCHAR2,
P_MENSAJE IN VARCHAR2,P_NOMBRE IN VARCHAR2,  V_MSG OUT VARCHAR2,APDO_CODE IN VARCHAR2 DEFAULT NULL) IS

  v_MaxNotiSEQ NUMBER;
  v_contadorResumen NUMBER;
  V_NOTI INT;
  P_MSG VARCHAR2(200);
BEGIN

INSERT INTO COMUMGR.YTRCOME (
                YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
                YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
                YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE,YTRCOME_APDO_CODE)
            VALUES (SEQ_YTRCOME_CODE.NEXTVAL, P_DOC, P_SEQ,SYSDATE,P_USUARIO, P_TIPO,P_MENSAJE,0,P_NOMBRE,APDO_CODE);

            V_MSG:='OK';
--COMMIT;
END;


FUNCTION FKYT_DOCU_DOCU_PP_DAME_TIDO(V_CODE IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(300);


BEGIN
V_TEXTO:='0';

SELECT YTVTIPO_DESCRIPCION INTO V_TEXTO FROM COMUMGR.YTVTIPO WHERE YTVTIPO_CODE=V_CODE;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;

FUNCTION FKYT_DOCU_DOCU_PP_DAME_ORGAN(V_USUA_ID IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(300);


BEGIN
V_TEXTO:='0';

SELECT RRRMPLA_COAS||'-'||RRRMPLA_ORGA_ASIG INTO V_TEXTO FROM RRHHMGR.RRRMPLA WHERE RRRMPLA_ID=v_usua_id;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;


FUNCTION FKYT_DOCU_DOCU_PP_FERIADOS(NUM_DIAS IN INT ) return varchar2
IS

V_TEXTO VARCHAR2(300);


BEGIN
V_TEXTO:='0';

SELECT (YTGCALE_FECHA_FIN-YTGCALE_FECHA) +1 INTO V_TEXTO
FROM YTGCALE
WHERE TRUNC(YTGCALE_FECHA) BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE+NUM_DIAS);

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;




FUNCTION FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(P_FECHA IN DATE,P_FECHAF IN DATE) return varchar2
IS

V_TEXTO VARCHAR2(300);


BEGIN
V_TEXTO:='0';

if length(P_FECHA) >0 then

SELECT TRUNC((P_FECHA-(P_FECHAF))*24,3) INTO V_TEXTO FROM DUAL;
end if;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;



FUNCTION FKYT_DOCU_DOCU_PP_YT_SN_APROB(P_DOC IN VARCHAR2,P_TIPO IN VARCHAR2) return varchar2
IS

V_CODE VARCHAR2(20);
V_DESCRIPCION VARCHAR2(200);
V_TEXTO VARCHAR2(300);


BEGIN
V_TEXTO:='0';

SELECT YTRAPDO_CODE_CODE,YTRAPDO_COAS_CODE||'-'||YTRAPDO_DESCRIPCION INTO V_CODE,V_DESCRIPCION FROM YTRAPDO
WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=P_DOC
AND YTRAPDO_SEQ=(SELECT MIN(YTRAPDO_SEQ) FROM YTRAPDO
                    WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=P_DOC AND YTRAPDO_IND_ESTADO<>'E' AND (YTRAPDO_IND_ESTADO<>'A'));

  IF(P_TIPO='D') THEN
  V_TEXTO:=V_DESCRIPCION;
  ELSE
  V_TEXTO:=V_CODE;
  END IF;
 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;


FUNCTION FKYT_DOCU_DOCU_PP_YT_RAT_APROB(P_CODE IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(20);


BEGIN
V_TEXTO:='0';

SELECT SUM(DECODE(YTRAPDO_IND_ESTADO,'A',1,0))||'/'||SUM(DECODE(YTRAPDO_IND_ESTADO,'A',1,'P',1,'D',1,0)) INTO V_TEXTO
FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=P_CODE;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0/0';

   when OTHERS then
         RETURN '0/0';
end;


FUNCTION FKYT_DOCU_DOCU_PP_YT_NUM_COME(P_CODE IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(20);


BEGIN
V_TEXTO:='0';

SELECT COUNT(*) INTO V_TEXTO FROM YTRCOME WHERE YTRCOME_DOCU_CODE||'-'||YTRCOME_DOCU_SEQ=P_CODE;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;



FUNCTION FKYT_DOCU_DOCU_PP_YTROREN_CUR(P_ORDEN IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(300);
CURSOR DT(P_ORDEN VARCHAR2) IS
SELECT YTROREN_ORRE_DOCU_CODE||'-'||YTROREN_ORRE_DOCU_SEQ DOCUMENTO FROM YTROREN WHERE YTROREN_OREN_CODE=P_ORDEN;

DT_ROW DT%ROWTYPE;

BEGIN
V_TEXTO:='0';
   OPEN DT(P_ORDEN);
    LOOP
     FETCH DT INTO DT_ROW;
     EXIT WHEN DT%NOTFOUND;

  IF(V_TEXTO='0') THEN
        V_TEXTO:=DT_ROW.DOCUMENTO;
  ELSE
        V_TEXTO:=V_TEXTO||', '||DT_ROW.DOCUMENTO;
  END IF;


    END LOOP;
 CLOSE  DT;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '';

   when OTHERS then
         RETURN '';
end;

PROCEDURE KYT_DOCU_DOCU_PP_YTVCOLL_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
     is

    code varchar2(20);
    begin

    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                YTVCOLL_CODE PK_ACCION,YTVCOLL_CODE CODE, YTVCOLL_DESCRIPCION DESCRIPCION, YTVCOLL_FECHA_ACTIVIDAD FECHA,
                YTVCOLL_IND_ESTADO IND_ESTADO, YTVCOLL_USUA_ID USUA_ID
                FROM COMUMGR.YTVCOLL
                WHERE YTVCOLL_CODE=P_DATA;
    ELSE   --LIS
        OPEN CURSOR_OUT  FOR
         SELECT
                YTVCOLL_CODE PK_ACCION,YTVCOLL_CODE CODE, YTVCOLL_DESCRIPCION DESCRIPCION, YTVCOLL_FECHA_ACTIVIDAD FECHA,
                YTVCOLL_IND_ESTADO IND_ESTADO, YTVCOLL_USUA_ID USUA_ID
                FROM COMUMGR.YTVCOLL;



    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ');
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTVCOLL_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');


   IF(P_ACCION='ADI') THEN



        INSERT INTO COMUMGR.YTVCOLL ( YTVCOLL_CODE, YTVCOLL_DESCRIPCION, YTVCOLL_FECHA_ACTIVIDAD,
   YTVCOLL_IND_ESTADO, YTVCOLL_USUA_ID)
        VALUES (ky_json.campo(jsonObj, 'code'),ky_json.campo(jsonObj, 'descripcion'),sysdate, ky_json.campo(jsonObj, 'ind_estado'),
                 ky_json.campo(jsonObj, 'usua_id'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

        UPDATE COMUMGR.YTVCOLL
        SET     YTVCOLL_DESCRIPCION      = upper(ky_json.campo(jsonObj, 'descripcion')),
                YTVCOLL_FECHA_ACTIVIDAD  = sysdate,
                YTVCOLL_IND_ESTADO       = ky_json.campo(jsonObj, 'ind_estado'),
                YTVCOLL_USUA_ID          = ky_json.campo(jsonObj, 'usua_id')
        WHERE  YTVCOLL_CODE             = trim(ky_json.campo(jsonObj, 'ytvcoll_pk'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';


   ELSIF(P_ACCION='ELI') THEN
     DELETE YTVCOLL WHERE YTVCOLL_CODE=trim(ky_json.campo(jsonObj, 'ytvcoll_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTVCOLL*/



/*METODOS DE TABLA YTVESTA*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_PLAN_DOCU_PP_YTVESTA_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
        SELECT
                YTVESTA_CODE PK_ACCION,YTVESTA_CODE CODE, YTVESTA_DESCRIPCION DESCRIPCION, YTVESTA_FECHA_ACTIVIDAD FECHA,
                YTVESTA_USUA_ID USUA_ID, YTVESTA_IND_ESTADO IND_ESTADO, YTVESTA_COMENTARIO COMENTARIO,
                YTVESTA_COLOR COLOR, YTVESTA_ESTILO ESTILO, YTVESTA_IND_EDITA IND_EDITA
        FROM COMUMGR.YTVESTA
        WHERE YTVESTA_CODE=P_DATA;
    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


    if(v_desc='%') then
        SELECT COUNT(*) INTO  V_NUM_REG FROM YTVESTA ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
YTVESTA_CODE PK_ACCION,YTVESTA_CODE CODE, YTVESTA_DESCRIPCION DESCRIPCION, YTVESTA_FECHA_ACTIVIDAD FECHA,
   YTVESTA_USUA_ID USUA_ID, YTVESTA_IND_ESTADO IND_ESTADO, YTVESTA_COMENTARIO COMENTARIO,
   YTVESTA_COLOR COLOR, YTVESTA_ESTILO ESTILO, YTVESTA_IND_EDITA IND_EDITA
FROM COMUMGR.YTVESTA order by YTVESTA_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
    else

    SELECT COUNT(*) INTO  V_NUM_REG FROM YTVESTA  where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%';

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTVESTA_CODE PK_ACCION,YTVESTA_CODE CODE, YTVESTA_DESCRIPCION DESCRIPCION, YTVESTA_FECHA_ACTIVIDAD FECHA,
                        YTVESTA_USUA_ID USUA_ID, YTVESTA_IND_ESTADO IND_ESTADO, YTVESTA_COMENTARIO COMENTARIO,
                        YTVESTA_COLOR COLOR, YTVESTA_ESTILO ESTILO, YTVESTA_IND_EDITA IND_EDITA
                        FROM COMUMGR.YTVESTA
                        where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%' order by YTVESTA_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    end if;

    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_PLAN_DOCU_PP_YTVESTA_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_tipo:=trim(ky_json.campo(jsonObj, 'tipo'));
   v_conceptopago:=trim(nvl(ky_json.campo(jsonObj, 'conceptopago'),'0'));
   IF(P_ACCION='ADI') THEN


   select decode(MAX(YTVPRVE_code),null,1,MAX(YTVPRVE_code)+1) into v_code from  YTVPRVE;

        INSERT INTO COMUMGR.YTVPRVE (
            YTVPRVE_CODE, YTVPRVE_DESCRIPCION, YTVPRVE_FECHA_ACTIVIDAD,             YTVPRVE_USUA_ID, YTVPRVE_IND_ESTADO)
        VALUES (LPAD(v_code,3,'0'),
                ky_json.campo(jsonObj, 'descripcion'),
                SYSDATE,
                ky_json.campo(jsonObj, 'usua_id'),
                ky_json.campo(jsonObj, 'ind_estado') );

         v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

    if(v_tipo='REC' AND LENGTH(v_conceptopago)<2) THEN
     v_msg := 'ERP-ERR[DEBES INGRESAR CONCEPTO DE PAGO]';

    ELSE

    UPDATE COMUMGR.YTVPRVE
SET    YTVPRVE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
       YTVPRVE_FECHA_ACTIVIDAD = SYSDATE,
       YTVPRVE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTVPRVE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado')
WHERE  YTVPRVE_CODE            = trim(ky_json.campo(jsonObj, 'ytvprve_pk'));


     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
     END IF;

   ELSIF(P_ACCION='ELI') THEN
     DELETE YTVPRVE WHERE YTVPRVE_CODE=trim(ky_json.campo(jsonObj, 'ytvprve_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTVESTA*/





/*METODOS DE TABLA YTBDOCU*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/



PROCEDURE KYT_DOCU_DOCU_PP_YTBDOCU_CUR2(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR,CURSOR_OUT1 OUT T_CURSOR)

    is

    V_CODE_PLANTILLA varchar2(20);
    begin




    IF(P_ACCION='UNI') THEN

    SELECT YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ INTO V_CODE_PLANTILLA
FROM YTBDOCU WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_DATA;
        OPEN CURSOR_OUT  FOR
        SELECT
        YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
   YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
   YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID USUA_ID, YTBDOCU_USUA_ID_REG,
   YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
   YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA DATA,
   YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES COMENTARIOS,
   YTBDOCU_ASUNTO ASUNTO, YTBDOCU_NUMERO_FOLIOS FOLIOS, YTBDOCU_IND_VIRTUAL,
   YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
   YTBDOCU_APELLIDOS APELLIDOS, YTBDOCU_NOMBRES NOMBRES, YTBDOCU_PIDM,
   YTBDOCU_MAJR_DESC, YTBDOCU_COLL_CODE_1, YTBDOCU_COLL_DESC,
   YTBDOCU_PERS_DNI DNI, YTBDOCU_PERS_SEXO SEXO, YTBDOCU_FECHA_ENTREGA,
   YTBDOCU_ID_USUA_ENT, YTBDOCU_NUMERO, YTBDOCU_ID_USUA_VALIDO,
   YTBDOCU_FECHA_VALIDO, YTBDOCU_FECHA_COMPLETO, YTBDOCU_CODIGO_BARRAS CODIGO_BARRAS,
   YTBDOCU_UNIDAD_ENTREGAR, YTBDOCU_ID_USUA_RECIBE, YTBDOCU_UNIDAD_ENTREGAR_COAS,
   YTBDOCU_TIPO_CODE, YTBDOCU_SOLI_CODE, YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_NUM_COPIA NUM_COPIAS,
   YTBDOCU_NUM_EXT NUM_EXT, YTBDOCU_VAAN_CODE, YTBDOCU_PRIO_CODE PRIORIDAD,YTBDOCU_ASUNTO ASUNTO,YTBDOCU_DOC_REFERENCIA DOC_REFERENCIA,
   YTBDOCU_SEDE_ENT SEDE_ENT,YTBDOCU_IND_ENTREGA FORMA_ENTREGA, YTRPLAN_IND_COPIAS COPIAS,YTBDOCU_MINOR_CODE,YTBDOCU_MINOR_DESC

        FROM COMUMGR.YTBDOCU, YTRPLAN
        WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_DATA
        AND YTRPLAN_PROC_CODE||'-'||YTRPLAN_SEQ = YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ;

OPEN CURSOR_OUT1  FOR
         SELECT YTRPLCA_PLAN_PROC_CODE||'-'||YTRPLCA_PLAN_SEQ||'-'||YTRPLCA_CAME_CODE||'-'||YTRPLCA_SEQ PK_ACCION,YTRCAME_NOM_CAMPO CAMPO,
                YTRCAME_REQUERIDO RESTRICTIVO,YTRCAME_CONTROL CONTROL, YTRCAME_TIPO_CAMPO TIPO
                ,YTRCAME_VALOR_DEFECTO VF,YTRCAME_AYUDA AYUDA,YTRCAME_TAMANO TAMANO,YTRCAME_IND_ESTADO,YTRCAME_ID_CAMPO ID_CAMPO,YTRPLCA_SEQ SEQ,YTRPLCA_IND_ESTADO IND_ESTADO
                ,YTRCAME_ANCHO ANCHO,YTRCAME_TEXT_POS TEXT_POS,YTRCAME_DATA DATA,YTRPLCA_CAME_CODE CAME_CODE,YTRCAME_SQL QUERY,YTRCAME_ELEMENTO_COMBO ELEMENTO,YTRCAME_AFECTA_PAGO,
                YTRCAME_FUNCION_CONTROL,YTRCAME_MODAL,YTRCAME_SQL_VARIABLES
                FROM  YTRPLCA,YTRCAME
                WHERE  YTRPLCA_PLAN_PROC_CODE||'-'||YTRPLCA_PLAN_SEQ=V_CODE_PLANTILLA
                AND YTRPLCA_CAME_CODE=YTRCAME_CODE AND YTRPLCA_IND_ESTADO='A'
                ORDER BY YTRPLCA_ORDEN ASC;

ELSIF(P_ACCION='UNI2') THEN
jsonObj := json(P_DATA);
SELECT YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ INTO V_CODE_PLANTILLA
FROM YTBDOCU WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=trim(ky_json.campo(jsonObj, 'p_documento'));

 OPEN CURSOR_OUT  FOR
        SELECT
        YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
   YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
   YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID USUA_ID, YTBDOCU_USUA_ID_REG,
   YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
   YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA DATA,
   YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES COMENTARIOS,
   YTBDOCU_ASUNTO ASUNTO, YTBDOCU_NUMERO_FOLIOS FOLIOS, YTBDOCU_IND_VIRTUAL,
   YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
   YTBDOCU_APELLIDOS APELLIDOS, YTBDOCU_NOMBRES NOMBRES, YTBDOCU_PIDM,
   YTBDOCU_MAJR_DESC, YTBDOCU_COLL_CODE_1, YTBDOCU_COLL_DESC,
   YTBDOCU_PERS_DNI DNI, YTBDOCU_PERS_SEXO SEXO, YTBDOCU_FECHA_ENTREGA,
   YTBDOCU_ID_USUA_ENT, YTBDOCU_NUMERO, YTBDOCU_ID_USUA_VALIDO,
   YTBDOCU_FECHA_VALIDO, YTBDOCU_FECHA_COMPLETO, YTBDOCU_CODIGO_BARRAS CODIGO_BARRAS,
   YTBDOCU_UNIDAD_ENTREGAR, YTBDOCU_ID_USUA_RECIBE, YTBDOCU_UNIDAD_ENTREGAR_COAS,
   YTBDOCU_TIPO_CODE, YTBDOCU_SOLI_CODE, YTBDOCU_TIDO_CODE TIDO_CODE,
   YTBDOCU_NUM_EXT NUM_EXT, YTBDOCU_VAAN_CODE, YTBDOCU_PRIO_CODE PRIORIDAD,YTBDOCU_ASUNTO ASUNTO,YTBDOCU_DOC_REFERENCIA DOC_REFERENCIA,
   FKYT_DOCU_DOCU_PP_UNI_USUA(ky_json.campo(jsonObj, 'usua_id')) unidades,YTBDOCU_REQ_EVALUACION REQ_EVALUACION,YTBDOCU_GENERA_DOCSALIDA GENERA_DOCSALIDA,
   YTBDOCU_MINOR_CODE,YTBDOCU_MINOR_DESC
        FROM COMUMGR.YTBDOCU
        WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=trim(ky_json.campo(jsonObj, 'p_documento'));

OPEN CURSOR_OUT1  FOR
         SELECT YTRPLCA_PLAN_PROC_CODE||'-'||YTRPLCA_PLAN_SEQ||'-'||YTRPLCA_CAME_CODE||'-'||YTRPLCA_SEQ PK_ACCION,YTRCAME_NOM_CAMPO CAMPO,
                YTRCAME_REQUERIDO RESTRICTIVO,YTRCAME_CONTROL CONTROL, YTRCAME_TIPO_CAMPO TIPO
                ,YTRCAME_VALOR_DEFECTO VF,YTRCAME_AYUDA AYUDA,YTRCAME_TAMANO TAMANO,YTRCAME_IND_ESTADO,YTRCAME_ID_CAMPO ID_CAMPO,YTRPLCA_SEQ SEQ,YTRPLCA_IND_ESTADO IND_ESTADO
                ,YTRCAME_ANCHO ANCHO,YTRCAME_TEXT_POS TEXT_POS,YTRCAME_DATA DATA,YTRPLCA_CAME_CODE CAME_CODE,YTRCAME_SQL QUERY,YTRCAME_ELEMENTO_COMBO ELEMENTO,YTRCAME_FUNCION_CONTROL,
                YTRCAME_SQL_VARIABLES
                FROM  YTRPLCA,YTRCAME
                WHERE  YTRPLCA_PLAN_PROC_CODE||'-'||YTRPLCA_PLAN_SEQ=V_CODE_PLANTILLA
                AND YTRPLCA_CAME_CODE=YTRCAME_CODE AND YTRPLCA_IND_ESTADO='A'
                ORDER BY YTRPLCA_ORDEN ASC;

 END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar... ' || SQLERRM);
END ;

procedure KYT_DOCU_DOCU_PP_YTBDOCU_CUR3(P_ACCION IN VARCHAR2,P_DATA in varchar2,CURSOR_OUT OUT T_CURSOR,CURSOR_OUT1 OUT T_CURSOR,CURSOR_OUT2 OUT T_CURSOR)
     is
v_PIDM int;
v_documento varchar2(20);
v_usua_id varchar2(20);
V_UNIDADES VARCHAR2(1000);
V_EXISTE NUMBER;
V_YTRVAMD_CAME_CODE VARCHAR2(4000 CHAR);
begin
  V_PIDM:=0;

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_documento:=trim(ky_json.campo(jsonObj, 'code_documento'));

   v_usua_id:=trim(ky_json.campo(jsonObj, 'usua_id'));

   V_UNIDADES:=FKYT_DOCU_DOCU_PP_UNI_USUA(v_usua_id);
   
   SELECT COUNT(*) INTO  V_EXISTE  FROM YTRVAMD WHERE YTRVAMD_DOCU_CODE = v_documento AND YTRVAMD_CONTROL = 'BT';
   
   IF V_EXISTE > 0 THEN
   
     SELECT YTRVAMD_CAME_CODE INTO  V_YTRVAMD_CAME_CODE  FROM YTRVAMD WHERE YTRVAMD_DOCU_CODE = v_documento AND YTRVAMD_CONTROL = 'BT';
   
   ELSE
   
        V_YTRVAMD_CAME_CODE := '-1';
   
   END IF;
   

--/////////////////////////DOCUMENTO////////////////////////////////////////////////
   OPEN CURSOR_OUT  FOR
     SELECT YTBDOCU_TRANSCRIPT TRANSCRIPT,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_PLANTILLA PLANTILLA,YTBDOCU_DATA DATOS,YTBDOCU_ASUNTO ASUNTO,
     --YTBDOCU_APELLIDOS||' '|| YTBDOCU_NOMBRES NOMBRE,
     BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(YTBDOCU_USUA_ID),'X') NOMBRE,
     YTBDOCU_MAJR_DESC MAJR_DESC,YTBDOCU_COLL_DESC COLL_DESC,YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,
     kyt_tramite_usuario.FYT_DAME_PALABRA(YTBDOCU_CONDICION,YTBDOCU_PERS_SEXO) CONDICION_1,YTBDOCU_CONDICION CONDICION,YTBDOCU_DATA DATA,
     kyt_tramite_usuario.FYT_DAME_GRADO_ACAD(YTBDOCU_CONDICION,YTBDOCU_MAJR_CODE,YTBDOCU_PERS_SEXO) GRADO,
     KYT_DOCU_DOCU.KYT_CANT_CUR_APRO_YTPSCIN('{"V_YTRVAMD_DOCU_CODE" : "'|| v_documento ||'", "V_YTRVAMD_CAME_CODE" : "'|| V_YTRVAMD_CAME_CODE || '"}') CANT_CONVA,
     YTBDOCU_MAJR_CODE MAJR_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,kyt_tramite_usuario.FYT_ESTADO_DOC(YTBDOCU_ESTA_CODE) ESTADO,
     YTBDOCU_MAJR_CODE MAJR_CODE,YTBDOCU_MAJR_DESC MAJR_DECS,YTBDOCU_ESTA_CODE ESTA_CODE,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_NUMERO NUMERO,
         (SELECT YTBEXPE_DESCRIPCION FROM YTBEXPE WHERE YTBEXPE_CODE=YTBDOCU_EXPE_CODE) EXPEDIENTE,YTBDOCU_EXPE_CODE EXPE_CODE,
         (SELECT YTVTIPO_DESCRIPCION FROM YTVTIPO WHERE YTVTIPO_CODE=YTBDOCU_TIPO_CODE) TIPO_DESC,YTBDOCU_TIPO_CODE TIPO_CODE,
         YTVESTA_CODE ESTA_CODE,YTVESTA_DESCRIPCION ESTA_DESCRIPCION,YTVESTA_COLOR ESTA_COLOR,YTVESTA_ESTILO ESTA_ESTILO,
         YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO,YTBDOCU_CAMP_CODE CAMPUS,
         YTBDOCU_NUMERO_FOLIOS FOLIOS,YTBDOCU_CODIGO_BARRAS CODIGO_BARRAS,YTBDOCU_OBSERVACIONES OBSERVACIONES,YTVPRIO_DESCRIPCION IMPORTANCIA,YTBDOCU_NUM_EXT NUM_EXT,
         YTBDOCU_PLAN_PROC_CODE PLAN_PROC_CODE,YTBDOCU_PLAN_SEQ PLAN_SEQ,YTBDOCU_TIEMPO TIEMPO,
         TO_DATE(SYSDATE,'DD/MM/YYYY') - TO_DATE(YTBDOCU_FECHA_RECEPCION,'DD/MM/YYYY')  AS "TIEMPO_TRANSCURRIDO",
         YTBDOCU_USUA_ID USUA_ID,
         --YTBDOCU_COSTO COSTO,--- MCL 24/10/2024 --no da costo unitario del tramite
       (SELECT R.YTRREPA_MONTO
          FROM COMUMGR.YTRREDO X
          LEFT JOIN COMUMGR.YTRREPA R
            ON R.YTRREPA_CODE_APP = X.YTRREDO_CODE
           AND R.YTRREPA_APPL = 'REQU'
         WHERE X.YTBDOCU_CODE = A.YTBDOCU_CODE
           AND X.YTRREDO_TIRE_CODE = 'REC' and rownum = 1) COSTO, --- MCL 24/10/2024 --SOLUCION da costo correcto
         YTBDOCU_CARR_PROG PROGRAMA,YTBDOCU_IND_ENTREGA ENTREGA,YTBDOCU_IND_RECEPCION RECEPCIONA,YTBDOCU_IND_DERIVAR DERIVAR,YTBDOCU_DOC_REFERENCIA DOC_REFERENCIA
         ,FKYT_DOCU_DOCU_PP_REFERENCIA_2(YTBDOCU_CODE||'-'||YTBDOCU_SEQ) REFERENCIA_2,YTBDOCU_NUM_COPIA NUM_COPIAS, YTBDOCU_SEDE_ENT SEDE_ENT,
         FKYT_DOCU_DOCU_PP_AGRUPADO(YTBDOCU_CODE||'-'||YTBDOCU_SEQ) CARPETA,YTBDOCU_CAEX_CODE  CODE_CARPETA,(SELECT YTBCAEX_DESCRIPCION
                FROM COMUMGR.YTBCAEX   WHERE YTBCAEX_CODE=YTBDOCU_CAEX_CODE) ACRPETA_DESC
                ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG,
                BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(YTBDOCU_USUA_ID_REG),'X') NOMBRE_RECEPCIONO,
                YTBDOCU_USUA_ID_REG USUA_ID_REG,
                (SELECT YGCCERT_URL_FISICA FROM YGCCERT WHERE YGCCERT_APP_CODE=v_documento||'-'||'1') AS RUTA,
                YTBDOCU_REQ_EVALUACION REQ_EVALUACION,YTBDOCU_GENERA_DOCSALIDA GENERA_DOCSALIDA,YTBDOCU_LEVL_CODE,
                (SELECT YTRPLAN_CAMP_JSON_BTN FROM YTRPLAN WHERE YTRPLAN_PROC_CODE=YTBDOCU_PLAN_PROC_CODE AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ ) CAMP_JSON_BTN,
                YTBDOCU_LEVL_CODE NIVEL_CODE, (SELECT STVLEVL_DESC FROM STVLEVL@PROD.INT.UPAO.EDU.PE WHERE STVLEVL_CODE = YTBDOCU_LEVL_CODE ) AS NIVEL_DESC,
                YTBDOCU_TERM_CODE PERIODO, YTBDOCU_COLL_CODE_1 AS "FACULTAD_CODE",  YTBDOCU_COLL_DESC AS "FACULTAD_DESC",
                YTBDOCU_MINOR_CODE AS MINR_CODE, YTBDOCU_MINOR_DESC AS MINR_DESC
         --,
         --DECODE(length(nvl(YTBDOCU_CAEX_CODE,0)),1,1,(select COUNT(*)
         --                                   from COMUMGR.ytbcaex
          --                                  WHERE YTBCAEX_CODE=YTBDOCU_CAEX_CODE
          --                                  AND YTBCAEX_IND_ESTADO='A')) CARPETA_ESTADO


     FROM YTBDOCU A,YTVESTA,YTVPRIO
     WHERE YTBDOCU_CODE=v_documento
     AND YTBDOCU_ESTA_CODE=YTVESTA_CODE
     AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE;

--LISTADO DE REQUISITOS
OPEN CURSOR_OUT1  FOR
     SELECT YTRREDO_CODE CODE,YTBDOCU_CODE DOCU_CODE,YTRREDO_DESCRIPCION DESCRIPCION,YTRREDO_FECHA_ACTIVIDAD FECHA,YTRREDO_IND_ESTADO ESTADO,
     YTRREDO_FECHA_ACEPTADO FECHA_ACEPTADO,YTRREDO_COMENTARIO COMENTARIO,YTRREDO_TIRE_CODE TIRE_CODE,YTBDOCU_CODE DOCU_CODE,YTBDOCU_SEQ DOCU_SEQ,
      (SELECT DISTINCT 'RECIBO: <b>' || YTRREPA_ACCD_RECEIPT_NUMBER||' , '|| YTRREPA_DETC_DETAIL_CODE ||'</B> - <B>'|| YTRREPA_ACCD_DESC ||'</B> ,S/.<B>'|| YTRREPA_MONTO ||'</B>'  FROM YTRREPA
     WHERE YTRREPA_CODE_APP=YTRREDO_CODE AND YTRREPA_APPL='REQU'  AND ROWNUM=1) PAGO,
     (SELECT YTVTIRE_DESCRIPCION FROM YTVTIRE WHERE YTVTIRE_CODE=YTRREDO_TIRE_CODE) TIPO_REQ,YTRREDO_AYUDA AYUDA,
     YTRREDO_IND_EJECUTO IND_EJECUTO, YTRREDO_COMENTARIO_EJECUTO COMENTARIO_EJECUTO,YTRREDO_PADH_CODE CODE_PAGO_BANCO,YTRREDO_PROC_CODE PROC_CODE,YTRREDO_IND_OPCIONAL OPCIONAL,
     YTRREDO_REQU_CODE REQU_CODE, YTROBBD_TIPO_OBJETO TIPO_OBJETO, YTROBBD_CODE OBBD_CODE
FROM YTRREDO
INNER JOIN  COMUMGR.YTVREQU ON TRIM(YTRREDO_REQU_CODE) = TRIM(YTVREQU_CODE)
LEFT JOIN COMUMGR.YTROBBD ON  YTVREQU_CODE_MICROSERVI = YTROBBD_CODE
WHERE YTBDOCU_CODE=v_documento
ORDER BY YTRREDO_ORDEN ASC;

--LISTADO DE APROBADORES
 OPEN CURSOR_OUT2  FOR
    SELECT YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ||'-'||YTRAPDO_SEQ PK_ACCION,YTRAPDO_SEQ SEQ,YTRAPDO_CODE_CODE CODE_CODE ,YTRAPDO_DOCU_CODE DOCU_CODE,YTRAPDO_DOCU_SEQ  DOCU_SEQ,YTRAPDO_NIVEL NIVEL,YTRAPDO_DESCRIPCION DESCRIPCION,
    YTRAPDO_SUBDENOMINACION SUBDENOMINACION,YTRAPDO_IND_ESTADO ESTADO,YTRAPDO_ORGN_CODE ORG_CODE,YTRAPDO_COAS_CODE COAS_CODE,
    YTRAPDO_PRVE_CODE PRVE_CODE, YTRAPDO_PRVE_DESC PRVE_DESC, YTRAPDO_FECHA_APROBACION FECHA_APROB, YTRAPDO_COMENTARIO COMENTARIO,YTRAPDO_FECHA_ACTIVIDAD FECHA
    ,YTRAPDO_ID_USUA_APROB ID_USUA_APROB,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(YTRAPDO_ID_USUA_APROB),'X') NOM_APROBADOR,
    YTRAPDO_TIAP_CODE TIPO_APROBACION,YTROREN_OREN_CODE ORDEN_CODE,YTRAPDO_USUA_RECEPCIONO USUA_RECEPT,YTRAPDO_FECHA_RECEPCIONO FECHA_RECEPT,
    YTRAPDO_TIEMPO TIEMPO,YTRAPDO_TIAP_CODE TIPO_APROB,YTRAPDO_IND_ADJUNTO IND_ADJUNTO,YTRAPDO_FECHA_DERIVACION FECHA_DERIVACION,V_UNIDADES UNIDADES,YTRAPDO_UNID_CODE UNID_CODE
    ,YTRAPDO_IND_COPIA IND_COPIA,YTRAPDO_IND_ESTADO_1 ESTADO_1,YTRAPDO_IND_PARA PARA,YTRAPDO_SEQ_DCA SEQ_COLA_HEREDADA,YTRAPDO_IND_SALIDA SALIDA
    FROM YTRAPDO,YTROREN WHERE YTRAPDO_DOCU_CODE=v_documento AND NOT YTRAPDO_IND_ESTADO IN('E')
    AND YTRAPDO_DOCU_CODE=YTROREN_ORRE_DOCU_CODE(+) AND YTRAPDO_DOCU_SEQ=YTROREN_ORRE_DOCU_SEQ(+) AND YTRAPDO_SEQ=YTROREN_APDO_SEQ(+)
    ORDER BY 6,2 ASC;



exception when OTHERS then
ROLLBACK;
        raise_application_error(-20001,'Error al listar ');
end KYT_DOCU_DOCU_PP_YTBDOCU_CUR3;



PROCEDURE KYT_DOCU_DOCU_PP_YTBDOCU_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PIDM int;
v_PaginaSize INT;
v_Pagina INT;
V_INI INT;
V_FIN INT;
V_TOTAL INT;
v_estado varchar2(10);
v_desc varchar2(100);
v_usua_id varchar2(30);
v_d varchar2(20);
v_id varchar2(20);
v_f varchar2(30);
v_fi date;
v_ff date;
v_expediente varchar2(30);
V_NOFECHA VARCHAR2(1);

V_CADENA1 VARCHAR2(150);
V_CADENA2 VARCHAR2(150);
V_CADENA3 VARCHAR2(150);
V_CADENA4 VARCHAR2(100);
V_POS1 INT;
V_POS2 INT;
V_POS3 INT;
V_NUM_REG VARCHAR2(20);

v_pro varchar2(50);
    begin
    V_NOFECHA:='N';


/*_CODEDOC, 1, ky_json.campo(jsonObj, 'esta_code'), V_CODEEXP, ky_json.campo(jsonObj, 'coll_code'), ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq'),
 ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'usua_id_reg'), sysdate, sysdate, ky_json.campo(jsonObj, 'fecha_emision'), ky_json.campo(jsonObj, 'leido'), ky_json.campo(jsonObj, 'camp_code'),
 ky_json.campo(jsonObj, 'data'), ky_json.campo(jsonObj, 'busca'), V_PLANTILLA, ky_json.campo(jsonObj, 'observaciones'), ky_json.campo(jsonObj, 'asunto'), ky_json.campo(jsonObj, 'numero_folios'), ky_json.campo(jsonObj, 'ind_virtual'),
 V_CARRERA, ky_json.campo(jsonObj, 'levl_code'), ky_json.campo(jsonObj, 'condicion'), V_APELLIDOS, V_NOMBRES, V_PIDM, V_CARRERA_DESC,
 V_FACULTAD, V_FACULTAD_DESC, V_DNI, V_SEXO, null, null,
 -1*V_NUMERO, null, null, null, ky_json.campo(jsonObj, 'codigo_barras'),
 ky_json.campo(jsonObj, 'unidad_entrega'), ky_json.campo(jsonObj, 'id_usua_recibe'), ky_json.campo(jsonObj, 'unidad_entrega_coas'),V_TIPODOC,v_soli_code,ky_json.campo(jsonObj, 'p_tipodoc')
 ,ky_json.campo(jsonObj, 'p_num_ext'),ky_json.campo(jsonObj, 'prioridad')*/



  IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
        SELECT
YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
   YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
   YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID USUA_ID, YTBDOCU_USUA_ID_REG,
   YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
   YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA,
   YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES COMENTARIOS,
   YTBDOCU_ASUNTO ASUNTO, YTBDOCU_NUMERO_FOLIOS FOLIOS, YTBDOCU_IND_VIRTUAL,
   YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
   YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES, YTBDOCU_PIDM,
   YTBDOCU_MAJR_DESC, YTBDOCU_COLL_CODE_1, YTBDOCU_COLL_DESC,
   YTBDOCU_PERS_DNI, YTBDOCU_PERS_SEXO, YTBDOCU_FECHA_ENTREGA,
   YTBDOCU_ID_USUA_ENT, YTBDOCU_NUMERO, YTBDOCU_ID_USUA_VALIDO,
   YTBDOCU_FECHA_VALIDO, YTBDOCU_FECHA_COMPLETO, YTBDOCU_CODIGO_BARRAS CODIGO_BARRAS,
   YTBDOCU_UNIDAD_ENTREGAR, YTBDOCU_ID_USUA_RECIBE, YTBDOCU_UNIDAD_ENTREGAR_COAS,
   YTBDOCU_TIPO_CODE, YTBDOCU_SOLI_CODE, YTBDOCU_TIDO_CODE TIDO_CODE,
   YTBDOCU_NUM_EXT NUM_EXT, YTBDOCU_VAAN_CODE, YTBDOCU_PRIO_CODE PRIORIDAD,
   --FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(YTBDOCU_FECHA_APROX_RESULT,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
   '' HORAS,
   YTBDOCU_DOC_REFERENCIA DOC_REFERENCIA,YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
FROM COMUMGR.YTBDOCU
WHERE YTBDOCU_CODE=P_DATA
AND YTBDOCU_SEQ=1;

ELSIF(P_ACCION='PAGO') THEN
        OPEN CURSOR_OUT  FOR
        SELECT DISTINCT to_char(TZRPADH_FIN_DATE,'dd/mm/yyyy') FECHA, TZRPADT_DOCU_CODE,TRUNC((TZRPADH_FIN_DATE-SYSDATE),2) FALTA,
        (SELECT COUNT(*) FROM YTRREDO WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_DATA
                AND YTRREDO_TIRE_CODE='REC' AND YTRREDO_PADH_CODE=TZRPADH_CODE AND YTRREDO_IND_ENV_USUA='S') CON_RECIBO,
                TZRPADH_STATUS ESTADO
        FROM TAISMGR.TZRPADT@PROD.INT.UPAO.EDU.PE,TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE
        WHERE
        TZRPADT_DOCU_CODE||'-'||TZRPADT_DOCU_SEQ=P_DATA
        AND  TZRPADH_CODE=TZRPADT_PADH_CODE;
ELSIF(P_ACCION='BANCO') THEN
        OPEN CURSOR_OUT  FOR
        SELECT TZRPADH_CODE CODE, to_char(TZRPADH_FIN_DATE,'dd/mm/yyyy') FECHA, TRUNC((TZRPADH_FIN_DATE-SYSDATE),2) FALTA,
                decode(TZRPADH_STATUS,0,'CANCELADO',1,'PENDIENTE',2,'EN PROCESO',3,'APLICADO','DESCONCIDO') ESTADO,
                TZRPADH_DETAIL_CODE DETAIL_CODE,TZRPADH_RECEIPT_NUMBER RECIBO
        FROM TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE
        WHERE TZRPADH_CODE=P_DATA;

ELSIF(P_ACCION='UNU') THEN
 jsonObj := json(P_DATA);
        OPEN CURSOR_OUT  FOR
       SELECT
YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
   YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
   YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID USUA_ID, YTBDOCU_USUA_ID_REG,
   YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
   YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA,
   YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES COMENTARIOS,
   YTBDOCU_ASUNTO ASUNTO, YTBDOCU_NUMERO_FOLIOS FOLIOS, YTBDOCU_IND_VIRTUAL,
   YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
   YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES, YTBDOCU_PIDM,
   YTBDOCU_MAJR_DESC, YTBDOCU_COLL_CODE_1, YTBDOCU_COLL_DESC,
   YTBDOCU_PERS_DNI, YTBDOCU_PERS_SEXO, YTBDOCU_FECHA_ENTREGA,
   YTBDOCU_ID_USUA_ENT, YTBDOCU_NUMERO, YTBDOCU_ID_USUA_VALIDO,
   YTBDOCU_FECHA_VALIDO, TO_CHAR(YTBDOCU_FECHA_COMPLETO,'dd/mm/yyyy') YTBDOCU_FECHA_COMPLETO, YTBDOCU_CODIGO_BARRAS CODIGO_BARRAS,
   YTBDOCU_UNIDAD_ENTREGAR, YTBDOCU_ID_USUA_RECIBE, YTBDOCU_UNIDAD_ENTREGAR_COAS,
   YTBDOCU_TIPO_CODE, YTBDOCU_SOLI_CODE, YTBDOCU_TIDO_CODE TIDO_CODE,
   YTBDOCU_NUM_EXT NUM_EXT, YTBDOCU_VAAN_CODE, YTBDOCU_PRIO_CODE PRIORIDAD,
   --FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(YTBDOCU_FECHA_APROX_RESULT,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
   '' HORAS,
   YTBDOCU_DOC_REFERENCIA DOC_REFERENCIA,YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
FROM COMUMGR.YTBDOCU
--WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ||'-'||YTBDOCU_NUMERO='0000001155-1-17';
WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ||'-'||YTBDOCU_NUMERO=TRIM(ky_json.campo(jsonObj,'p_codigo'))
AND YTBDOCU_USUA_ID=TRIM(ky_json.campo(jsonObj,'p_id'))
AND TO_CHAR(YTBDOCU_FECHA_COMPLETO,'dd/mm/yyyy')=TRIM(ky_json.campo(jsonObj,'p_fecha'));


ELSIF (P_ACCION='LIST_REQ') THEN 


        jsonObj := json(P_DATA);
        
        
        OPEN CURSOR_OUT  FOR
       SELECT YTRREDO_CODE CODE,YTBDOCU_CODE DOCU_CODE,YTRREDO_DESCRIPCION DESCRIPCION,YTRREDO_FECHA_ACTIVIDAD FECHA,YTRREDO_IND_ESTADO ESTADO,
             YTRREDO_FECHA_ACEPTADO FECHA_ACEPTADO,YTRREDO_COMENTARIO COMENTARIO,YTRREDO_TIRE_CODE TIRE_CODE,YTBDOCU_CODE DOCU_CODE,YTBDOCU_SEQ DOCU_SEQ,
              (SELECT DISTINCT 'RECIBO: <b>' || YTRREPA_ACCD_RECEIPT_NUMBER||' , '|| YTRREPA_DETC_DETAIL_CODE ||'</B> - <B>'|| YTRREPA_ACCD_DESC ||'</B> ,S/.<B>'|| YTRREPA_MONTO ||'</B>'  FROM YTRREPA
             WHERE YTRREPA_CODE_APP=YTRREDO_CODE AND YTRREPA_APPL='REQU'  AND ROWNUM=1) PAGO,
             (SELECT YTVTIRE_DESCRIPCION FROM YTVTIRE WHERE YTVTIRE_CODE=YTRREDO_TIRE_CODE) TIPO_REQ,YTRREDO_AYUDA AYUDA,
             YTRREDO_IND_EJECUTO IND_EJECUTO, YTRREDO_COMENTARIO_EJECUTO COMENTARIO_EJECUTO,YTRREDO_PADH_CODE CODE_PAGO_BANCO,YTRREDO_PROC_CODE PROC_CODE,YTRREDO_IND_OPCIONAL OPCIONAL
        FROM YTRREDO WHERE YTBDOCU_CODE=(ky_json.campo(jsonObj,'code_documento')) AND YTRREDO_TIRE_CODE = 'ADJ' AND YTRREDO_IND_ESTADO = 'V'
        ORDER BY YTRREDO_ORDEN ASC;


ELSIF(P_ACCION='LIS')  THEN --LIS

    V_PIDM:=0;

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=UPPER(REPLACE(ky_json.campo(jsonObj, 'b'),' ',''));
    v_d:=ky_json.campo(jsonObj, 'd');
    v_id:=UPPER(ky_json.campo(jsonObj, 'id'));
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_f:=ky_json.campo(jsonObj, 'fe');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


        if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','NU','AR')) then

        IF(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
        ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
        ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
        END IF;

 -- IF(v_estado='%') then

  IF(LENGTH(v_d)>0) THEN

    V_TOTAL:=1;

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE"    ,
        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
        '' RATIO,
        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB
        ,
        --FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
        '' HORAS,
        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
        FROM (SELECT rownum as ROWNRO,XX.* FROM (

                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,INITCAP(YTVESTA_DESCRIPCION) ESTADO,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                            --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                            '0' NUM_REQUISITOS
                            ,YTBDOCU_USUA_ID USUA_ID,
                            DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,

                            DECODE(YTBDOCU_IND_RECEPCION,
                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                'R','<span style="color:red;">Presencial</span>',
                                                                'P','<span style="color:blue;">Por web</span>') RECEPCION,
                            DECODE(YTBDOCU_IND_ENTREGA,
                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                'R','<span style="color:red;">Presencial</span>',
                                                                'P','<span style="color:blue;">Por web</span>') ENTREGA
                                                                ,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA
                                                                ,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG

                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                    WHERE (YTBDOCU_CODE=LPAD(V_D,10,'0') OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE=LPAD(V_D,10,'0') )
                 --   AND YTBDOCU_ESTA_CODE IN('NU','EV','TR','CO','AT','OB','RE') AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS 
                     AND  (((SELECT COUNT(*) FROM YTRUSDO WHERE YTRUSDO_USUA_ID=V_USUA_ID AND YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE AND YTRUSDO_IND_ESTADO='A')>0) OR ((SELECT COUNT(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=V_USUA_ID AND YTRUSSI_IND_ESTADO='A')>0))
                    ) XX) TT
                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;


  ELSE  --****************************************** RANGO DE FECHAS

     IF V_NOFECHA<>'S' THEN --********************** SE PROPORCIONA RANGO DE FECHAS
          IF(v_Id='%') THEN --********************** NO HAY ID
                    IF v_estado='%' THEN --********* CUALQUIER ESTADO


                                       /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_DESC)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                        AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff);*/


                            IF v_desc<>'%' THEN
                                    OPEN CURSOR_OUT  FOR
                                    WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM(SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                YTBDOCU_ASUNTO||'BBB1111' ASUNTO,
                                                YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES ,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                               -- kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS,
                                               '0' NUM_REQUISITOS,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,YTBDOCU_IND_RECEPCION,
                                               YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE
                                               ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG


                                        FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_DESC)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        --AND YTBDOCU_ESTA_CODE IN('TR')
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                        AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                        --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                        order by YTBDOCU_CODE DESC) XX)

                                        SELECT TT.*,v_PaginaSize "PAGINASIZE"   ,
                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                        '' RATIO,
                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                        DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                         DECODE(YTBDOCU_IND_RECEPCION,
                                                                                'V',' <span style="color:blue;">Por web1</span>',
                                                                                'R','<span style="color:red;">Presencial</span>',
                                                                                'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                        DECODE(YTBDOCU_IND_ENTREGA,
                                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                                'R','<span style="color:red;">Presencial</span>',
                                                                                'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                                                                INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                        YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                        '' HORAS,
                                        --FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                                       ,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                    FROM TEMP TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                           ELSE
                                OPEN CURSOR_OUT  FOR
                                    WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM(SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES ,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                               -- kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS,
                                               '0' NUM_REQUISITOS,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,YTBDOCU_IND_RECEPCION,
                                               YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE
                                               ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                        FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                        WHERE  YTBDOCU_ESTA_CODE<>'NU' --IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                        AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                        --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                        order by YTBDOCU_CODE DESC) XX)
                                        SELECT TT.*,v_PaginaSize "PAGINASIZE"   ,
                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                        '' RATIO,
                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                        DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                         DECODE(YTBDOCU_IND_RECEPCION,
                                                                                'V',' <span style="color:blue;">Por web1</span>',
                                                                                'R','<span style="color:red;">Presencial</span>',
                                                                                'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                        DECODE(YTBDOCU_IND_ENTREGA,
                                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                                'R','<span style="color:red;">Presencial</span>',
                                                                                'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                                                                INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                        YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                        '' HORAS,
                                        --FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                                       ,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                    FROM TEMP TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                           END IF;

                        ELSE  --******************* RANGO DE FECHAS Y ESTADO

                                        /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_DESC)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        and YTBDOCU_ESTA_CODE=v_estado
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                         OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                         AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff);*/

                                OPEN CURSOR_OUT  FOR

                                   WITH TEMP AS(SELECT XX.*,rownum as ROWNRO FROM(SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_ASUNTO ASUNTO,
                                        YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                        '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES ,
                                        YTBDOCU_FECHA_VALIDO FECHA_VALIDO,
                                        YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_CONDICION,YTBDOCU_IND_RECEPCION,
                                        YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE
                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                    WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_DESC)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                    AND YTBDOCU_ESTA_CODE =v_estado
                                    --AND YTBDOCU_ESTA_CODE IN('TR')
                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                    AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                        OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                        AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                    --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                    order by YTBDOCU_CODE DESC) XX)

                                    SELECT TT.*,  v_PaginaSize "PAGINASIZE"   ,
                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                    '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                    DECODE(YTBDOCU_IND_RECEPCION,
                                                                'V',' <span style="color:blue;">Por web1</span>',
                                                                'R','<span style="color:red;">Presencial</span>',
                                                                'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                    DECODE(YTBDOCU_IND_ENTREGA,
                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                'R','<span style="color:red;">Presencial</span>',
                                                                'P','<span style="color:blue;">Por web</span>') ENTREGA ,
                                    YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO
                                    ,'' HORAS,
                                    --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                    (SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                    FROM TEMP TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                    END IF;
--*********************************** RANGO DE FECHAS
            ELSE --****************** SE PROPORCIONA CRITERIO ID
                        IF v_estado='%' THEN --********************** NO PROPORCIONA ESTADO

                                        /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE ((YTBDOCU_USUA_ID=v_id) or upper(replace(YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_id ||'%')
                                        AND ((UPPER(YTBDOCU_NUM_EXT)= V_DESC)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                          -- and YTBDOCU_ESTA_CODE IN('NU','EV','TR','CO','AT','OB','RE')
                                         AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                                 AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff);*/

                                        OPEN CURSOR_OUT  FOR
                                        WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM( SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO ASUNTO,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                      --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                      '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_ESTA_CODE ESTADO_CODE,
                                                      YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,YTBDOCU_IND_RECEPCION,
                                                      YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,
                                                      YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                      ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                      YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE
                                                      ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                    WHERE ((YTBDOCU_USUA_ID=v_id) or upper(replace(YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_id ||'%')
                                                    AND upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%'
                                                    --AND YTBDOCU_ESTA_CODE IN('NU','EV','TR','CO','AT','OB','RE') AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                    AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A')
                                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                                 AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                    order by YTBDOCU_CODE DESC) XX)
                                            SELECT TT.*,  v_PaginaSize "PAGINASIZE"     ,
                                            --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                            '' RATIO,
                                            --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                            FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                            DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                            YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                            INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                            DECODE(YTBDOCU_IND_RECEPCION,
                                                  'V',' <span style="color:blue;">Por web</span>',
                                                  'R','<span style="color:red;">Presencial</span>',
                                                  'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                            DECODE(YTBDOCU_IND_ENTREGA,
                                                    'V',' <span style="color:blue;">Por web</span>',
                                                    'R','<span style="color:red;">Presencial</span>',
                                                    'P','<span style="color:blue;">Por web</span>') ENTREGA
                                            ,'' HORAS,
                                             --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                             FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                                              ,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                    FROM TEMP TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;


                        ELSE --************* RANGO DE FECHAS--> ID DE USUARIO---> ESTADO

                                       /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                           WHERE ((YTBDOCU_USUA_ID=v_id) or upper(replace(YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_id ||'%')
                                           AND  ((YTBDOCU_NUM_EXT= V_DESC)OR upper(YTBDOCU_asunto) like '%'|| v_desc ||'%')
                                          and YTBDOCU_ESTA_CODE =v_estado
                                         AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                                 AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff);*/

                                OPEN CURSOR_OUT  FOR
                                WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM( SELECT YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                    YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES  ,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                    '0' NUM_REQUISITOS,YTBDOCU_CONDICION,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                    YTBDOCU_IND_RECEPCION,YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA
                                                    ,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE
                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                            --WHERE ((YTBDOCU_USUA_ID=v_id) or upper(replace(YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_id ||'%')
                                            WHERE YTBDOCU_USUA_ID=v_id
                                            AND YTBDOCU_ESTA_CODE =v_estado
                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                            AND ((YTBDOCU_NUM_EXT= V_DESC)OR upper(YTBDOCU_asunto) like '%'|| v_desc ||'%')
                                             AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A')
                                                         OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                         AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                            order by YTBDOCU_CODE DESC)XX)

                                    SELECT TT.*, v_PaginaSize "PAGINASIZE"     ,
                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                    '' RATIO,
                                    DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                    YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                    DECODE(YTBDOCU_IND_RECEPCION,
                                          'V',' <span style="color:blue;">Por web</span>',
                                          'R','<span style="color:red;">Presencial</span>',
                                          'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                          DECODE(YTBDOCU_IND_ENTREGA,
                                         'V',' <span style="color:blue;">Por web</span>',
                                         'R','<span style="color:red;">Presencial</span>',
                                         'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                    FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                                    ,'' HORAS
                                     --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS
                                      ,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                    FROM TEMP TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                            END IF;
            END IF; --FIN INGRESA CUANDO USUARIO PROPORCIONA ID

--*********************************************************************************************************************************************************************
--************************ SIN FECHAS
 ELSE

                   select INSTR(V_DESC,'+', 1,1) INTO V_POS1 FROM DUAL;
                   IF V_POS1=0 THEN
                     V_CADENA1:=V_DESC;
                     V_CADENA2:=V_DESC;
                   ELSE
                        select SUBSTR( V_DESC,1,V_POS1-1) INTO V_CADENA1 FROM DUAL;
                        select SUBSTR( V_DESC,V_POS1+1) INTO V_CADENA2 FROM DUAL;

                   END IF;
--************************************************************* SIN FECHAS
           IF(v_Id='%') THEN --******************************** NO PROPORCIONA ID DE USUARIO
                    IF v_estado='%' THEN --******************** NO PROPORCIONA ESTADO

                                       /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_CADENA2)
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                        and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO
                                        WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))



                                        --AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                        V_TOTAL as TOTAL_REG,
                                        ;*/
                                    --V_TOTAL:='200';

                                    /*OPEN CURSOR_OUT  FOR
                                        SELECT TT.*, v_PaginaSize "PAGINASIZE"   ,
                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                        '' RATIO,
                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ)  SN_APROB,
                                        DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                         DECODE(YTBDOCU_IND_RECEPCION,
                                                  'V',' <span style="color:blue;">Por web1</span>',
                                                  'R','<span style="color:red;">Presencial</span>',
                                                  'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                         DECODE(YTBDOCU_IND_ENTREGA,
                                                'V',' <span style="color:blue;">Por web</span>',
                                                'R','<span style="color:red;">Presencial</span>',
                                                'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                        YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                        INITCAP(YY.YTVESTA_DESCRIPCION) ESTADO,'' HORAS,
                                        --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                        PR.YTVPRIO_DESCRIPCION PRIORIDAD,YY.YTVESTA_DESCRIPCION,YY.YTVESTA_CODE CODE_ESTADO,
                                        YY.YTVESTA_COLOR COLOR,YY.YTVESTA_ESTILO ESTILO
                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                SELECT rownum+(V_INI-1)  as TOTAL_REG,YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,
                                                YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO,YTBDOCU_CAMP_CODE CAMPUS,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_IND_RECEPCION,YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA, YTBDOCU_TIPO_CODE,YTBDOCU_PRIO_CODE
                                        FROM YTBDOCU
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT) = V_CADENA2)
                                                or upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                        AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                       -- AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                        --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                        order by YTBDOCU_CODE DESC)XX) TT,YTVESTA YY,YTVPRIO PR
                                        WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN

                                        AND ESTADO_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE;*/


                                        /*NUEVA PAGINACIÓN*/

                                        --ANALYZE TABLE COMUMGR.YTBDOCU COMPUTE STATISTICS;

                                   IF    V_CADENA1<>'%' THEN
                                        OPEN CURSOR_OUT  FOR
                                        WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM( SELECT
                                                 YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,
                                                 YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,
                                                YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO,YTBDOCU_CAMP_CODE CAMPUS,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_IND_RECEPCION,YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA, YTBDOCU_TIPO_CODE,YTBDOCU_PRIO_CODE
                                                ,YY.YTVESTA_CODE,YY.YTVESTA_COLOR,YY.YTVESTA_ESTILO,PR.YTVPRIO_DESCRIPCION,
                                                YY.YTVESTA_DESCRIPCION,YTBDOCU_TIDO_CODE TIDO_CODE,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO
                                                ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                        FROM YTBDOCU,YTVESTA YY,YTVPRIO PR
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT) = V_CADENA2)
                                                or upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                        AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                       -- AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                        --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                        ORDER BY YTBDOCU_CODE DESC)XX)

                                        SELECT TT.*, v_PaginaSize "PAGINASIZE"   ,
                                        '' RATIO,
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ)  SN_APROB,
                                        DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                         DECODE(YTBDOCU_IND_RECEPCION,
                                                  'V',' <span style="color:blue;">Por web1</span>',
                                                  'R','<span style="color:red;">Presencial</span>',
                                                  'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                         DECODE(YTBDOCU_IND_ENTREGA,
                                                'V',' <span style="color:blue;">Por web</span>',
                                                'R','<span style="color:red;">Presencial</span>',
                                                'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                        YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                        INITCAP(YTVESTA_DESCRIPCION) ESTADO,'' HORAS,
                                        --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                        YTVPRIO_DESCRIPCION PRIORIDAD,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,
                                        YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO
                                        ,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                        FROM TEMP TT
                                        WHERE TT.ROWNRO>=V_INI and ROWNRO<=V_FIN ;
                         ELSE
                                        OPEN CURSOR_OUT  FOR
                                        WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM( SELECT
                                                 YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,
                                                 YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,
                                                YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO,YTBDOCU_CAMP_CODE CAMPUS,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_IND_RECEPCION,YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,
                                                YTBDOCU_FECHA_ENTREGA, YTBDOCU_TIPO_CODE,YTBDOCU_PRIO_CODE
                                                ,YTBDOCU_ESTA_CODE,
                                                YTBDOCU_TIDO_CODE TIDO_CODE --,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,YY.YTVESTA_DESCRIPCION,YY.YTVESTA_COLOR,YY.YTVESTA_ESTILO,
                                                --PR.YTVPRIO_DESCRIPCION,YY.YTVESTA_CODE
                                                ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                        FROM YTBDOCU                                        
                                        WHERE YTBDOCU_ESTA_CODE<>'NU' --IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                        AND (  (SELECT COUNT(*) FROM YTRUSDO
                                                        WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE
                                                        AND  YTRUSDO_USUA_ID=v_usua_id
                                                        AND ytrusdo_IND_ESTADO='A' )>0
                                                OR
                                                (SELECT COUNT(*) FROM YTRUSSI
                                                    WHERE YTRUSSI_USUA_ID=v_usua_id
                                                    AND YTRUSSI_IND_ESTADO='A')>0)

                                       -- AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                        --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                         ORDER BY YTBDOCU_CODE DESC)XX)

                                        SELECT TT.*, v_PaginaSize "PAGINASIZE"   ,
                                        '' RATIO,
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ)  SN_APROB,
                                        DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                         DECODE(YTBDOCU_IND_RECEPCION,
                                                  'V',' <span style="color:blue;">Por web1</span>',
                                                  'R','<span style="color:red;">Presencial</span>',
                                                  'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                         DECODE(YTBDOCU_IND_ENTREGA,
                                                'V',' <span style="color:blue;">Por web</span>',
                                                'R','<span style="color:red;">Presencial</span>',
                                                'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                        YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                        INITCAP(YTVESTA_DESCRIPCION) ESTADO,'' HORAS,
                                        --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                        YTVPRIO_DESCRIPCION PRIORIDAD,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,
                                        YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO
                                        ,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                        FROM TEMP TT,YTVESTA YY,YTVPRIO PR
                                        WHERE TT.ROWNRO>=V_INI and ROWNRO<=V_FIN
                                        AND TT.YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE;
                         END IF;



--*****************************************************************************************************************************************************************
                        ELSE  --***************** SIN RANGO DE FECHAS--> PROPORCIONA ESTADO

                                            /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                            WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_CADENA2)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                            and YTBDOCU_ESTA_CODE=v_estado
                                            AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                             OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                             --AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                             ;*/

                                OPEN CURSOR_OUT  FOR

                                WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM( SELECT  /*+ first_row(v_PaginaSize) */ YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                    YTBDOCU_ASUNTO ASUNTO,
                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                        '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,
                                        YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO,YTBDOCU_CAMP_CODE CAMPUS,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_IND_RECEPCION,YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA,YTBDOCU_TIPO_CODE,
                                        YTBDOCU_PRIO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE
                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                    FROM YTBDOCU
                                    
                                    WHERE ((UPPER(YTBDOCU_NUM_EXT)= V_CADENA2)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                    AND YTBDOCU_ESTA_CODE =v_estado
                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                   -- AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE
                                    --                AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                     --OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                     AND EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A')

                                        --AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                    --AND  ((SELECT count(*) FROM YTRUSSI WHERE YTRUSSI_USUA_ID=:v_usua_id AND YTRUSSI_IND_ESTADO='A')>0 OR (YTRUSDO_USUA_ID=:v_usua_id AND ytrusdo_IND_ESTADO='A') )
                                    ORDER BY YTBDOCU_CODE DESC) XX)
                                    SELECT TT.*,v_PaginaSize "PAGINASIZE"   ,
                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                    '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                    YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                    DECODE(YTBDOCU_IND_RECEPCION,
                                                                'V',' <span style="color:blue;">Por web1</span>',
                                                                'R','<span style="color:red;">Presencial</span>',
                                                                'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                    DECODE(YTBDOCU_IND_ENTREGA,
                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                'R','<span style="color:red;">Presencial</span>',
                                                                'P','<span style="color:blue;">Por web</span>') ENTREGA ,
                                                                INITCAP(YY.YTVESTA_DESCRIPCION) ESTADO
                                    ,'' HORAS,
                                   -- ,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                    PR.YTVPRIO_DESCRIPCION PRIORIDAD,YY.YTVESTA_DESCRIPCION,YY.YTVESTA_CODE CODE_ESTADO,
                                        YY.YTVESTA_COLOR COLOR,YY.YTVESTA_ESTILO ESTILO,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                    FROM TEMP TT,YTVESTA YY,YTVPRIO PR
                                    WHERE ROWNRO BETWEEN V_INI AND V_FIN
                                    AND ESTADO_CODE=YY.YTVESTA_CODE
                                    AND YTBDOCU_PRIO_CODE=PR.YTVPRIO_CODE;
                    END IF;


            ELSE --********************************************************** SIN RANGO DE FECHAS Y PROPORCIONA ID
                        IF v_estado='%' THEN --****************************** NO PROPORCIONA ESTADO

                                        /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE ((YTBDOCU_USUA_ID=v_id) or upper(replace(YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_id ||'%')
                                        AND ((UPPER(YTBDOCU_NUM_EXT)= V_CADENA2)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                          -- and YTBDOCU_ESTA_CODE IN('NU','EV','TR','CO','AT','OB','RE')
                                         AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                                 --AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                                 ;*/

                                        OPEN CURSOR_OUT  FOR
                                            SELECT TT.*,v_PaginaSize "PAGINASIZE"     ,
                                            --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                            '' RATIO,
                                            --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                            FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                            DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                            YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                            INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                            DECODE(YTBDOCU_IND_RECEPCION,
                                                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                                                'R','<span style="color:red;">Presencial</span>',
                                                                                                'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                            DECODE(YTBDOCU_IND_ENTREGA,
                                                                                                'V',' <span style="color:blue;">Por web</span>',
                                                                                                'R','<span style="color:red;">Presencial</span>',
                                                                                                'P','<span style="color:blue;">Por web</span>') ENTREGA
                                             ,'' HORAS,
                                             --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
                                             FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                                              FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                SELECT rownum+(V_INI-1)  as TOTAL_REG,YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                            YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                            --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                            '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                            YTBDOCU_IND_RECEPCION,YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA
                                                            ,YTBDOCU_TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO                                                    
                                                    WHERE YTBDOCU_USUA_ID=v_id
                                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)= V_CADENA2)OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| V_CADENA1 ||'%')
                                                    --AND YTBDOCU_ESTA_CODE IN('NU','EV','TR','CO','AT','OB','RE') AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                    AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A')
                                                                 OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                                 --AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                            --*************************************** SIN RANGO DE FECHAS Y PROPORCIONA ID, ESTADO
                            ELSE

                                       /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                       WHERE ((YTBDOCU_USUA_ID=v_id) or upper(replace(YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_id ||'%')
                                       AND  ((YTBDOCU_NUM_EXT= V_CADENA2)OR upper(YTBDOCU_asunto) like '%'|| V_CADENA1 ||'%')
                                        and YTBDOCU_ESTA_CODE =v_estado
                                        AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A' )
                                                             OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                             --AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                         ;*/

                                OPEN CURSOR_OUT  FOR
                                    SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE"     ,
                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                    '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,
                                    YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,
                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                    DECODE(YTBDOCU_IND_RECEPCION,
                                                                                        'V',' <span style="color:blue;">Por web</span>',
                                                                                        'R','<span style="color:red;">Presencial</span>',
                                                                                        'P','<span style="color:blue;">Por web</span>') RECEPCION,
                                                                                        DECODE(YTBDOCU_IND_ENTREGA,
                                                                                        'V',' <span style="color:blue;">Por web</span>',
                                                                                        'R','<span style="color:red;">Presencial</span>',
                                                                                        'P','<span style="color:blue;">Por web</span>') ENTREGA,
                                    FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                                     ,'' HORAS
                                     --,FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(FECHA_APROX,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS
                                      FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                        SELECT  rownum+(V_INI-1)  as TOTAL_REG,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                    YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS
                                                    '0' NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS,YTBDOCU_NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                    YTBDOCU_IND_RECEPCION,YTBDOCU_TIPO_CODE,
                                                    YTBDOCU_IND_ENTREGA,YTBDOCU_FECHA_APROX_RESULT FECHA_APROX,YTBDOCU_FECHA_ENTREGA,YTBDOCU_TIDO_CODE TIDO_CODE
                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO                                            
                                            WHERE YTBDOCU_USUA_ID=v_id
                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                            AND ((YTBDOCU_NUM_EXT= V_CADENA2)OR upper(YTBDOCU_asunto) like '%'|| V_CADENA1 ||'%')
                                            AND YTBDOCU_ESTA_CODE =v_estado
                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                            AND (EXISTS  (SELECT 'Y' FROM YTRUSDO  WHERE   YTRUSDO_PROC_CODE=YTBDOCU_PLAN_PROC_CODE   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A')
                                                         OR  EXISTS(SELECT 'Y' FROM YTRUSSI WHERE YTRUSSI_USUA_ID=v_usua_id AND YTRUSSI_IND_ESTADO='A'))
                                                        -- AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                            order by YTBDOCU_CODE DESC) XX) TT
                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                            END IF;
            END IF; --FIN INGRESA CUANDO USUARIO PROPORCIONA ID


    END IF; --NO PROPORCIONA FECHA


    END IF;
END IF;

ELSIF(P_ACCION='LIE') THEN  --LISTADO DE DOCUMENTOS POR EXPEDIENTE

jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=UPPER(ky_json.campo(jsonObj, 'b'));
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


     SELECT count(*) into V_TOTAL
                    FROM YTBDOCU
                    WHERE  YTBDOCU_EXPE_CODE=v_expediente
                    AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR');


    OPEN CURSOR_OUT  FOR
            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE"    FROM (SELECT rownum as ROWNRO,XX.* FROM (SELECT YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,INITCAP(YTVESTA_DESCRIPCION) ESTADO,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                            kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(YTBDOCU_CODE,YTBDOCU_SEQ) NUM_REQUISITOS,YTBDOCU_USUA_ID USUA_ID,YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRES,
                            DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT
                            ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                    WHERE  YTBDOCU_EXPE_CODE=v_expediente
                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                    AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR') AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                     order by YTBDOCU_CODE DESC) XX) TT
                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;


ELSIF(P_ACCION='LPA') THEN  --LISTADO DE DOCUMENTOS PENDIENTES DE APROBACIÓN POR UNIDADES ADMINISTRATIVAS

jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_id:=ky_json.campo(jsonObj, 'id');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_f:=ky_json.campo(jsonObj, 'fe');
    v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

     --if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','NU','AR')) then

      if(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
      ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
       ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
       END IF;

     IF(LENGTH(v_d)>0) THEN  --INDICA QUE INGRESO UN CODIGO DE DOCUMENTO


   -- SELECT '1' INTO V_TOTAL  FROM DUAL;
                        V_TOTAL:=1;
                         V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

                    OPEN CURSOR_OUT  FOR
                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                        '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE  (YTBDOCU_CODE= v_d OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG||'%')
                                --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_ESTA_CODE IN(v_estado) 
                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                        AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                        --AND YTRAPDO_NIVEL<>1
                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                    WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                    --AND
                                                    YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                order by YTBDOCU_CODE DESC) XX) TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

     ELSE --INDICA UE INGRESO UN ASUNTO DE BUSQUEDA /ID

            IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO


               IF V_NOFECHA<>'S' THEN   --************** INDICA QUE EL USUARIO PROPORCIONO FECHA

                            /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  YTBDOCU_USUA_ID=V_ID
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            and YTBDOCU_ESTA_CODE IN('TR','OB')
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;
                            */





                         OPEN CURSOR_OUT  FOR

                              WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM (SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE YTBDOCU_USUA_ID=V_ID
                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_ESTA_CODE IN(v_estado) 
                               AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                    AND  (SELECT count(*) FROM YTRAPDO
                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                    --AND YTRAPDO_NIVEL<>1
                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                        --AND
                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0
                                order by YTBDOCU_CODE DESC) XX)

                                SELECT TT.*,  v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                FROM TEMP TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

               ELSE   --************** NO PROPORCIONO FECHA

                                       /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                                WHERE  YTBDOCU_USUA_ID=V_ID
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                            OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND  (SELECT count(*) FROM YTRAPDO
                                                WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;*/

                        OPEN CURSOR_OUT  FOR


                             WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM (SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO    ASUNTO,
                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE YTBDOCU_USUA_ID=V_ID
                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_ESTA_CODE IN(v_estado) 
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                    AND  (SELECT count(*) FROM YTRAPDO
                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                    --AND YTRAPDO_NIVEL<>1
                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                        --AND
                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                order by YTBDOCU_CODE DESC) XX)

                                SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS,(SELECT COUNT(*)  FROM TEMP) TOTAL_REG
                                FROM TEMP TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                 END IF;

            ELSE   --INDICA QUE SOLO INGRESO ASUNTO

                  IF V_NOFECHA<>'S' THEN --***********INGRESO FECHA

                        /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            and YTBDOCU_ESTA_CODE IN('TR','OB')
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;
                                                */

                        OPEN CURSOR_OUT  FOR
                                WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM (SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_ESTA_CODE IN(v_estado) 
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                    AND  (SELECT count(*) FROM YTRAPDO
                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                    --AND YTRAPDO_NIVEL<>1
                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND
                                        EXISTS(SELECT 'Y' FROM YTRUSUN
                                        WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE)

                                        --YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')

                                        )>0

                                order by YTBDOCU_CODE DESC) XX)

                                SELECT /*+ FIRST_ROWS(n) */ TT.*,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS,(SELECT COUNT(*)  FROM TEMP) TOTAL_REG

                                FROM TEMP TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

--*************NO PROPORCIONA NINGUN PARAMETOR NI FECHA
                       ELSE --***********NO INGRESO FECHA    ||'XXXX'

                            IF v_desc<>'%'  OR V_PRO<>'%' THEN


                                            SELECT COUNT(*) INTO V_TOTAL
                                            FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                            WHERE   YTRUSUN_USUA_ID=v_usua_id
                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                            AND YTRUSUN_IND_ESTADO='A'
                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                            AND YTRAPDO_IND_ESTADO='P'
                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                    FROM COMUMGR.YTRAPDO
                                                                                    WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                    AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                    AND YTRAPDO_IND_ESTADO='P')
                                             AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                            --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                            AND YTBDOCU_ESTA_CODE IN(v_estado)   --AGREGAR 17/09/2020 JR
                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                            OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                           AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%';


                                    /*SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU,YTRAPDO PP
                                        WHERE ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                    OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                            AND (YTBDOCU_ESTA_CODE ='TR' OR YTBDOCU_ESTA_CODE ='OB')
                                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                            AND YTBDOCU_CODE=YTRAPDO_DOCU_CODE
                                            AND YTBDOCU_SEQ=YTRAPDO_DOCU_SEQ
                                            AND YTRAPDO_IND_ESTADO='P'
                                                                     AND (SELECT COUNT(*) FROM YTRUSUN
                                                                        WHERE  YTRUSUN_USUA_ID=v_usua_id
                                                                        AND YTRUSUN_IND_ESTADO='A'
                                                                        AND YTRUSUN_UNID_CODE=PP.YTRAPDO_UNID_CODE)>0;*/



                                            OPEN CURSOR_OUT  FOR

                                                   SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                    '' RATIO,
                                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                   FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                   --'CCCC' SN_APROB,
                                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO ,
                                                   --'XX' COMO_LLEGO,
                                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                   -- ,'VVV' TIPO_CODE,
                                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                    '0' NUM_REQUISITOS,V_TOTAL TOTAL_REG
                                                    FROM (SELECT XX.*,rownum as ROWNRO FROM (
                                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                    FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                                     LEFT JOIN YTVESTA ON YTBDOCU_ESTA_CODE=YTVESTA_CODE
                                                     LEFT JOIN YTVPRIO ON YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                    WHERE   YTRUSUN_USUA_ID=v_usua_id
                                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                    AND YTRUSUN_IND_ESTADO='A'
                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                                    AND YTRAPDO_IND_ESTADO='P'
                                                    AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                            AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                            AND YTRAPDO_IND_ESTADO='P')
                                                     AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                                    AND YTBDOCU_ESTA_CODE IN(v_estado)   --AGREGAR 17/09/2020 JR
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                          OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')

                                                     AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'

                                                    order by YTBDOCU_CODE DESC) XX)  TT
                                                    WHERE ROWNRO >= v_Ini AND ROWNRO<= v_Fin;

                                                   /* SELECT  '' YTBDOCU_COLL_CODE,''  CODE,1 SEQ,'' ESTADO_CODE,TO_DATE('12/10/2014') FECHA,'' ASUNTO,
                                                                    '' NOMBRE,'' YTVESTA_DESCRIPCION,'' CODE_ESTADO,'' COLOR,
                                                                    '' USUA_ID,
                                                                    '' YTBDOCU_CONDICION,'' MAJR_DESC,
                                                                    '' DNI,'' SEXO,'' DATA,'' NOMBRES,TO_DATE('12/10/2014') FECHA_VALIDO,'' ID_USUA_VALIDO
                                                                    ,'' CAMPUS,'' PRIORIDAD,'' NUM_EXT,
                                                                    '' YTBDOCU_TIPO_CODE,'' TIPO_CODE_1,0 ROWNRO,1 "PAGINASIZE",'' RATIO,'' SN_APROB,'' COMO_LLEGO,'' ESTADO,'' CONDICION,
                                                     '' TIPO_CODE,'0' NUM_REQUISITOS,(SELECT COUNT(*) FROM TEMP) TOTAL_REG FROM DUAL
                                                    UNION*/

                                                   /* SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                    '' RATIO,
                                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                   FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                   --'CCCC' SN_APROB,
                                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,
                                                   --'XX' COMO_LLEGO,
                                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                   -- ,'VVV' TIPO_CODE,
                                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                    '0' NUM_REQUISITOS,V_TOTAL TOTAL_REG
                                                     FROM TEMP TT
                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;*/

                                    ELSE  --NO ENVIA DESCRIPCION PARA BUSCAR
                                        SELECT COUNT(*) INTO V_TOTAL
                                            FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                            WHERE   YTRUSUN_USUA_ID=v_usua_id
                                            AND YTRUSUN_IND_ESTADO='A'
                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                            AND YTRAPDO_IND_ESTADO='P'
                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                    FROM COMUMGR.YTRAPDO
                                                                                    WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                    AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                    AND YTRAPDO_IND_ESTADO='P')
                                             AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                            --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                            AND YTBDOCU_ESTA_CODE IN(v_estado)   --AGREGAR 17/09/2020 JR
                                            ;



                                           OPEN CURSOR_OUT  FOR

                                                   SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                    '' RATIO,
                                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                   FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                   --'CCCC' SN_APROB,
                                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,
                                                   --'XX' COMO_LLEGO,
                                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                   -- ,'VVV' TIPO_CODE,
                                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                    '0' NUM_REQUISITOS,V_TOTAL TOTAL_REG
                                                    FROM (SELECT XX.*,rownum as ROWNRO FROM (
                                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                    FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                                     LEFT JOIN YTVESTA ON YTBDOCU_ESTA_CODE=YTVESTA_CODE
                                                     LEFT JOIN YTVPRIO ON YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                    WHERE   YTRUSUN_USUA_ID=v_usua_id
                                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                    AND YTRUSUN_IND_ESTADO='A'
                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                                    AND YTRAPDO_IND_ESTADO='P'
                                                    AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                            AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                            AND YTRAPDO_IND_ESTADO='P')
                                                     AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                                    AND YTBDOCU_ESTA_CODE IN(v_estado)   --AGREGAR 17/09/2020 JR
                                                    order by YTBDOCU_CODE DESC) XX)  TT
                                                    WHERE ROWNRO >= v_Ini AND ROWNRO<= v_Fin;

                                END IF;
                       END IF;



                   END IF;
END IF;


ELSIF(P_ACCION='ENTR') THEN  --LISTADO DE DOCUMENTOS PENDIENTES DE ENTREGA

jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_id:=ky_json.campo(jsonObj, 'id');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_f:=ky_json.campo(jsonObj, 'fe');
    v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

     --if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','NU','AR')) then

      if(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
      ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
       ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
       END IF;

     IF(LENGTH(v_d)>0) THEN  --INDICA QUE INGRESO UN CODIGO DE DOCUMENTO


            --SELECT '1' INTO V_TOTAL  FROM DUAL;
                                V_TOTAL:=1;
                                V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

        OPEN CURSOR_OUT  FOR
            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                    '' RATIO,
                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                    '0' NUM_REQUISITOS
                    FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE  (YTBDOCU_CODE= v_d OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG ||'%')
                                AND YTBDOCU_ESTA_CODE ='CO'
                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                        AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                        --AND YTRAPDO_NIVEL<>1
                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                    WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                    --AND
                                                    YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                order by YTBDOCU_CODE DESC) XX) TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

     ELSE --INDICA UE INGRESO UN ASUNTO DE BUSQUEDA /ID

            IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO


               IF V_NOFECHA<>'S' THEN
                 SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  YTBDOCU_USUA_ID=V_ID
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            and YTBDOCU_ESTA_CODE ='CO'
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                        OPEN CURSOR_OUT  FOR
                                SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS
                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                            YTBDOCU_USUA_ID USUA_ID,
                                            YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                            YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                WHERE YTBDOCU_USUA_ID=V_ID
                                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                AND YTBDOCU_ESTA_CODE ='CO'
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTRAPDO_NIVEL<>1
                                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        --AND
                                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                 ELSE

                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  YTBDOCU_USUA_ID=V_ID
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            AND YTBDOCU_ESTA_CODE ='CO'
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                        OPEN CURSOR_OUT  FOR
                                SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS
                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                            WHERE YTBDOCU_USUA_ID=V_ID
                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                    OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                            AND YTBDOCU_ESTA_CODE ='CO'
                                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                AND  (SELECT count(*) FROM YTRAPDO
                                                     WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                        AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                --AND YTRAPDO_NIVEL<>1
                                                --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                    AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                    AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                    WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                    --AND
                                                    YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                            order by YTBDOCU_CODE DESC) XX) TT
                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                 END IF;

            ELSE   --INDICA  QUE NO INGRESO NADA

                  IF V_NOFECHA<>'S' THEN
                         SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            and YTBDOCU_ESTA_CODE ='CO'
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                        OPEN CURSOR_OUT  FOR
                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                               '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS
                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                            YTBDOCU_USUA_ID USUA_ID,
                                            YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                            YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                AND YTBDOCU_ESTA_CODE ='CO'
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTRAPDO_NIVEL<>1
                                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        --AND
                                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;


                       ELSE  --NO INGRESA NADA NI FECHA

                            IF  v_desc<>'%' OR V_PRO<>'%' THEN
                                       SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE   ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                    OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        and YTBDOCU_ESTA_CODE ='CO'
                                        AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                        AND  (SELECT count(*) FROM YTRAPDO
                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                     --AND YTRAPDO_NIVEL<>1
                                                    AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                                     AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                            WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                            --AND
                                                            YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                                        OPEN CURSOR_OUT  FOR
                                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                               '' RATIO,
                                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS
                                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO||'CRITERIO' ASUNTO,
                                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                YTBDOCU_USUA_ID USUA_ID,
                                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                    WHERE ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                                    AND YTBDOCU_ESTA_CODE ='CO'
                                                                    AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS

                                                                        AND  (SELECT count(*) FROM YTRAPDO
                                                                             WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                                AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                                        --AND YTRAPDO_NIVEL<>1
                                                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                            WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                            --AND
                                                                            YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                              ELSE


                                       /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE YTBDOCU_ESTA_CODE ='CO'
                                          AND  (SELECT count(*) FROM YTRAPDO
                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    AND YTRAPDO_IND_ESTADO='P'
                                                    AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ)
                                                                        FROM COMUMGR.YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                        AND YTRAPDO_IND_ESTADO='P')
                                                     AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                            WHERE YTRUSUN_USUA_ID=v_usua_id
                                                            AND YTRUSUN_IND_ESTADO='A'
                                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;*/

                                        SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU,YTRAPDO
                                        WHERE YTBDOCU_ESTA_CODE ='CO'
                                        AND YTBDOCU_CODE =YTRAPDO_DOCU_CODE
                                        AND YTBDOCU_SEQ=YTRAPDO_DOCU_SEQ
                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                        AND YTRAPDO_IND_ESTADO='P'
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ)
                                                                        FROM COMUMGR.YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                        AND YTRAPDO_IND_ESTADO='P')
                                                     AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                            WHERE YTRUSUN_USUA_ID=v_usua_id
                                                            AND YTRUSUN_IND_ESTADO='A'
                                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE);

                                       /* SELECT COUNT(*) INTO V_TOTAL
                                        FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                        WHERE   YTRUSUN_USUA_ID=v_usua_id
                                        AND YTRUSUN_IND_ESTADO='A'
                                        AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                        AND YTRAPDO_IND_ESTADO='P'
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                    FROM COMUMGR.YTRAPDO
                                                                                    WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                    AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                    AND YTRAPDO_IND_ESTADO='P')
                                             AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                            AND YTBDOCU_ESTA_CODE ='CO';*/



                                            OPEN CURSOR_OUT  FOR
                                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                               '' RATIO,
                                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS
                                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO ASUNTO,
                                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                YTBDOCU_USUA_ID USUA_ID,
                                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                    FROM YTBDOCU,YTRAPDO,YTVESTA YY,YTVPRIO
                                                                    WHERE YTBDOCU_ESTA_CODE ='CO'
                                                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                                    AND   YTBDOCU_CODE=YTRAPDO_DOCU_CODE
                                                                    AND   YTBDOCU_SEQ=YTRAPDO_DOCU_SEQ
                                                                    AND   YTRAPDO_IND_ESTADO='P'
                                                                    AND   YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                                            AND YTRAPDO_IND_ESTADO='P')
                                                                    AND   EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                    WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'
                                                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE)

                                                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;





                                      /*  OPEN CURSOR_OUT  FOR
                                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                               '' RATIO,
                                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS
                                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO||'nada1111' ASUNTO,
                                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                YTBDOCU_USUA_ID USUA_ID,
                                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE

                                                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                    WHERE YTBDOCU_ESTA_CODE ='CO'
                                                                     AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                        AND  (SELECT count(*) FROM YTRAPDO
                                                                             WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                                AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                                        --AND YTRAPDO_NIVEL<>1
                                                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                            WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                            --AND
                                                                            YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;*/


                              END IF;

                       END IF;



                   END IF;
END IF;



ELSIF(P_ACCION='LYE') THEN  --DOCUMENTOS ENVIADOS POR UNIDAD

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
     v_f:=ky_json.campo(jsonObj, 'fe');
     v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
    v_f:=ky_json.campo(jsonObj, 'fe');


     IF(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
      ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
      ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
      END IF;


        IF(LENGTH(v_d)>0) THEN  --INDICA QUE INGRESO UN CODIGO DE DOCUMENTO

                    --SELECT '1' INTO V_TOTAL  FROM DUAL;
                        V_TOTAL:=1;
                         V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

                    OPEN CURSOR_OUT  FOR
                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                        '0' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        ,'0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                    YTBDOCU_USUA_ID USUA_ID,
                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                            WHERE (YTBDOCU_CODE= v_d OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG||'%')
                            AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS

                           -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                            order by YTBDOCU_CODE DESC) XX) TT
                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

       --*************INGRESO ASUNTO PARA CONSULTA

       ELSE

          IF V_NOFECHA<>'S' THEN     --************* PROPORCIONO FECHA

            IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO
                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE YTBDOCU_USUA_ID=v_Id
                     AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                     AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                     AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                     AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                    --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                        AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                        AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                        AND (select COUNT(*) from COMUMGR.YTRAPDO
                              where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0;

                    OPEN CURSOR_OUT  FOR
                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                       '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                    YTBDOCU_USUA_ID USUA_ID,
                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                    WHERE YTBDOCU_USUA_ID=v_Id
                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                    AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                    AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                    AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                    -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)

                                    AND (select COUNT(*) from COMUMGR.YTRAPDO
                                      where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0
                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                    order by YTBDOCU_CODE DESC) XX) TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

           ELSE  --***********NO INGRESA FECHA

               SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE  TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                    --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                    AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                    AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                    AND upper(YTBDOCU_asunto) like '%'|| v_desc ||'%';

                    OPEN CURSOR_OUT  FOR
                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                        '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                    YTBDOCU_USUA_ID USUA_ID,
                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                            WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                           -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                            AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                            order by YTBDOCU_CODE DESC) XX) TT
                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

           END IF;

           ELSE --BUSCAR SIN FECHA

              IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO
                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE  ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                        AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                    --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                        AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                        AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                        AND (select COUNT(*) from COMUMGR.YTRAPDO
                              where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0;

                    OPEN CURSOR_OUT  FOR
                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                       '0' RATIO,
                            --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                            FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                            FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                            ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                            FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                        FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                        WHERE YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                        AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                        AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                        AND (select COUNT(*) from COMUMGR.YTRAPDO
                                          where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                        order by YTBDOCU_CODE DESC) XX) TT
                                        WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

           ELSE --BUSCA SIN FECHA Y SIN ID PROPORCIONA NUMERO DE PROCESO

                IF v_desc<>'%' OR V_PRO<>'%' OR V_ESTADO <>'%' THEN

                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE                 --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                         YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                         AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)                                        
                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0; -- NO MOSTRAR EN LISTAR DOCUMENTOS;

                    --V_TOTAL:=200;

                    OPEN CURSOR_OUT  FOR
                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                       '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                            YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,YTBDOCU_TIPO_CODE,
                                        YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                           --  EXISTS (SELECT 'Y' FROM COMUMGR.YTRUSUN
                               --                  WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_UNID_CODE=YTBDOCU_USUA_ID AND YTRUSUN_IND_ESTADO='A')
                             --YTBDOCU_USUA_ID='000002'

                              -- and upper(YTBDOCU_asunto) like '%'|| v_desc ||'%'
                               -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                order by YTBDOCU_CODE DESC) XX) TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN order by CODE DESC;

                    ELSE --NO ENVIA NINGUN PARAMETRO
                                     SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                     WHERE                 --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                     YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A');

                                --V_TOTAL:=200;

                                OPEN CURSOR_OUT  FOR
                                   SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                   --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                   '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                    '0' NUM_REQUISITOS
                                    FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                        YTBDOCU_ASUNTO ASUNTO,
                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                    YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,YTBDOCU_TIPO_CODE,
                                                    YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                            WHERE YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN
                                            WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS

                                       --  EXISTS (SELECT 'Y' FROM COMUMGR.YTRUSUN
                                           --                  WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_UNID_CODE=YTBDOCU_USUA_ID AND YTRUSUN_IND_ESTADO='A')
                                         --YTBDOCU_USUA_ID='000002'

                                          -- and upper(YTBDOCU_asunto) like '%'|| v_desc ||'%'
                                           -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                            order by YTBDOCU_CODE DESC) XX) TT
                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN order by CODE DESC;
                   END IF;

           END IF;

           END IF;


    END IF;

 ELSIF(P_ACCION='LIU')  THEN --/////////////////MI CUADERNO////////////////////////////////////

    V_PIDM:=0;

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_id:=ky_json.campo(jsonObj, 'id');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
     v_f:=ky_json.campo(jsonObj, 'fe');



        IF(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;

         ELSIF (V_F='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
        ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
        END IF;

  if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','AR','NU')) then

  -- v_estado:='''EV','TR','CO','AT','OB','RE','AR''';

  --IF(v_estado='%') then
                IF(LENGTH(v_d)>0) THEN --CONSULTA cuando usuario proporciona codigo de documento

                              V_TOTAL:=1;

                                V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

                                    OPEN CURSOR_OUT  FOR
                                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                       '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                    '0' NUM_REQUISITOS
                                            FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                        YTBDOCU_USUA_ID USUA_ID,
                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                --WHERE YTBDOCU_CODE=LPAD(V_D,10,'0')
                                                WHERE (YTBDOCU_CODE= LPAD(V_D,10,'0') OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG|| '%')
                                                AND YTBDOCU_ESTA_CODE<>'AN'
                                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                               -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                AND  (SELECT count(*) FROM YTRAPDO
                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1
                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;





                  ELSE --PARA TODOS LOS ID ingresa cuando no se proporciona ningun parametro

                     IF(v_Id='%') THEN   --cuando no se envia ningun parametro
                         IF V_NOFECHA<>'S' THEN  --PROPORCIONA RANGO DE FECHAS PARA BUSCAR

                                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                    WHERE YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ LIKE V_PRO||'%'
                                    AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                    AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                   -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                    AND  (SELECT count(*) FROM YTRAPDO
                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;

                                    OPEN CURSOR_OUT  FOR
                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                        '' RATIO,
                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D'))||'XXXXXXX' SN_APROB,
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                        '0' NUM_REQUISITOS
                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                        YTBDOCU_USUA_ID USUA_ID,
                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                WHERE YTBDOCU_ESTA_CODE<>'AN'
                                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                               -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                AND  (SELECT count(*) FROM YTRAPDO
                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0

                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                         --************NO PROPORCIONA NINGUN PARAMETRO, NI FECHAS
                          ELSE --NO PROPORCIONA FECHAS BUSCARA EN TODOS LOS DOCUMENTOS

                                 IF v_desc<>'%' OR V_PRO<>'%' OR V_ESTADO <>'%' THEN

                                                 SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                                    WHERE YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                    --AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                   -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;
                                                               --V_TOTAL:=100;

                                                    OPEN CURSOR_OUT  FOR
                                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                        '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                            YTBDOCU_ASUNTO||'XXXXX' ASUNTO,
                                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                        YTBDOCU_USUA_ID USUA_ID,
                                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                WHERE  YTBDOCU_ESTA_CODE<>'AN'
                                                                AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) LIKE '%'|| v_desc ||'%')
                                                                AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)

                                                              -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                                --Where regexp_like(name,'^sasho$|^rags$|^shashi*');
                                                                --AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                AND  (SELECT count(*) FROM YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0

                                                                order by YTBDOCU_CODE DESC) XX) TT
                                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                                     ELSE   --NADA DE NADA CERO PARAMETROS SIN FECHA
                                                  /*  SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                                    WHERE YTBDOCU_ESTA_CODE<>'AN'
                                                   -- AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                   -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                      AND (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;*/


                                                        SELECT COUNT(*) INTO V_TOTAL FROM(SELECT DISTINCT YTBDOCU_CODE
                                                        FROM YTRUSUN,YTRAPDO,YTBDOCU
                                                        WHERE  YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'
                                                        AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE = YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                        AND YTBDOCU_ESTA_CODE<>'AN');

                                                               --V_TOTAL:=100;

                                                        OPEN CURSOR_OUT  FOR
                                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                        '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                            YTBDOCU_ASUNTO ASUNTO,
                                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                        YTBDOCU_USUA_ID USUA_ID,
                                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                FROM (SELECT DISTINCT CC.YTBDOCU_CODE CODE
                                                                                                        FROM YTRUSUN,YTRAPDO,YTBDOCU CC
                                                                                                        WHERE  YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'
                                                                                                        AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE = YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                                        AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                                                                        AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                                                                        AND YTBDOCU_ESTA_CODE<>'AN') PP,
                                                                                                        YTBDOCU XXX,YTVESTA YY,YTVPRIO MMM
                                                                WHERE  PP.CODE=YTBDOCU_CODE
                                                                        AND XXX.YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                        AND XXX.YTBDOCU_PRIO_CODE=MMM.YTVPRIO_CODE
                                                                order by YTBDOCU_CODE DESC) XX) TT
                                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                                                  /*  OPEN CURSOR_OUT  FOR
                                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                        '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                            YTBDOCU_ASUNTO||'XXXXX1111' ASUNTO,
                                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                        YTBDOCU_USUA_ID USUA_ID,
                                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                WHERE  YTBDOCU_ESTA_CODE<>'AN'

                                                              -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                                --Where regexp_like(name,'^sasho$|^rags$|^shashi*');
                                                                --AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')

                                                                AND  (SELECT count(*) FROM YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                                 AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                order by YTBDOCU_CODE DESC) XX) TT
                                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;      */

                                     END IF;

                             END IF;


                     ELSE   --PROPORCIONA ID PARA BUSCAR

                         IF V_NOFECHA<>'S' THEN  --PROPORCIONA RANGO DE FECHAS PARA BUSCAR

                                      SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                         WHERE   YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                         AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                         AND YTBDOCU_USUA_ID=v_Id
                                         AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                    --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;

                                       -- V_TOTAL:=10;

                                        OPEN CURSOR_OUT  FOR
                                            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                          --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                          '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                            WHERE YTBDOCU_USUA_ID=v_Id
                                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                            AND YTBDOCU_ESTA_CODE<>'AN'
                                                            AND  YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                            AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                            --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                            AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                            AND  (SELECT count(*) FROM YTRAPDO
                                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                    AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                            order by YTBDOCU_CODE DESC) XX) TT
                                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                                 ELSE -- NO PROPORCIONA FECHA

                                       SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                         WHERE YTBDOCU_USUA_ID=v_Id
                                         AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                         AND  YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                               AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                    --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;

                                       -- V_TOTAL:=10;

                                        OPEN CURSOR_OUT  FOR
                                            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                          --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                          '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                        YTBDOCU_ASUNTO ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                            WHERE YTBDOCU_USUA_ID=v_Id
                                                            AND (SELECT COUNT(*) FROM YTRPLAN WHERE YTRPLAN_VER_LIST_DO = 'S' AND YTRPLAN_PROC_CODE = YTBDOCU_PLAN_PROC_CODE  AND YTRPLAN_SEQ = YTBDOCU_PLAN_SEQ) = 0 -- NO MOSTRAR EN LISTAR DOCUMENTOS
                                                            AND YTBDOCU_ESTA_CODE<>'AN'
                                                            AND  YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                            --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                            AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                            AND  (SELECT count(*) FROM YTRAPDO
                                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                    AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                            order by YTBDOCU_CODE DESC) XX) TT
                                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                                 END IF;

                     END IF;

                 END IF;

/*ELSE  --PROPORCIONO ESTADO

 SELECT COUNT(*) INTO V_TOTAL
 FROM YTBDOCU,YTRUSDO
 WHERE YTBDOCU_ESTA_CODE =v_ESTADO
 AND  YTBDOCU_PLAN_PROC_CODE=YTRUSDO_PROC_CODE
   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A';




 END IF;*/
 END IF; --FIN DE ESTADOS

 END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;

/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

 
  PROCEDURE KYT_DOCU_DOCU_PP_YTBDOCU_AUD_1(P_ACCION IN VARCHAR2,
                                           P_DATA   in varchar2,
                                           V_MSG    OUT varchar2) IS
  
    v_seq int;
    --jsonArray        json_list;
  
    V_NO_CC              INT; --NO TIENE CURRICULA CONCURRENTE
    V_YTBDOCU_TRANSCRIPT VARCHAR(4000);
    V_ORDEN              NUMBER;
    V_SEQ                NUMBER;
    V_CODE               NUMBER;
    V_EXPE               NUMBER;
    V_PLANTILLA          CLOB;
    --v_num_event number;
    v_num_recu  number;
    V_PIDM      NUMBER;
    MSG         VARCHAR(150);
    V_APELLIDOS VARCHAR(150);
    V_NOMBRES   VARCHAR(150);
    V_ASUNTO    VARCHAR2(100);
    V_CODEDOC   VARCHAR2(10);
    V_CODEEXP   VARCHAR2(10);
    V_CODEREQ   NUMBER;
    V_CODEAPROB NUMBER;
  
    V_FACULTAD      VARCHAR2(80);
    V_FACULTAD_DESC VARCHAR2(80);
    V_CARRERA       VARCHAR2(80);
    V_CARRERA_DESC  VARCHAR2(80);
    V_DNI           VARCHAR2(20);
    V_SEXO          VARCHAR2(20);
    V_NUMERO        INT;
    V_TEXPE         VARCHAR2(12);
    V_CAMP_CODE     VARCHAR2(6);
    V_TIPODOC       VARCHAR2(8);
  
    v_plan_proc_code varchar2(20);
    v_PLAN_SEQ       varchar2(10);
    v_usua_id        varchar2(30);
    v_soli_code      varchar2(10);
  
    v_aprobado varchar2(3);
    v_usua_reg varchar2(30);
  
    v_coas       varchar2(5);
    v_unidad     varchar2(10);
    v_nom_unidad varchar2(150);
  
    V_PROVEIDO      VARCHAR2(5);
    V_PROVEIDO_DESC VARCHAR2(180);
    V_NIVEL         INT;
  
    V_ESTA_ACTUAL   VARCHAR2(3);
    V_TIPODOCUMENTO VARCHAR2(10);
  
    v_estap       varchar2(3);
    V_DOC         VARCHAR2(20);
    V_SEQ1        VARCHAR2(10);
    v_DEPENDENCIA varchar2(20);
    v_orgn_code   varchar2(30);
    v_vaan_code   varchar2(4);
  
    V_ES_ALUMNO INT;
    V_LEVL_CODE VARCHAR2(10);
  
    V_PARAMETRO VARCHAR2(20);
  
    V_CARRERA_USUA VARCHAR2(20);
    V_TIEMPO       DECIMAL;
    V_DEUDA        DECIMAL;
    V_PRECONDICION INT;
  
    V_CARRERA_ACTUAL VARCHAR2(10);
  
    V_CONTENEDORA     INT;
    V_VUELTA_DINAMICA INT;
    V_SUMA            INT;
  
    V_NIVEL_1       VARCHAR2(5);
    V_CARRERA_ENUS  VARCHAR2(30);
    V_PROGRAMA_CARR VARCHAR2(50);
  
    V_VALIDA_PC VARCHAR2(4000);
  
    V_ENTREGA   VARCHAR2(4);
    V_RECEPCION VARCHAR2(4);
    V_DERIVAR   VARCHAR2(4);
  
    V_USUA_ID_MOV     VARCHAR(20);
    V_ESTA_DOC_PASARA VARCHAR(30);
    V_ESTILO          VARCHAR(230);
  
    V_SEQ_PABA   VARCHAR2(10);
    V_PAGO_DESC  VARCHAR2(200);
    V_PAGO_MONTO VARCHAR2(20);
    V_PAGO_CATE  VARCHAR2(10);
  
    V_PAGO_LEVL_CODE VARCHAR2(10);
  
    V_TIPO_DOC VARCHAR2(2);
    V_ORG_USUA VARCHAR2(8);
  
    V_PROVEIDO_1      VARCHAR2(5);
    V_PROVEIDO_DESC_1 VARCHAR2(180);
  
    V_PERIODO_PAGO VARCHAR2(6);
  
    V_SEQ_APROB   INT;
    V_SEQ_APROB_1 INT;
    
    V_VERSION_MAJOR VARCHAR2(80);
    V_VERSION_MINOR VARCHAR2(80);
  
    EXP_SORGA    EXCEPTION;
    EXP_PER_PAGO EXCEPTION;
  
    --CURSOR DE REQUISITOS
    CURSOR DT(P_PROC_CODE VARCHAR2, P_SEQ VARCHAR2) IS
      SELECT YTVREQU_CODE CODE,
             YTVREQU_DESCRIPCION DESCRIPCION,
             YTVREQU_IND_PERM_ADJUNTAR ADJUNTAR,
             YTVREQU_TIRE_CODE TIRE_CODE,
             YTRPLRE_ORDEN ORDEN,
             (SELECT YTROBBD_NOMBRE_OBJETO
                FROM YTROBBD
               WHERE YTROBBD_CODE = YTVREQU_CODE_FUNCION) FUNCION,
             YTVREQU_AYUDA AYUDA,
             YTVREQU_CONCEPTO_PAGO CONCEPTO_PAGO
        FROM YTRPLRE, YTVREQU
       WHERE YTRPLRE_PLAN_PROC_CODE = P_PROC_CODE
         AND YTRPLRE_PLAN_SEQ = P_SEQ
         AND YTRPLRE_IND_ESTADO = 'A'
         AND YTRPLRE_REQU_CODE = YTVREQU_CODE;
  
    DT_ROW DT%ROWTYPE;
  
    --CURSOR PARA APROBADORES
  
    CURSOR DT1(P_PROC_CODE VARCHAR2, P_SEQ VARCHAR2) IS
      SELECT YTRPRCO_COLA_CODE,
             YTRCODE_CODE,
             YTRCODE_ORGN_CODE ORGN,
             YTRCODE_COAS_CODE COAS,
             YTRCODE_DESCRIPCION DESCRIPCION,
             YTRCODE_SUBDENOMINACION SUBDENOMINACION,
             (YTRCODE_NIVEL + (YTRPRCO_NIVEL_COLA - 1)) NIVEL,
             YTRCODE_PRVE_CODE PRVE_CODE,
             YTRCODE_PRVE_DESC PRVE_DESC,
             YTRCODE_ESTA_CODE_PASARA ESTA_CODE_PASARA,
             YTRCODE_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
             YTRCODE_TIAP_CODE,
             YTRCODE_YTRUNID_CODE UNID_CODE,
             YTACOLA_IND_CONTENEDORA CONTENEDORA,
             YTACOLA_PADRE PADRE,
             YTACOLA_PARAMETRO PARAMETRO,
             YTRCODE_TIEMPO TIEMPO,
             YTRCODE_IND_ADJUNTO IND_ADJUNTO,
             YTRCODE_POSN_POSN POSN
        FROM YTRPRCO, YTACOLA, YTRCODE
       WHERE YTRPRCO_PLAN_PROC_CODE = P_PROC_CODE
         AND YTRPRCO_PLAN_SEQ = P_SEQ
         and YTRPRCO_IND_ESTADO = 'A'
         AND YTRPRCO_COLA_CODE = YTACOLA_CODE
         AND YTRPRCO_COLA_CODE = YTRCODE_COLA_CODE
         AND YTRCODE_IND_ESTADO = 'A'
       ORDER BY YTRCODE_NIVEL,
                (YTRCODE_NIVEL + (YTRPRCO_NIVEL_COLA - 1)) ASC;
  
    DT1_ROW DT1%ROWTYPE;
  
    --CURSOR  PARA SACAR LA COLA DINAMICA
    CURSOR COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,
                         P_PARAMETRO       VARCHAR2,
                         P_PARAMETRO2      VARCHAR2,
                         P_NIVEL           INT) IS
      SELECT YTACOLA_CODE,
             YTRCODE_CODE,
             YTRCODE_ORGN_CODE ORGN,
             YTRCODE_COAS_CODE COAS,
             YTRCODE_DESCRIPCION DESCRIPCION,
             YTRCODE_SUBDENOMINACION SUBDENOMINACION,
             (YTRCODE_NIVEL + (P_NIVEL - 1)) NIVEL,
             YTRCODE_PRVE_CODE PRVE_CODE,
             YTRCODE_PRVE_DESC PRVE_DESC,
             YTRCODE_ESTA_CODE_PASARA ESTA_CODE_PASARA,
             YTRCODE_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
             YTRCODE_TIAP_CODE,
             YTRCODE_YTRUNID_CODE UNID_CODE,
             YTACOLA_IND_CONTENEDORA CONTENEDORA,
             YTACOLA_PADRE PADRE,
             YTACOLA_PARAMETRO PARAMETRO,
             YTRCODE_TIEMPO TIEMPO,
             YTRCODE_IND_ADJUNTO IND_ADJUNTO,
             YTRCODE_POSN_POSN POSN
        FROM YTACOLA, YTRCODE
       WHERE YTACOLA_PADRE = P_COLA_CODE_PADRE
         AND (YTACOLA_PARAMETRO = P_PARAMETRO OR
             YTACOLA_PARAMETRO = P_PARAMETRO2)
         AND YTACOLA_CODE = YTRCODE_COLA_CODE
         AND YTRCODE_IND_ESTADO = 'A'
       ORDER BY YTRCODE_NIVEL ASC;
  
    COLA_DINAMICA_ROW COLA_DINAMICA%ROWTYPE;
  
    --CURSOR DE COPIAS
    CURSOR COPIAS(P_COPIARA VARCHAR2) IS
      SELECT *
        FROM (SELECT DISTINCT TRIM(JA.GRUPO) AS ORG_CODE
                FROM (WITH t AS (SELECT P_COPIARA str FROM DUAL)
                       SELECT REGEXP_SUBSTR(str, '[^,]+', 1, LEVEL) AS GRUPO
                         FROM t
                       CONNECT BY LEVEL <=
                                  (select LENGTH(REPLACE(str, ',', NULL))
                                     from t)) JA
              )
       WHERE LENGTH(ORG_CODE) > 0;
  
    COPIAS_ROW COPIAS%ROWTYPE;
  
  BEGIN
  
    jsonObj   := json(P_DATA);
    v_usua_id := ky_json.campo(jsonObj, 'usua_id');
    -- code := jsonObj.get_string('code');
  
    --V_DEUDA:=KYG_UTILIDADES.FYG_NO_DEUDA_USUARIO(v_usua_id);
  
    v_plan_proc_code := ky_json.campo(jsonObj, 'plan_proc_code');
    v_PLAN_SEQ       := ky_json.campo(jsonObj, 'plan_seq');
  
    v_soli_code    := ky_json.campo(jsonObj, 'soli_code');
    v_aprobado     := ky_json.campo(jsonObj, 'p_aprobar');
    v_usua_reg     := ky_json.campo(jsonObj, 'usua_id_reg');
    V_CARRERA_USUA := ky_json.campo(jsonObj, 'p_carrera');
    V_CARRERA_ENUS := ky_json.campo(jsonObj, 'p_carrera');
  
    -- IF(V_CARRERA_ENUS<>'0' OR V_CARRERA_ENUS<>'-1') THEN
    IF (V_CARRERA_ENUS <> '0' AND V_CARRERA_ENUS <> '-1') THEN
    
      V_CARRERA_USUA := SUBSTR(V_CARRERA_ENUS,
                               1,
                               INSTR(V_CARRERA_ENUS, '-', 1, 1) - 1);
      V_NIVEL_1      := SUBSTR(V_CARRERA_ENUS,
                               INSTR(V_CARRERA_ENUS, '-', 1, 1) + 1,
                               2);
    
      --SELECT SUBSTR('ICSI-UG',INSTR('ICSI-UG', '-', 1, 1 )+1,2) FROM DUAL;
    
      -- SELECT SUBSTR('ICSI-UG',INSTR('ICSI-UG', '-', 1, 1 )+1,2) FROM DUAL;
    END IF;
  
    V_VUELTA_DINAMICA := 0;
    V_SUMA            := 0;
  
    SELECT COUNT(*)
      INTO V_PRECONDICION
      FROM YTRPLRE, YTVREQU
     WHERE YTRPLRE_PLAN_PROC_CODE || '-' || YTRPLRE_PLAN_SEQ =
           v_plan_proc_code || '-' || v_PLAN_SEQ
       AND YTRPLRE_REQU_CODE = YTVREQU_CODE
       AND YTVREQU_TIRE_CODE = 'CON'
       AND YTRPLRE_IND_ESTADO = 'A';
  
    IF V_PRECONDICION > 0 THEN
      -- V_DEUDA:=KYG_UTILIDADES.FYG_NO_DEUDA_USUARIO(v_usua_id);
      --inicia a validar todas las pre-CONDIONES ACTIVAS PARA EL DOCUMENTO
      V_VALIDA_PC := kyt_ejecutor.FYT_PRE_CONDICIONES(P_DATA);
    
      --V_VALIDA_PC:= 'ERRxxxx';
    ELSE
      -- V_DEUDA:=0;
      V_VALIDA_PC := '0';
    END IF;
  
    IF (P_ACCION = 'ADI') THEN
    
      --IF(V_DEUDA=0) THEN
      --SI ES CERO NOS INDICA QUE NO HAY RESTRICCIONES
      IF (V_VALIDA_PC = '0') then
        V_MSG := 'Error al crear registro';
      
        -- v_plan_proc_code:=ky_json.campo(jsonObj, 'plan_proc_code');
        --v_PLAN_SEQ:=ky_json.campo(jsonObj, 'plan_seq');
      
        --OBTENER PIDM Y NOMBRES DE USUARIO
      
        IF (v_soli_code = 'US') THEN
          SELECT SPRIDEN_PIDM,
                 SPRIDEN_LAST_NAME,
                 SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
                 SPBPERS_SSN DNI,
                 SPBPERS_SEX SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM SPRIDEN@PROD.INT.UPAO.EDU.PE
            LEFT OUTER JOIN SPBPERS@PROD.INT.UPAO.EDU.PE
              ON SPRIDEN_PIDM = SPBPERS_PIDM
           WHERE SPRIDEN_ID = v_usua_id
             AND SPRIDEN_CHANGE_IND IS NULL;
        
          --SACANDO EL TIPO DE DOCUMENTO
          SELECT YTAPROC_TIDO_CODE, YTAPROC_TIPO_CODE
            INTO V_TIPODOCUMENTO, V_TIPO_DOC
            FROM YTRPLAN, YTAPROC
           WHERE YTRPLAN_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code')
             AND YTRPLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
             AND YTRPLAN_PROC_CODE = YTAPROC_CODE;
        
          IF (V_TIPO_DOC = '04') THEN
            --SACAR EL DATO DE LA ORGANIZACI?N DEL USUARIO SOLICTANTE ES PARA DOCUMENTOS ADMINISTRATIVOS
            V_ORG_USUA := FKYT_DOCU_DOCU_PP_DAME_ORGAN(v_usua_id);
            --SELECT RRRMPLA_COAS||'-'||RRRMPLA_ORGA_ASIG INTO V_ORG_USUA FROM RRHHMGR.RRRMPLA WHERE RRRMPLA_ID=v_usua_id;
            -- V_ORG_USUA:='826';
          
            IF (V_ORG_USUA = '0') THEN
              RAISE EXP_SORGA;
            END IF;
          ELSE
            V_ORG_USUA := '';
          END IF;
        
          --OBTENEMOS SI TIENE UN VINCULO ACADEMICO CON LA UNIVERSIDAD
          SELECT COUNT(*)
            INTO V_ES_ALUMNO
            FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
           WHERE SGBSTDN_PIDM = V_PIDM
             AND NOT SGBSTDN_LEVL_CODE IN ('UB');
        
          IF (V_ES_ALUMNO > 0) THEN
          
            /* SELECT DISTINCT AA.SGBSTDN_PIDM, AA.SGBSTDN_TERM_CODE_EFF,AA.SGBSTDN_CAMP_CODE,AA.SGBSTDN_MAJR_CODE_1 ,BB.SORLCUR_LMOD_CODE,BB.SORLCUR_TERM_CODE,BB.SORLCUR_LEVL_CODE,BB.SORLCUR_COLL_CODE,
            CC.SORLFOS_TERM_CODE,CC.SORLFOS_MAJR_CODE,CC.SORLFOS_TERM_CODE_CTLG
            FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
            WHERE SGBSTDN_PIDM=:PIDM
            AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE
            AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
            AND BB.SORLCUR_SEQNO=(SELECT MAX(SORLCUR_SEQNO) FROM SORLCUR@PROD.INT.UPAO.EDU.PE WHERE SORLCUR_PIDM=:PIDM AND  SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB')
            AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
            AND  SGBSTDN_PIDM=SORLFOS_PIDM
            AND SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO=  (Select MAX(SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO)
                                                            FROM SORLFOS@PROD.INT.UPAO.EDU.PE
                                                            where SORLFOS_pidm=:PIDM AND  SORLFOS_TERM_CODE=BB.SORLCUR_TERM_CODE AND SORLFOS_LFST_CODE='MAJOR') ;*/
          
            IF (V_CARRERA_USUA = '0' OR V_CARRERA_USUA = '-1') THEN
            
              SELECT count(*)
                into V_NO_CC
                FROM SORLCUR@prod.int.upao.edu.pe S,
                     SORLFOS@prod.int.upao.edu.pe
               WHERE S.SORLCUR_PIDM = V_PIDM
                 AND NOT S.SORLCUR_LEVL_CODE IN ('UB')
                 AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                 AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                 AND SORLCUR_TERM_CODE =
                     (select MAX(XX.SORLCUR_TERM_CODE)
                        from SORLCUR@prod.int.upao.edu.pe XX
                       where sorlcur_pidm = V_PIDM
                         AND SORLCUR_LMOD_CODE = 'LEARNER'
                         AND SORLCUR_CACT_CODE = 'ACTIVE'
                         AND NOT XX.SORLCUR_LEVL_CODE IN ('UB'))
                    -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                 AND S.SORLCUR_PIDM = SORLFOS_PIDM
                 AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                 AND SORLFOS_CACT_CODE = 'ACTIVE'
                    -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                 AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
            
              IF V_NO_CC > 0 THEN
                SELECT SORLCUR_COLL_CODE,
                       (SELECT STVCOLL_DESC
                          FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                         WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                       SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                       (SELECT STVMAJR_DESC
                          FROM STVMAJR@prod.int.upao.edu.pe
                         WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                       S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                       S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                       --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                      ,
                       S.SORLCUR_PROGRAM AS PROGRAMA
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SORLCUR@prod.int.upao.edu.pe S,
                       SORLFOS@prod.int.upao.edu.pe
                 WHERE S.SORLCUR_PIDM = V_PIDM
                   AND NOT S.SORLCUR_LEVL_CODE IN ('UB')
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND SORLCUR_TERM_CODE =
                       (select MAX(XX.SORLCUR_TERM_CODE)
                          from SORLCUR@prod.int.upao.edu.pe XX
                         where sorlcur_pidm = V_PIDM
                           AND SORLCUR_LMOD_CODE = 'LEARNER'
                           AND SORLCUR_CACT_CODE = 'ACTIVE'
                           AND NOT XX.SORLCUR_LEVL_CODE IN ('UB'))
                      -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                      -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
              ELSE
              
                SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                                SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                                SGBSTDN_CAMP_CODE,
                                SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                                SGBSTDN_PROGRAM_1 PROGRAMA
                
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SGBSTDN@prod.int.upao.edu.pe S
                 WHERE SGBSTDN_PIDM = V_PIDM
                   AND (NOT SGBSTDN_LEVL_CODE_2 IN ('UB') OR
                       SGBSTDN_LEVL_CODE_2 IS NULL);
              
              END IF;
            
              V_PARAMETRO := V_CARRERA;
            ELSE
              --seleccioNO CARRERA
            
              select count(*)
                into V_NO_CC
                FROM SORLCUR@prod.int.upao.edu.pe S,
                     SORLFOS@prod.int.upao.edu.pe
               WHERE S.SORLCUR_PIDM = V_PIDM
                 AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
                 AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                 AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                 AND SORLCUR_TERM_CODE =
                     (select MAX(XX.SORLCUR_TERM_CODE)
                        from SORLCUR@prod.int.upao.edu.pe XX,
                             SORLFOS@prod.int.upao.edu.pe YY
                       where sorlcur_pidm = V_PIDM
                         AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                         AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                         AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                         AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                         AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                         AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                         AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                    -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                 AND S.SORLCUR_PIDM = SORLFOS_PIDM
                 AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                 AND SORLFOS_CACT_CODE = 'ACTIVE'
                 AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
                    -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                 AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
            
              IF V_NO_CC > 0 THEN
              
                SELECT SORLCUR_COLL_CODE,
                       (SELECT STVCOLL_DESC
                          FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                         WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                       SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                       (SELECT STVMAJR_DESC
                          FROM STVMAJR@prod.int.upao.edu.pe
                         WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                       S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                       S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                       --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                      ,
                       S.SORLCUR_PROGRAM AS PROGRAMA
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SORLCUR@prod.int.upao.edu.pe S,
                       SORLFOS@prod.int.upao.edu.pe
                 WHERE S.SORLCUR_PIDM = V_PIDM
                   AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND SORLCUR_TERM_CODE =
                       (select MAX(XX.SORLCUR_TERM_CODE)
                          from SORLCUR@prod.int.upao.edu.pe XX,
                               SORLFOS@prod.int.upao.edu.pe YY
                         where sorlcur_pidm = V_PIDM
                           AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                           AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                           AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                           AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                           AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                           AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                           AND XX.SORLCUR_PRIORITY_NO =
                               YY.SORLFOS_PRIORITY_NO)
                      -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                   AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
                      -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
              
              ELSE
              
                SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                                SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                                SGBSTDN_CAMP_CODE,
                                SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                                SGBSTDN_PROGRAM_1 PROGRAMA
                
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SGBSTDN@prod.int.upao.edu.pe S
                 WHERE SGBSTDN_PIDM = V_PIDM
                   AND (NOT SGBSTDN_LEVL_CODE_2 IN ('UB') OR
                       SGBSTDN_LEVL_CODE_2 IS NULL)
                   AND SGBSTDN_MAJR_CODE_1 = V_CARRERA_USUA
                   AND SGBSTDN_LEVL_CODE = V_NIVEL_1;
              
              END IF;
              V_PARAMETRO := V_CARRERA_USUA;
            
            END IF;
          
          ELSE
            --NO ES ALUMNO
            V_FACULTAD      := '';
            V_FACULTAD_DESC := '';
            V_CARRERA       := '';
            V_CARRERA_DESC  := '';
            V_CAMP_CODE     := '';
            V_LEVL_CODE     := '';
          
          END IF;
        
        ELSIF (v_soli_code = 'IE') THEN
          SELECT '' PIDM,
                 '' APELLIDOS,
                 YTVINST_DESCRIPCION,
                 '' DNI,
                 '' SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM YTVINST
           WHERE YTVINST_CODE = v_usua_id;
          V_TIPODOCUMENTO := ky_json.campo(jsonObj, 'p_tipodoc');
        END IF;
      
        --NUMERACION DE DOCUMENTO SACAMOS UN NUMERO TEMPORAL SE ASIGNARA EL VARDADERO NUMERO AL ENTREGAR EL DOCUMENTO
        SELECT YTRNUDO_NUMERACION_TEMP + 1
          INTO V_NUMERO
          FROM YTRNUDO
         WHERE YTRNUDO_PROC_CODE = v_plan_proc_code;
        UPDATE YTRNUDO
           SET YTRNUDO_NUMERACION_TEMP = YTRNUDO_NUMERACION_TEMP + 1
         WHERE YTRNUDO_PROC_CODE = v_plan_proc_code;
      
        --VERIFICAR SI TIENE UN EXPEDIENTE GENERAL PARA ADICIONAR SI NO TIENE DEVUELVE CERO
        SELECT NVL(MAX(YTBEXPE_CODE), 0)
          INTO V_TEXPE
          FROM YTBEXPE
         WHERE YTBEXPE_USUA_ID = v_usua_id
           AND YTBEXPE_IND_GENERAL = 'S';
      
        IF V_TEXPE = '0' THEN
          SELECT TO_NUMBER(MAX(YTBEXPE_CODE)) + 1
            INTO V_TEXPE
            FROM YTBEXPE;
          V_CODEEXP := LPAD(V_TEXPE, 10, '0');
          --CREANDO EL EXPEDIENTE GENERAL PARA SUS DOCUMENTOS
          INSERT INTO COMUMGR.YTBEXPE
            (YTBEXPE_CODE,
             YTBEXPE_FECHA_ACTIVIDAD,
             YTBEXPE_IND_ESTADO,
             YTBEXPE_DESCRIPCION,
             YTBEXPE_USUA_ID,
             YTBEXPE_USUA_ID_CREO,
             YTBEXPE_IND_GENERAL)
          VALUES
            (V_CODEEXP,
             SYSDATE,
             'A',
             'Expediente General',
             v_usua_id,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'S');
        ELSE
          V_CODEEXP := V_TEXPE;
        END IF;
      
        --NUMERO PARA DOCUMENTO
        SELECT TO_NUMBER(MAX(YTBDOCU_CODE)) + 1 INTO V_CODE FROM YTBDOCU;
      
        IF V_CODE IS NULL THEN
          V_CODE := 1;
        END IF;
      
        V_CODEDOC := LPAD(V_CODE, 10, '0');
      
        --OBTENER LA PLANTILLA Y EL TIPO DE DOCUMENTO PARA REGISTRAR EN EL DOCUMENTO
      
        SELECT YTRPLAN_PLANTILLA,
               YTRPLAN_TITULO,
               YTAPROC_TIPO_CODE,
               YTRPLAN_TIEMPO,
               YTRPLAN_IND_FORMA_ENTREGA,
               YTRPLAN_IND_FORMA_RECEPCION,
               YTRPLAN_IND_DERIVAR,
               YTRPLAN_VERSION_MAJOR,
               YTRPLAN_VERSION_MINOR
          INTO V_PLANTILLA,
               V_ASUNTO,
               V_TIPODOC,
               V_TIEMPO,
               V_ENTREGA,
               V_RECEPCION,
               V_DERIVAR,
               V_VERSION_MAJOR,
               V_VERSION_MINOR
          FROM YTRPLAN, YTAPROC
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_SEQ = v_PLAN_SEQ
           AND YTRPLAN_PROC_CODE = YTAPROC_CODE;
      
        /*
        SELECT  DISTINCT SGBSTDN_COLL_CODE_1 FACULTAD,
        (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=SGBSTDN_COLL_CODE_1)  FACULTAD_DESC,SGBSTDN_MAJR_CODE_1 CARRERA,
        (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=SGBSTDN_MAJR_CODE_1) CARRERA_DESC,sgbstdn_camp_code
        INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE
        
           FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
           WHERE SGBSTDN_PIDM=V_PIDM
           AND SGBSTDN_MAJR_CODE_1=P_MAJR_CODE;
           */
      
        /* V_FACULTAD:='';
        V_FACULTAD_DESC:='';
        V_CARRERA:='';
        V_CARRERA_DESC:='';
        V_CAMP_CODE:='';*/
      
        --INSERTAR DOCUMENTO
        /*INSERT INTO COMUMGR.YTBDOCU (
           YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
           YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID, YTBDOCU_USUA_ID_REG,
           YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
           YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA,
           YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES,
           YTBDOCU_ASUNTO, YTBDOCU_NUMERO_FOLIOS, YTBDOCU_IND_VIRTUAL,
           YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
           YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES, YTBDOCU_PIDM,YTBDOCU_COLL_DESC,YTBDOCU_COLL_CODE_1,YTBDOCU_MAJR_DESC,YTBDOCU_PERS_DNI,YTBDOCU_PERS_SEXO,YTBDOCU_NUMERO)
        
        VALUES (V_CODEDOC,1, P_ESTA_CODE, V_CODEEXP, P_COLL_CODE, P_PLAN_PROC_CODE,P_PLAN_SEQ,P_USUA_ID, P_USUA_ID_REG, SYSDATE,P_FECHA_RECEPCION,P_FECHA_EMISION,
         P_LEIDO,V_CAMP_CODE,P_DATA,P_BUSCA,V_PLANTILLA,P_OBSERVACIONES,V_ASUNTO, P_NUMERO_FOLIOS,P_IND_VIRTUAL,
         V_CARRERA,P_LEVL_CODE,P_CONDICION,V_APELLIDOS,V_NOMBRES,V_PIDM,V_FACULTAD_DESC,V_FACULTAD,V_CARRERA_DESC,V_DNI,V_SEXO,-1*V_NUMERO);
         */
      
        select to_char(sysdate, 'YYYY') into v_vaan_code from dual;
      
        INSERT INTO COMUMGR.YTBDOCU
          (YTBDOCU_CODE,
           YTBDOCU_SEQ,
           YTBDOCU_ESTA_CODE,
           YTBDOCU_EXPE_CODE,
           YTBDOCU_COLL_CODE,
           YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ,
           YTBDOCU_USUA_ID,
           YTBDOCU_USUA_ID_REG,
           YTBDOCU_FECHA_ACTIVIDAD,
           YTBDOCU_FECHA_RECEPCION,
           YTBDOCU_FECHA_EMISION,
           YTBDOCU_LEIDO,
           YTBDOCU_CAMP_CODE,
           YTBDOCU_DATA,
           YTBDOCU_BUSCA,
           YTBDOCU_PLANTILLA,
           YTBDOCU_OBSERVACIONES,
           YTBDOCU_ASUNTO,
           YTBDOCU_NUMERO_FOLIOS,
           YTBDOCU_IND_VIRTUAL,
           YTBDOCU_MAJR_CODE,
           YTBDOCU_LEVL_CODE,
           YTBDOCU_CONDICION,
           YTBDOCU_APELLIDOS,
           YTBDOCU_NOMBRES,
           YTBDOCU_PIDM,
           YTBDOCU_MAJR_DESC,
           YTBDOCU_COLL_CODE_1,
           YTBDOCU_COLL_DESC,
           YTBDOCU_PERS_DNI,
           YTBDOCU_PERS_SEXO,
           YTBDOCU_FECHA_ENTREGA,
           YTBDOCU_ID_USUA_ENT,
           YTBDOCU_NUMERO,
           YTBDOCU_ID_USUA_VALIDO,
           YTBDOCU_FECHA_VALIDO,
           YTBDOCU_FECHA_COMPLETO,
           YTBDOCU_CODIGO_BARRAS,
           YTBDOCU_UNIDAD_ENTREGAR,
           YTBDOCU_ID_USUA_RECIBE,
           YTBDOCU_UNIDAD_ENTREGAR_COAS,
           YTBDOCU_TIPO_CODE,
           YTBDOCU_SOLI_CODE,
           YTBDOCU_TIDO_CODE,
           YTBDOCU_NUM_EXT,
           YTBDOCU_PRIO_CODE,
           YTBDOCU_VAAN_CODE,
           YTBDOCU_TIEMPO,
           YTBDOCU_COSTO,
           YTBDOCU_CARR_PROG,
           YTBDOCU_IND_ENTREGA,
           YTBDOCU_IND_RECEPCION,
           YTBDOCU_IND_DERIVAR,
           YTBDOCU_USUA_ORG,
           YTBDOCU_VERSION_MAJOR,
           YTBDOCU_VERSION_MINOR)
        VALUES
          (V_CODEDOC,
           1,
           ky_json.campo(jsonObj, 'esta_code'),
           V_CODEEXP,
           ky_json.campo(jsonObj, 'coll_code'),
           ky_json.campo(jsonObj, 'plan_proc_code'),
           ky_json.campo(jsonObj, 'plan_seq'),
           ky_json.campo(jsonObj, 'usua_id'),
           ky_json.campo(jsonObj, 'usua_id_reg'),
           sysdate,
           null,
           ky_json.campo(jsonObj, 'fecha_emision'),
           ky_json.campo(jsonObj, 'leido'),
           V_CAMP_CODE, 
           replace(replace(replace(ky_json.campo(jsonObj, 'data'),'¬','{'),'µ','}'),'|','"'),
           ky_json.campo(jsonObj, 'busca'),
           V_PLANTILLA,
           ky_json.campo(jsonObj, 'observaciones'),
           ky_json.campo(jsonObj, 'asunto'),
           ky_json.campo(jsonObj, 'numero_folios'),
           ky_json.campo(jsonObj, 'ind_virtual'),
           V_CARRERA,
           V_LEVL_CODE,
           ky_json.campo(jsonObj, 'condicion'),
           V_APELLIDOS,
           V_NOMBRES,
           V_PIDM,
           V_CARRERA_DESC,
           V_FACULTAD,
           V_FACULTAD_DESC,
           V_DNI,
           V_SEXO,
           null,
           null,
           -1 * V_NUMERO,
           null,
           null,
           null,
           ky_json.campo(jsonObj, 'codigo_barras'),
           '',
           ky_json.campo(jsonObj, 'id_usua_recibe'),
           ky_json.campo(jsonObj, 'unidad_entrega_coas'),
           V_TIPODOC,
           v_soli_code,
           V_TIPODOCUMENTO,
           ky_json.campo(jsonObj, 'p_num_ext'),
           ky_json.campo(jsonObj, 'prioridad'),
           v_vaan_code,
           V_TIEMPO,
           ky_json.campo(jsonObj, 'p_costo'),
           V_PROGRAMA_CARR,
           V_ENTREGA,
           V_RECEPCION,
           V_DERIVAR,
           V_ORG_USUA,
           V_VERSION_MAJOR,
           V_VERSION_MINOR);
      
        --AGREGAMOS LA NUMERACION TEMPORAL QUE SE ACTUALIZARA AL MOMENTO DE ENTREGAR EL DOCUMENTO
      
        --ESTADO INICIAL
      
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_CODEDOC,
           1,
           YTRESDO_SEQ_SEQ.nextval,
           ky_json.campo(jsonObj, 'esta_code'),
           SYSDATE,
           ky_json.campo(jsonObj, 'usua_id_reg'),
           'SYS');
      
        IF V_RECEPCION = 'R' THEN
          --R=RECEPCION PRESENCIAL,
        
          --ACTUALIZAMOS EL ESTADO DEL DOCUMENTO A EVALUACI?N
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE       = 'EV',
                 YTBDOCU_FECHA_RECEPCION = SYSDATE
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_CODEDOC || '-' || '1';
          --REGISTRAMOS EL HISTORIAL DE ESTADOS DE DOCUMENTO
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'EV',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
        END IF;
      
        --DOCUMENTOS ENTRANTES
        IF (V_TIPODOC = '02') THEN
        
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'TR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
          -- SELECT YTBDOCU_PLAN_PROC_CODE INTO V_PLAN_CODE FROM YTBDOCU  WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_CODE_DOC;
          SELECT YTRNUDO_NUMERACION_ACT + 1
            INTO V_NUMERO
            FROM YTRNUDO
           WHERE YTRNUDO_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code');
          UPDATE YTRNUDO
             SET YTRNUDO_NUMERACION_ACT = YTRNUDO_NUMERACION_ACT + 1
           WHERE YTRNUDO_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code');
        
          UPDATE YTBDOCU
             SET YTBDOCU_NUMERO = V_NUMERO, YTBDOCU_ESTA_CODE = 'TR'
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_CODEDOC || '-' || '1'
             AND YTBDOCU_NUMERO < 0
             AND YTBDOCU_FECHA_COMPLETO IS NULL; --PARA CREAR NUMERACI?N SOLO UNA VEZ
        
        END IF;
      
        --REQUISITOS
      
        OPEN DT(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH DT
            INTO DT_ROW;
          EXIT WHEN DT%NOTFOUND;
        
          SELECT TO_NUMBER(MAX(YTRREDO_CODE)) + 1
            INTO V_CODEREQ
            FROM YTRREDO;
        
          IF V_CODEREQ IS NULL THEN
            V_CODEREQ := 1;
          END IF;
        
          IF (DT_ROW.TIRE_CODE = 'POS') THEN
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO)
            VALUES
              (LPAD(V_CODEREQ, 8, '0'),
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Sera ejecutado autom?ticamente al aprobar el documento(sistema)',
               'V',
               sysdate,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO);
          
            --V_VALIDA_PC='0'  ===> INDICA QUE NO TIENE RESTRICCIONES
            --VALIDA LOS REQUISITOS DE PRECONDICION SI YA FUERON VALIDADOS
            --
          
          ELSIF (DT_ROW.TIRE_CODE = 'CON' AND V_VALIDA_PC = '0') THEN
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO)
            VALUES
              (LPAD(V_CODEREQ, 8, '0'),
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Aprobaci?n automatica(sistema)',
               'V',
               sysdate,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO);
          
          ELSE
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO)
            VALUES
              (LPAD(V_CODEREQ, 8, '0'),
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Pendiente',
               'P',
               null,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO);
          END IF;
        
          --INSERTAMOS EL PAGO EN LA TABLA TEMPORAL
        
          IF (DT_ROW.TIRE_CODE = 'REC' AND DT_ROW.CONCEPTO_PAGO IS NOT NULL) THEN
          
            --SELECT YTBPABA_SEQ INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
            SELECT NVL(MAX(YTBPABA_SEQ), 0) + 1
              INTO V_SEQ_PABA
              FROM YTBPABA
             WHERE YTBPABA_DOCU_CODE = V_CODEDOC
               AND YTBPABA_DOCU_SEQ = 1;
          
            select TBBDETC_DESC,
                   TBBDETC_AMOUNT,
                   TBBDETC_DCAT_CODE,
                   TBBDETC_LEVL_CODE
              INTO V_PAGO_DESC, V_PAGO_MONTO, V_PAGO_CATE, V_PAGO_LEVL_CODE
              from tbbdetc@PROD.INT.UPAO.EDU.PE
             where tbbdetc_detail_code = DT_ROW.CONCEPTO_PAGO;
          
            V_PERIODO_PAGO := KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_PAGO_LEVL_CODE);
          
            IF V_PERIODO_PAGO = 0 THEN
              RAISE EXP_PER_PAGO;
            END IF;
          
            INSERT INTO COMUMGR.YTBPABA
              (YTBPABA_DOCU_CODE,
               YTBPABA_DOCU_SEQ,
               YTBPABA_SEQ,
               YTBPABA_FECHA_ACTIVIDAD,
               YTBPABA_MONTO,
               YTBPABA_CAMPUS,
               YTBPABA_CODE_DETALLE,
               YTBPABA_IND_ESTADO,
               YTBPABA_FECHA_PAGO,
               YTBPABA_USUA_ID,
               YTBPABA_USUA_PIDM,
               YTBPABA_CODE_DETALLE_DESC,
               YTBPABA_CODE_DETALLE_CATE,
               YTBPABA_TERM_CODE,
               YTBPABA_FECHA_INI,
               YTBPABA_FECHA_FIN,
               YTBPABA_NUM_DOC_QPAGO,
               YTBPABA_SEM_ANNO)
            VALUES
              (V_CODEDOC,
               1,
               V_SEQ_PABA,
               SYSDATE,
               V_PAGO_MONTO,
               V_CAMP_CODE,
               DT_ROW.CONCEPTO_PAGO,
               'P',
               NULL,
               v_usua_id,
               V_PIDM,
               V_PAGO_DESC,
               V_PAGO_CATE,
               V_PERIODO_PAGO,
               SYSDATE,
               SYSDATE + 20,
               NULL,
               TO_CHAR(SYSDATE, 'WW') || TO_CHAR(SYSDATE, 'YY'));
          
          END IF;
          --FIN DE REGISTRO DE PAGO
        
        END LOOP;
        CLOSE DT;
      
        --GENERAR COLA DE APROBACIONES PARA DOCUMENTO.
      
        /*CURSOR DT1(P_PROC_CODE VARCHAR2,P_SEQ VARCHAR2) IS
        SELECT  YTRPRCO_COLA_CODE ,YTRCODE_CODE,YTRCODE_ORGN_CODE ORGN,YTRCODE_COAS_CODE COAS,YTRCODE_DESCRIPCION DESCRIPCION,YTRCODE_SUBDENOMINACION SUBDENOMINACION,YTRCODE_NIVEL NIVEL
        FROM YTRPRCO ,YTRCODE
        WHERE  YTRPRCO_PLAN_PROC_CODE=P_PROC_CODE AND  YTRPRCO_PLAN_SEQ=P_SEQ
        AND YTRPRCO_COLA_CODE=YTRCODE_COLA_CODE AND YTRCODE_IND_ESTADO='A';*/
      
        OPEN DT1(v_PLAN_PROC_CODE, v_PLAN_SEQ);
        LOOP
          FETCH DT1
            INTO DT1_ROW;
          EXIT WHEN DT1%NOTFOUND;
        
          --YTRPRCO_COLA_CODE ,YTRCODE_CODE
          IF (DT1_ROW.CONTENEDORA = 'N') THEN
            --ES UNA FIJA
          
            SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
              INTO V_CODEAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
               AND YTRAPDO_DOCU_SEQ = 1;
          
            IF V_CODEAPROB IS NULL THEN
              V_CODEAPROB := 1;
            END IF;
          
            SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
              INTO V_PROVEIDO, V_PROVEIDO_DESC
              FROM YTVPRVE
             WHERE YTVPRVE_CODE = DT1_ROW.PRVE_CODE;
          
            IF (V_VUELTA_DINAMICA > 0) THEN
              V_SUMA := V_VUELTA_DINAMICA - 1;
            ELSE
              V_SUMA := 0;
            END IF;
          
            IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_TIEMPO,
                 YTRAPDO_IND_ADJUNTO,
                 YTRAPDO_POSN_POSN)
              VALUES
                (V_CODEAPROB,
                 V_CODEDOC,
                 1,
                 DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                 v_usua_reg,
                 DT1_ROW.ORGN,
                 DT1_ROW.COAS,
                 DT1_ROW.DESCRIPCION,
                 DT1_ROW.SUBDENOMINACION,
                 DT1_ROW.NIVEL + V_SUMA,
                 'A',
                 DT1_ROW.PRVE_CODE,
                 V_PROVEIDO_DESC,
                 sysdate,
                 'aprobaci?n automatica',
                 SYSDATE,
                 DT1_ROW.ESTA_CODE_PASARA,
                 DT1_ROW.ESTA_CODE_REGRESA,
                 DT1_ROW.YTRCODE_TIAP_CODE,
                 DT1_ROW.UNID_CODE,
                 DT1_ROW.TIEMPO,
                 DT1_ROW.IND_ADJUNTO,
                 DT1_ROW.POSN);
            
            ELSE
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_TIEMPO,
                 YTRAPDO_IND_ADJUNTO,
                 YTRAPDO_POSN_POSN)
              VALUES
                (V_CODEAPROB,
                 V_CODEDOC,
                 1,
                 DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                 NULL,
                 DT1_ROW.ORGN,
                 DT1_ROW.COAS,
                 DT1_ROW.DESCRIPCION,
                 DT1_ROW.SUBDENOMINACION,
                 DT1_ROW.NIVEL + V_SUMA,
                 'P',
                 DT1_ROW.PRVE_CODE,
                 V_PROVEIDO_DESC,
                 NULL,
                 'POR APROBAR',
                 SYSDATE,
                 DT1_ROW.ESTA_CODE_PASARA,
                 DT1_ROW.ESTA_CODE_REGRESA,
                 DT1_ROW.YTRCODE_TIAP_CODE,
                 DT1_ROW.UNID_CODE,
                 DT1_ROW.TIEMPO,
                 DT1_ROW.IND_ADJUNTO,
                 DT1_ROW.POSN);
            END IF;
          
          ELSE
            --ES UNA COLA CONTENEDORA DINAMICA
          
            SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
              INTO V_CODEAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
               AND YTRAPDO_DOCU_SEQ = 1;
          
            IF V_CODEAPROB IS NULL THEN
              V_CODEAPROB := 1;
            END IF;
          
            --COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,P_PARAMETRO VARCHAR2,P_NIVEL INT)
            --VAMOS A BUSCAR LA COLA DINAMICA QUE SE ASIGNARA DE ACUERDO A LA ESCUELA
          
            /* OPEN DT1(v_PLAN_PROC_CODE,v_PLAN_SEQ);
            LOOP
             FETCH DT1 INTO DT1_ROW;
             EXIT WHEN DT1%NOTFOUND;
             */
          
            -- OPEN COLA_DINAMICA(DT1_ROW.PADRE,V_PARAMETRO,DT1_ROW.NIVEL);
          
            IF (LENGTH(V_ORG_USUA) > 0) THEN
              -- NOS INDICA QUE ES UN DOCUMENTO NETAMENTE ADMINISTRATIVO Y HAY QUE COGER LA COLA VARIABLE ADMINISTRATIVA
              V_PARAMETRO := V_ORG_USUA;
            END IF;
            OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,
                               TRIM(V_PARAMETRO),
                               TRIM(V_FACULTAD),
                               DT1_ROW.NIVEL);
            -- OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,'ICSI',DT1_ROW.NIVEL);
            V_VUELTA_DINAMICA := 0;
            LOOP
              FETCH COLA_DINAMICA
                INTO COLA_DINAMICA_ROW;
              EXIT WHEN COLA_DINAMICA%NOTFOUND;
            
              SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                INTO V_PROVEIDO, V_PROVEIDO_DESC
                FROM YTVPRVE
               WHERE YTVPRVE_CODE = COLA_DINAMICA_ROW.PRVE_CODE;
            
              IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   COLA_DINAMICA_ROW.YTRCODE_CODE ||
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   v_usua_reg,
                   COLA_DINAMICA_ROW.ORGN,
                   COLA_DINAMICA_ROW.COAS,
                   COLA_DINAMICA_ROW.DESCRIPCION,
                   COLA_DINAMICA_ROW.SUBDENOMINACION,
                   COLA_DINAMICA_ROW.NIVEL,
                   'A',
                   COLA_DINAMICA_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   sysdate,
                   'aprobaci?n automatica',
                   SYSDATE,
                   COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                   COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                   COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                   COLA_DINAMICA_ROW.UNID_CODE,
                   COLA_DINAMICA_ROW.TIEMPO,
                   COLA_DINAMICA_ROW.IND_ADJUNTO,
                   COLA_DINAMICA_ROW.POSN);
              ELSE
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO, 
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   COLA_DINAMICA_ROW.YTRCODE_CODE ||
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   NULL,
                   COLA_DINAMICA_ROW.ORGN,
                   COLA_DINAMICA_ROW.COAS,
                   COLA_DINAMICA_ROW.DESCRIPCION,
                   COLA_DINAMICA_ROW.SUBDENOMINACION,
                   COLA_DINAMICA_ROW.NIVEL,
                   'P',
                   COLA_DINAMICA_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   NULL,
                   'POR APROBAR',
                   SYSDATE,
                   COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                   COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                   COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                   COLA_DINAMICA_ROW.UNID_CODE,
                   COLA_DINAMICA_ROW.TIEMPO,
                   COLA_DINAMICA_ROW.IND_ADJUNTO,
                   COLA_DINAMICA_ROW.POSN);
              END IF;
              V_CODEAPROB       := V_CODEAPROB + 1;
              V_VUELTA_DINAMICA := V_VUELTA_DINAMICA + 1;
            END LOOP;
            CLOSE COLA_DINAMICA;
          
          END IF;
          /*VERIFICAR SI ES NECESARIO REGISTRAR EL DETALLE DE APROBADORES DE LO CONTRARIO SOLO NOS IMPORTA LA PERSONA QUE APROBO*/
        
        END LOOP;
        CLOSE DT1;
      
        --ADICIONAR QUIEN RECEPCIONARA LOS DOCUMENTOS
      
        --v_coas:=ky_json.campo(jsonObj, 'coas');
        --v_unidad:=ky_json.campo(jsonObj, 'unidad_entrega');
        --v_nom_unidad:=ky_json.campo(jsonObj, 'nomunidad');
        v_unidad      := ky_json.campo(jsonObj, 'p_dependencia_code');
        v_DEPENDENCIA := ky_json.campo(jsonObj, 'p_dependencia_code');
        v_nom_unidad  := ky_json.campo(jsonObj, 'p_dependencia_desc');
      
        --INGRESA CUANDO  ES UN DOCUMENTO ENTRANTE Y SE LE BRINDA LAS UNIDADES
        IF (length(v_unidad) > 0) THEN
          --OBTENEMOS EL ULTIMO NIVEL DE APROBACION
          SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
            INTO V_CODEAPROB
            FROM YTRAPDO
           WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
             AND YTRAPDO_DOCU_SEQ = 1;
          SELECT TO_NUMBER(MAX(YTRAPDO_NIVEL)) + 1
            INTO V_NIVEL
            FROM YTRAPDO
           WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
             AND YTRAPDO_DOCU_SEQ = 1;
          --OBTENEMOS EL PROVEIDO
          SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
            INTO V_PROVEIDO, V_PROVEIDO_DESC
            FROM YTVPRVE
           WHERE YTVPRVE_CODE = '005';
          SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
            INTO V_PROVEIDO_1, V_PROVEIDO_DESC_1
            FROM YTVPRVE
           WHERE YTVPRVE_CODE = '006';
        
          --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
        
          SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                 SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
            INTO V_COAS, v_orgn_code
            FROM YTRUNID TA, YTRUNID TB
           WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
             AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
        
          --se comento la conSULTA ANTERIOR PORQUR AHORA SOLO ENVIA A UNIDADES PADRE
        
          /*   SELECT SUBSTR(Ta.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(Ta.YTRUNID_ORGN_UPAO,2,10) CODE  INTO V_COAS,v_orgn_code
          FROM YTRUNID TA
          WHERE TA.YTRUNID_CODE=v_DEPENDENCIA;     */
        
          INSERT INTO COMUMGR.YTRAPDO
            (YTRAPDO_SEQ,
             YTRAPDO_DOCU_CODE,
             YTRAPDO_DOCU_SEQ,
             YTRAPDO_CODE_CODE,
             YTRAPDO_ID_USUA_APROB,
             YTRAPDO_ORGN_CODE,
             YTRAPDO_COAS_CODE,
             YTRAPDO_DESCRIPCION,
             YTRAPDO_SUBDENOMINACION,
             YTRAPDO_NIVEL,
             YTRAPDO_IND_ESTADO,
             YTRAPDO_PRVE_CODE,
             YTRAPDO_PRVE_DESC,
             YTRAPDO_FECHA_APROBACION,
             YTRAPDO_COMENTARIO,
             YTRAPDO_FECHA_ACTIVIDAD,
             YTRAPDO_ESTA_CODE_PASARA,
             YTRAPDO_ESTA_CODE_REGRESA,
             YTRAPDO_TIAP_CODE,
             YTRAPDO_UNID_CODE)
          VALUES
            (V_CODEAPROB,
             V_CODEDOC,
             1,
             1,
             NULL,
             v_orgn_code,
             v_coas,
             v_nom_unidad,
             NULL,
             V_NIVEL,
             'P',
             V_PROVEIDO,
             V_PROVEIDO_DESC,
             NULL,
             'POR RECEPCIONAR',
             SYSDATE,
             NULL,
             'OB',
             'DOC',
             v_DEPENDENCIA);
        
          --ADICIONAR COPIAS
        
          V_SEQ_APROB   := 1;
          V_SEQ_APROB_1 := 2;
          OPEN COPIAS(ky_json.campo(jsonObj, 'p_copiar_a'));
          LOOP
            FETCH COPIAS
              INTO COPIAS_ROW;
            EXIT WHEN DT1%NOTFOUND;
          
            SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                   SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
              INTO V_COAS, v_orgn_code
              FROM YTRUNID TA, YTRUNID TB
             WHERE TA.YTRUNID_CODE = COPIAS_ROW.ORG_CODE
               AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
          
            INSERT INTO COMUMGR.YTRAPDO
              (YTRAPDO_SEQ,
               YTRAPDO_DOCU_CODE,
               YTRAPDO_DOCU_SEQ,
               YTRAPDO_CODE_CODE,
               YTRAPDO_ID_USUA_APROB,
               YTRAPDO_ORGN_CODE,
               YTRAPDO_COAS_CODE,
               YTRAPDO_DESCRIPCION,
               YTRAPDO_SUBDENOMINACION,
               YTRAPDO_NIVEL,
               YTRAPDO_IND_ESTADO,
               YTRAPDO_PRVE_CODE,
               YTRAPDO_PRVE_DESC,
               YTRAPDO_FECHA_APROBACION,
               YTRAPDO_COMENTARIO,
               YTRAPDO_FECHA_ACTIVIDAD,
               YTRAPDO_ESTA_CODE_PASARA,
               YTRAPDO_ESTA_CODE_REGRESA,
               YTRAPDO_TIAP_CODE,
               YTRAPDO_UNID_CODE)
            VALUES
              (V_CODEAPROB + V_SEQ_APROB,
               V_CODEDOC,
               1,
               V_SEQ_APROB_1,
               NULL,
               v_orgn_code,
               v_coas,
               'FALTA TEXT DEPENDENCIA',
               NULL,
               V_NIVEL,
               'P',
               V_PROVEIDO_1,
               V_PROVEIDO_DESC_1,
               NULL,
               'POR RECEPCIONAR',
               SYSDATE,
               NULL,
               'OB',
               'DOC',
               COPIAS_ROW.ORG_CODE);
          
            V_SEQ_APROB   := V_SEQ_APROB + 1;
            V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
          
          END LOOP;
          CLOSE COPIAS;
        
          /*
          
           IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_1'))>5) THEN
          
               SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
          WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_1')
          AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
          
                  INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                  YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                  YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                  YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE)
                  VALUES (V_CODEAPROB + 1, V_CODEDOC, 1, 2,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_1'), NULL, V_NIVEL,'P',
                          V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_1'));
          
           END IF;
          
            IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_2'))>5) THEN
          
                      SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                      WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_2')
                      AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
          
                  INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                  YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                  YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                  YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE)
                  VALUES (V_CODEAPROB + 2, V_CODEDOC, 1, 3,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_2'), NULL, V_NIVEL,'P',
                          V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_2'));
          
           END IF;
          
           */
        
        END IF;
      
        --CAMPOS DE FORMULARIO
      
        v_msg := V_CODEDOC ||
                 'TRANSACCI?N APLICADA Y GRABADA, SE CRE? EL DOCUMENTO N?MERO ' ||
                 V_CODEDOC;
      
      ELSE
        -- v_msg :='ERP-ERR Tienes una deuda de ' || V_DEUDA || ' soles,  para poder realizar el tr?mite debes estar al dia en tus pagos...';
      
        v_msg := V_VALIDA_PC;
      END IF;
    
    ELSIF (P_ACCION = 'ACT') THEN
    
      /*VALUES (V_CODEDOC, 1, ky_json.campo(jsonObj, 'esta_code'), V_CODEEXP, ky_json.campo(jsonObj, 'coll_code'), ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq'),
      ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'usua_id_reg'), sysdate, sysdate, ky_json.campo(jsonObj, 'fecha_emision'), ky_json.campo(jsonObj, 'leido'), ky_json.campo(jsonObj, 'camp_code'),
      ky_json.campo(jsonObj, 'data'), ky_json.campo(jsonObj, 'busca'), V_PLANTILLA, ky_json.campo(jsonObj, 'observaciones'), ky_json.campo(jsonObj, 'asunto'), ky_json.campo(jsonObj, 'numero_folios'), ky_json.campo(jsonObj, 'ind_virtual'),
      V_CARRERA, ky_json.campo(jsonObj, 'levl_code'), ky_json.campo(jsonObj, 'condicion'), V_APELLIDOS, V_NOMBRES, V_PIDM, V_CARRERA_DESC,
      V_FACULTAD, V_FACULTAD_DESC, V_DNI, V_SEXO, null, null,
      -1*V_NUMERO, null, null, null, ky_json.campo(jsonObj, 'codigo_barras'),
      ky_json.campo(jsonObj, 'unidad_entrega'), ky_json.campo(jsonObj, 'id_usua_recibe'), ky_json.campo(jsonObj, 'unidad_entrega_coas'),V_TIPODOC,v_soli_code,ky_json.campo(jsonObj, 'p_tipodoc')
      ,ky_json.campo(jsonObj, 'p_num_ext'),ky_json.campo(jsonObj, 'prioridad'));*/
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      --v_soli_code:='IE';
    
      IF (v_soli_code = 'US') THEN
        SELECT SPRIDEN_PIDM,
               SPRIDEN_LAST_NAME,
               SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
               SPBPERS_SSN DNI,
               SPBPERS_SEX SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM SPRIDEN@PROD.INT.UPAO.EDU.PE, SPBPERS@PROD.INT.UPAO.EDU.PE
         WHERE SPRIDEN_ID = v_usua_id
           AND SPRIDEN_CHANGE_IND IS NULL
           AND SPRIDEN_PIDM = SPBPERS_PIDM;
      
      ELSIF (v_soli_code = 'IE') THEN
        SELECT '' PIDM, '' APELLIDOS, YTVINST_DESCRIPCION, '' DNI, '' SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM YTVINST
         WHERE YTVINST_CODE = v_usua_id;
      END IF;
    
      SELECT YTBDOCU_ESTA_CODE
        INTO V_ESTA_ACTUAL
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'ytbdocu_pk') || '-' || '1';
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
        UPDATE COMUMGR.YTBDOCU
           SET YTBDOCU_USUA_ID_REG = ky_json.campo(jsonObj, 'usua_id_reg'),
               YTBDOCU_USUA_ID     = v_usua_id,
               YTBDOCU_NOMBRES     = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
               YTBDOCU_ASUNTO        = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               YTBDOCU_NUMERO_FOLIOS = ky_json.campo(jsonObj,
                                                     'numero_folios'),
               YTBDOCU_TIDO_CODE     = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA          = replace(replace(replace(ky_json.campo(jsonObj,
                                                                             'data'),
                                                               '?',
                                                               '{'),
                                                       '?',
                                                       '}'),
                                               '|',
                                               '"'),
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               --YTBDOCU_MAJR_CODE            = :YTBDOCU_MAJR_CODE,
               -- YTBDOCU_LEVL_CODE            = :YTBDOCU_LEVL_CODE,
               -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
               -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
               --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
               YTBDOCU_CODIGO_BARRAS = ky_json.campo(jsonObj,
                                                     'codigo_barras'),
               --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
               -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
               --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
               YTBDOCU_NUM_EXT   = ky_json.campo(jsonObj, 'p_num_ext'),
               YTBDOCU_PRIO_CODE = ky_json.campo(jsonObj, 'prioridad')
         WHERE YTBDOCU_CODE = ky_json.campo(jsonObj, 'ytbdocu_pk')
           AND YTBDOCU_SEQ = 1;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCI?N APLICADA';
        ELSE
          v_msg := 'ERP-ERR TRANSACCI?N APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
    ELSIF (P_ACCION = 'ACU') THEN
    
      /*VALUES (V_CODEDOC, 1, ky_json.campo(jsonObj, 'esta_code'), V_CODEEXP, ky_json.campo(jsonObj, 'coll_code'), ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq'),
      ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'usua_id_reg'), sysdate, sysdate, ky_json.campo(jsonObj, 'fecha_emision'), ky_json.campo(jsonObj, 'leido'), ky_json.campo(jsonObj, 'camp_code'),
      ky_json.campo(jsonObj, 'data'), ky_json.campo(jsonObj, 'busca'), V_PLANTILLA, ky_json.campo(jsonObj, 'observaciones'), ky_json.campo(jsonObj, 'asunto'), ky_json.campo(jsonObj, 'numero_folios'), ky_json.campo(jsonObj, 'ind_virtual'),
      V_CARRERA, ky_json.campo(jsonObj, 'levl_code'), ky_json.campo(jsonObj, 'condicion'), V_APELLIDOS, V_NOMBRES, V_PIDM, V_CARRERA_DESC,
      V_FACULTAD, V_FACULTAD_DESC, V_DNI, V_SEXO, null, null,
      -1*V_NUMERO, null, null, null, ky_json.campo(jsonObj, 'codigo_barras'),
      ky_json.campo(jsonObj, 'unidad_entrega'), ky_json.campo(jsonObj, 'id_usua_recibe'), ky_json.campo(jsonObj, 'unidad_entrega_coas'),V_TIPODOC,v_soli_code,ky_json.campo(jsonObj, 'p_tipodoc')
      ,ky_json.campo(jsonObj, 'p_num_ext'),ky_json.campo(jsonObj, 'prioridad'));*/
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      --v_soli_code:='IE';
    
      IF (v_soli_code = 'US') THEN
        SELECT SPRIDEN_PIDM,
               SPRIDEN_LAST_NAME,
               SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
               SPBPERS_SSN DNI,
               SPBPERS_SEX SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM SPRIDEN@PROD.INT.UPAO.EDU.PE, SPBPERS@PROD.INT.UPAO.EDU.PE
         WHERE SPRIDEN_ID = v_usua_id
           AND SPRIDEN_CHANGE_IND IS NULL
           AND SPRIDEN_PIDM = SPBPERS_PIDM;
      
      ELSIF (v_soli_code = 'IE') THEN
        SELECT '' PIDM, '' APELLIDOS, YTVINST_DESCRIPCION, '' DNI, '' SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM YTVINST
         WHERE YTVINST_CODE = v_usua_id;
      END IF;
    
      SELECT YTBDOCU_ESTA_CODE
        INTO V_ESTA_ACTUAL
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'ytbdocu_pk') || '-' || '1';
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
        UPDATE COMUMGR.YTBDOCU
           SET --YTBDOCU_USUA_ID_REG      = ky_json.campo(jsonObj, 'usua_id_reg'),
               -- YTBDOCU_USUA_ID          = v_usua_id,
               -- YTBDOCU_NOMBRES          = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
                       YTBDOCU_ASUNTO = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               YTBDOCU_NUMERO_FOLIOS = ky_json.campo(jsonObj,
                                                     'numero_folios'),
               -- YTBDOCU_TIDO_CODE        = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA = replace(replace(replace(ky_json.campo(jsonObj,
                                                                    'data'),
                                                      '?',
                                                      '{'),
                                              '?',
                                              '}'),
                                      '|',
                                      '"'),
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               --YTBDOCU_MAJR_CODE            = :YTBDOCU_MAJR_CODE,
               -- YTBDOCU_LEVL_CODE            = :YTBDOCU_LEVL_CODE,
               -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
               -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
               --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
               YTBDOCU_CODIGO_BARRAS = ky_json.campo(jsonObj,
                                                     'codigo_barras'),
               --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
               -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
               --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
               -- YTBDOCU_NUM_EXT          = ky_json.campo(jsonObj, 'p_num_ext'),
               YTBDOCU_PRIO_CODE = ky_json.campo(jsonObj, 'prioridad')
         WHERE YTBDOCU_CODE = ky_json.campo(jsonObj, 'ytbdocu_pk')
           AND YTBDOCU_SEQ = 1;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCI?N APLICADA';
        ELSE
          v_msg := 'ERP-ERR TRANSACCI?N APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
      --actualiza usuario desde web
    
    ELSIF (P_ACCION = 'ACUW') THEN
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      V_CODEDOC := ky_json.campo(jsonObj, 'ytbdocu_pk');
      --v_soli_code:='IE';
    
      IF (v_soli_code = 'US') THEN
        SELECT SPRIDEN_PIDM,
               SPRIDEN_LAST_NAME,
               SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
               SPBPERS_SSN DNI,
               SPBPERS_SEX SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM SPRIDEN@PROD.INT.UPAO.EDU.PE, SPBPERS@PROD.INT.UPAO.EDU.PE
         WHERE SPRIDEN_ID = v_usua_id
           AND SPRIDEN_CHANGE_IND IS NULL
           AND SPRIDEN_PIDM = SPBPERS_PIDM;
      
        IF (V_CARRERA_USUA = '0' OR V_CARRERA_USUA = '-1' OR
           V_CARRERA_USUA IS NULL) THEN
        
          SELECT count(*)
            into V_NO_CC
            FROM SORLCUR@prod.int.upao.edu.pe S,
                 SORLFOS@prod.int.upao.edu.pe
           WHERE S.SORLCUR_PIDM = V_PIDM
             AND NOT S.SORLCUR_LEVL_CODE IN ('UB')
             AND S.SORLCUR_LMOD_CODE = 'LEARNER'
             AND S.SORLCUR_CACT_CODE = 'ACTIVE'
             AND SORLCUR_TERM_CODE =
                 (select MAX(XX.SORLCUR_TERM_CODE)
                    from SORLCUR@prod.int.upao.edu.pe XX
                   where sorlcur_pidm = V_PIDM
                     AND SORLCUR_LMOD_CODE = 'LEARNER'
                     AND SORLCUR_CACT_CODE = 'ACTIVE'
                     AND NOT XX.SORLCUR_LEVL_CODE IN ('UB'))
                -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
             AND S.SORLCUR_PIDM = SORLFOS_PIDM
             AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
             AND SORLFOS_CACT_CODE = 'ACTIVE'
                -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
             AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
        
          IF V_NO_CC > 0 THEN
          
            SELECT SORLCUR_COLL_CODE,
                   (SELECT STVCOLL_DESC
                      FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                     WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                   SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                   (SELECT STVMAJR_DESC
                      FROM STVMAJR@prod.int.upao.edu.pe
                     WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                   S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                   S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                   --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                  ,
                   S.SORLCUR_PROGRAM AS PROGRAMA
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SORLCUR@prod.int.upao.edu.pe S,
                   SORLFOS@prod.int.upao.edu.pe
             WHERE S.SORLCUR_PIDM = V_PIDM
               AND NOT S.SORLCUR_LEVL_CODE IN ('UB')
               AND S.SORLCUR_LMOD_CODE = 'LEARNER'
               AND S.SORLCUR_CACT_CODE = 'ACTIVE'
               AND SORLCUR_TERM_CODE =
                   (select MAX(XX.SORLCUR_TERM_CODE)
                      from SORLCUR@prod.int.upao.edu.pe XX
                     where sorlcur_pidm = V_PIDM
                       AND SORLCUR_LMOD_CODE = 'LEARNER'
                       AND SORLCUR_CACT_CODE = 'ACTIVE'
                       AND NOT XX.SORLCUR_LEVL_CODE IN ('UB'))
                  -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
               AND S.SORLCUR_PIDM = SORLFOS_PIDM
               AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
               AND SORLFOS_CACT_CODE = 'ACTIVE'
                  -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
               AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
          
          ELSE
          
            SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                            (SELECT STVCOLL_DESC
                               FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                              WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                            SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                            (SELECT STVMAJR_DESC
                               FROM STVMAJR@prod.int.upao.edu.pe
                              WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                            SGBSTDN_CAMP_CODE,
                            SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                            SGBSTDN_PROGRAM_1 PROGRAMA
            
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SGBSTDN@prod.int.upao.edu.pe S
             WHERE SGBSTDN_PIDM = V_PIDM
               AND (NOT SGBSTDN_LEVL_CODE_2 IN ('UB') OR
                   SGBSTDN_LEVL_CODE_2 IS NULL);
          
          END IF;
          V_PARAMETRO := V_CARRERA;
        ELSE
        
          select count(*)
            into V_NO_CC
            FROM SORLCUR@prod.int.upao.edu.pe S,
                 SORLFOS@prod.int.upao.edu.pe
           WHERE S.SORLCUR_PIDM = V_PIDM
             AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
             AND S.SORLCUR_LMOD_CODE = 'LEARNER'
             AND S.SORLCUR_CACT_CODE = 'ACTIVE'
             AND SORLCUR_TERM_CODE =
                 (select MAX(XX.SORLCUR_TERM_CODE)
                    from SORLCUR@prod.int.upao.edu.pe XX,
                         SORLFOS@prod.int.upao.edu.pe YY
                   where sorlcur_pidm = V_PIDM
                     AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                     AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                     AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                     AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                     AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                     AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                     AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
             AND S.SORLCUR_PIDM = SORLFOS_PIDM
             AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
             AND SORLFOS_CACT_CODE = 'ACTIVE'
             AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
             AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
        
          IF V_NO_CC > 0 THEN
          
            SELECT SORLCUR_COLL_CODE,
                   (SELECT STVCOLL_DESC
                      FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                     WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                   SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                   (SELECT STVMAJR_DESC
                      FROM STVMAJR@prod.int.upao.edu.pe
                     WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                   S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                   S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                   --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                  ,
                   S.SORLCUR_PROGRAM AS PROGRAMA
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SORLCUR@prod.int.upao.edu.pe S,
                   SORLFOS@prod.int.upao.edu.pe
             WHERE S.SORLCUR_PIDM = V_PIDM
               AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
               AND S.SORLCUR_LMOD_CODE = 'LEARNER'
               AND S.SORLCUR_CACT_CODE = 'ACTIVE'
               AND SORLCUR_TERM_CODE =
                   (select MAX(XX.SORLCUR_TERM_CODE)
                      from SORLCUR@prod.int.upao.edu.pe XX,
                           SORLFOS@prod.int.upao.edu.pe YY
                     where sorlcur_pidm = V_PIDM
                       AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                       AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                       AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                       AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                       AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                       AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                       AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                  -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
               AND S.SORLCUR_PIDM = SORLFOS_PIDM
               AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
               AND SORLFOS_CACT_CODE = 'ACTIVE'
               AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
               AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
          
          ELSE
          
            SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                            (SELECT STVCOLL_DESC
                               FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                              WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                            SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                            (SELECT STVMAJR_DESC
                               FROM STVMAJR@prod.int.upao.edu.pe
                              WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                            SGBSTDN_CAMP_CODE,
                            SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                            SGBSTDN_PROGRAM_1 PROGRAMA
            
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SGBSTDN@prod.int.upao.edu.pe S
             WHERE SGBSTDN_PIDM = V_PIDM
               AND (NOT SGBSTDN_LEVL_CODE_2 IN ('UB') OR
                   SGBSTDN_LEVL_CODE_2 IS NULL)
               AND SGBSTDN_MAJR_CODE_1 = V_CARRERA_USUA
               AND SGBSTDN_LEVL_CODE = V_NIVEL_1;
          
          END IF;
        
          V_PARAMETRO := V_CARRERA_USUA;
        
        END IF;
      
      ELSIF (v_soli_code = 'IE') THEN
        SELECT '' PIDM, '' APELLIDOS, YTVINST_DESCRIPCION, '' DNI, '' SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM YTVINST
         WHERE YTVINST_CODE = v_usua_id;
      END IF;
    
      SELECT YTBDOCU_ESTA_CODE, YTBDOCU_MAJR_CODE
        INTO V_ESTA_ACTUAL, V_CARRERA_ACTUAL
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-' || '1';
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
        UPDATE COMUMGR.YTBDOCU
           SET --YTBDOCU_USUA_ID_REG      = ky_json.campo(jsonObj, 'usua_id_reg'),
               YTBDOCU_USUA_ID = v_usua_id,
               --   YTBDOCU_NOMBRES          = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
               YTBDOCU_ASUNTO        = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               --YTBDOCU_NUMERO_FOLIOS    = ky_json.campo(jsonObj, 'numero_folios'),
               -- YTBDOCU_TIDO_CODE        = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA = replace(replace(replace(ky_json.campo(jsonObj,
                                                                    'data'),
                                                      '?',
                                                      '{'),
                                              '?',
                                              '}'),
                                      '|',
                                      '"'),
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               YTBDOCU_MAJR_CODE   = V_CARRERA,
               YTBDOCU_LEVL_CODE   = V_LEVL_CODE,
               YTBDOCU_MAJR_DESC   = V_CARRERA_DESC,
               YTBDOCU_COLL_CODE_1 = V_FACULTAD,
               YTBDOCU_COLL_DESC   = V_FACULTAD_DESC,
               YTBDOCU_CARR_PROG   = V_PROGRAMA_CARR
        -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
        -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
        --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
        -- YTBDOCU_CODIGO_BARRAS    = ky_json.campo(jsonObj, 'codigo_barras'),
        --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
        -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
        --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
        -- YTBDOCU_NUM_EXT          = ky_json.campo(jsonObj, 'p_num_ext'),
        -- YTBDOCU_PRIO_CODE        = ky_json.campo(jsonObj, 'prioridad')
         WHERE YTBDOCU_CODE = V_CODEDOC
           AND YTBDOCU_SEQ = 1;
      
        IF V_CARRERA_ACTUAL <> V_CARRERA THEN
          --REGENERAR COLA DE APROBACIONES PARA DOCUMENTO.
        
          SELECT YTBDOCU_PLAN_PROC_CODE, YTBDOCU_PLAN_SEQ
            INTO v_PLAN_PROC_CODE, v_PLAN_SEQ
            FROM YTBDOCU
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-1';
        
          SELECT COUNT(*)
            INTO V_CONTENEDORA
            FROM YTRPRCO, YTACOLA, YTRCODE
           WHERE YTRPRCO_PLAN_PROC_CODE = v_PLAN_PROC_CODE
             AND YTRPRCO_PLAN_SEQ = v_PLAN_SEQ
             AND YTRPRCO_COLA_CODE = YTACOLA_CODE
             AND YTRPRCO_COLA_CODE = YTRCODE_COLA_CODE
             AND YTRCODE_IND_ESTADO = 'A'
             AND YTACOLA_IND_CONTENEDORA = 'S';
        
          IF (V_CONTENEDORA > 0) THEN
            --DESACTIVAMOS LA COLA ACTUAL;
            UPDATE YTRAPDO
               SET YTRAPDO_IND_ESTADO = 'E'
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                   V_CODEDOC || '-1';
          
            OPEN DT1(v_PLAN_PROC_CODE, v_PLAN_SEQ);
            LOOP
              FETCH DT1
                INTO DT1_ROW;
              EXIT WHEN DT1%NOTFOUND;
            
              --YTRPRCO_COLA_CODE ,YTRCODE_CODE
            
              --YTRPRCO_COLA_CODE ,YTRCODE_CODE
              IF (DT1_ROW.CONTENEDORA = 'N') THEN
                --ES UNA FIJA
              
                SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
                  INTO V_CODEAPROB
                  FROM YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                   AND YTRAPDO_DOCU_SEQ = 1;
              
                IF V_CODEAPROB IS NULL THEN
                  V_CODEAPROB := 1;
                END IF;
              
                IF (V_VUELTA_DINAMICA > 0) THEN
                  V_SUMA := V_VUELTA_DINAMICA - 1;
                ELSE
                  V_SUMA := 0;
                END IF;
              
                SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                  INTO V_PROVEIDO, V_PROVEIDO_DESC
                  FROM YTVPRVE
                 WHERE YTVPRVE_CODE = DT1_ROW.PRVE_CODE;
                IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                     v_usua_reg,
                     DT1_ROW.ORGN,
                     DT1_ROW.COAS,
                     DT1_ROW.DESCRIPCION,
                     DT1_ROW.SUBDENOMINACION,
                     DT1_ROW.NIVEL + V_SUMA,
                     'A',
                     DT1_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     sysdate,
                     'aprobaci?n automatica',
                     SYSDATE,
                     DT1_ROW.ESTA_CODE_PASARA,
                     DT1_ROW.ESTA_CODE_REGRESA,
                     DT1_ROW.YTRCODE_TIAP_CODE,
                     DT1_ROW.UNID_CODE,
                     DT1_ROW.TIEMPO,
                     DT1_ROW.IND_ADJUNTO);
                ELSE
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                     NULL,
                     DT1_ROW.ORGN,
                     DT1_ROW.COAS,
                     DT1_ROW.DESCRIPCION,
                     DT1_ROW.SUBDENOMINACION,
                     DT1_ROW.NIVEL + V_SUMA,
                     'P',
                     DT1_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     NULL,
                     'POR APROBAR',
                     SYSDATE,
                     DT1_ROW.ESTA_CODE_PASARA,
                     DT1_ROW.ESTA_CODE_REGRESA,
                     DT1_ROW.YTRCODE_TIAP_CODE,
                     DT1_ROW.UNID_CODE,
                     DT1_ROW.TIEMPO,
                     DT1_ROW.IND_ADJUNTO);
                END IF;
              
              ELSE
                --ES UNA COLA CONTENEDORA DINAMICA
              
                SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
                  INTO V_CODEAPROB
                  FROM YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                   AND YTRAPDO_DOCU_SEQ = 1;
              
                IF V_CODEAPROB IS NULL THEN
                  V_CODEAPROB := 1;
                END IF;
              
                --COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,P_PARAMETRO VARCHAR2,P_NIVEL INT)
                --VAMOS A BUSCAR LA COLA DINAMICA QUE SE ASIGNARA DE ACUERDO A LA ESCUELA
              
                -- OPEN COLA_DINAMICA(DT1_ROW.PADRE,V_PARAMETRO,DT1_ROW.NIVEL);
                OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,
                                   TRIM(V_PARAMETRO),
                                   TRIM(V_FACULTAD),
                                   DT1_ROW.NIVEL);
                -- OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,'ICSI',DT1_ROW.NIVEL);
                LOOP
                  FETCH COLA_DINAMICA
                    INTO COLA_DINAMICA_ROW;
                  EXIT WHEN COLA_DINAMICA%NOTFOUND;
                
                  SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                    INTO V_PROVEIDO, V_PROVEIDO_DESC
                    FROM YTVPRVE
                   WHERE YTVPRVE_CODE = COLA_DINAMICA_ROW.PRVE_CODE;
                
                  IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                    INSERT INTO COMUMGR.YTRAPDO
                      (YTRAPDO_SEQ,
                       YTRAPDO_DOCU_CODE,
                       YTRAPDO_DOCU_SEQ,
                       YTRAPDO_CODE_CODE,
                       YTRAPDO_ID_USUA_APROB,
                       YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE,
                       YTRAPDO_DESCRIPCION,
                       YTRAPDO_SUBDENOMINACION,
                       YTRAPDO_NIVEL,
                       YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE,
                       YTRAPDO_PRVE_DESC,
                       YTRAPDO_FECHA_APROBACION,
                       YTRAPDO_COMENTARIO,
                       YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,
                       YTRAPDO_ESTA_CODE_REGRESA,
                       YTRAPDO_TIAP_CODE,
                       YTRAPDO_UNID_CODE,
                       YTRAPDO_TIEMPO,
                       YTRAPDO_IND_ADJUNTO)
                    VALUES
                      (V_CODEAPROB,
                       V_CODEDOC,
                       1,
                       COLA_DINAMICA_ROW.YTRCODE_CODE ||
                       COLA_DINAMICA_ROW.YTACOLA_CODE,
                       v_usua_reg,
                       COLA_DINAMICA_ROW.ORGN,
                       COLA_DINAMICA_ROW.COAS,
                       COLA_DINAMICA_ROW.DESCRIPCION,
                       COLA_DINAMICA_ROW.SUBDENOMINACION,
                       COLA_DINAMICA_ROW.NIVEL,
                       'A',
                       COLA_DINAMICA_ROW.PRVE_CODE,
                       V_PROVEIDO_DESC,
                       sysdate,
                       'aprobaci?n automatica',
                       SYSDATE,
                       COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                       COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                       COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                       COLA_DINAMICA_ROW.UNID_CODE,
                       COLA_DINAMICA_ROW.TIEMPO,
                       COLA_DINAMICA_ROW.IND_ADJUNTO);
                  ELSE
                    INSERT INTO COMUMGR.YTRAPDO
                      (YTRAPDO_SEQ,
                       YTRAPDO_DOCU_CODE,
                       YTRAPDO_DOCU_SEQ,
                       YTRAPDO_CODE_CODE,
                       YTRAPDO_ID_USUA_APROB,
                       YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE,
                       YTRAPDO_DESCRIPCION,
                       YTRAPDO_SUBDENOMINACION,
                       YTRAPDO_NIVEL,
                       YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE,
                       YTRAPDO_PRVE_DESC,
                       YTRAPDO_FECHA_APROBACION,
                       YTRAPDO_COMENTARIO,
                       YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,
                       YTRAPDO_ESTA_CODE_REGRESA,
                       YTRAPDO_TIAP_CODE,
                       YTRAPDO_UNID_CODE,
                       YTRAPDO_TIEMPO,
                       YTRAPDO_IND_ADJUNTO)
                    VALUES
                      (V_CODEAPROB,
                       V_CODEDOC,
                       1,
                       COLA_DINAMICA_ROW.YTRCODE_CODE ||
                       COLA_DINAMICA_ROW.YTACOLA_CODE,
                       NULL,
                       COLA_DINAMICA_ROW.ORGN,
                       COLA_DINAMICA_ROW.COAS,
                       COLA_DINAMICA_ROW.DESCRIPCION,
                       COLA_DINAMICA_ROW.SUBDENOMINACION,
                       COLA_DINAMICA_ROW.NIVEL,
                       'P',
                       COLA_DINAMICA_ROW.PRVE_CODE,
                       V_PROVEIDO_DESC,
                       NULL,
                       'POR APROBAR',
                       SYSDATE,
                       COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                       COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                       COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                       COLA_DINAMICA_ROW.UNID_CODE,
                       COLA_DINAMICA_ROW.TIEMPO,
                       COLA_DINAMICA_ROW.IND_ADJUNTO);
                  END IF;
                  V_CODEAPROB       := V_CODEAPROB + 1;
                  V_VUELTA_DINAMICA := V_VUELTA_DINAMICA + 1;
                
                END LOOP;
                CLOSE COLA_DINAMICA;
              
              END IF;
            
              /*VERIFICAR SI ES NECESARIO REGISTRAR EL DETALLE DE APROBADORES DE LO CONTRARIO SOLO NOS IMPORTA LA PERSONA QUE APROBO*/
            
            END LOOP;
            CLOSE DT1;
          
          END IF;
        
        END IF;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCI?N APLICADA' || V_CARRERA_USUA || '-' ||
                   V_CARRERA;
        ELSE
          v_msg := 'ERP-ERR TRANSACCI?N APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
      --CAMBIAR DE EXPDIENTE
    ELSIF (P_ACCION = 'AEX') THEN
    
      UPDATE YTBDOCU
         SET YTBDOCU_EXPE_CODE = ky_json.campo(jsonObj, 'p_expe_code')
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'p_documento') || '-1';
    
      v_msg := 'TRANSACCI?N APLICADA';
    
      --MOVER DOCUMENTO A UN ESTADO DADO RESPONSABILIDAD DEL USUARIO RECEPCIONADOR DEL DOCUMENTO
    
    ELSIF (P_ACCION = 'MOV') THEN
      --SACAMOS EL CODIGO DEL DOCUMENTO
      --SELECT YTBDOCU_CODE,YTBDOCU_SEQ,NVL(YTBDOCU_ID_USUA_VALIDO,'0'),YTBDOCU_ESTA_CODE INTO V_DOC,V_SEQ,V_USUA_VALIDO,V_ESTADO
      --FROM YTBDOCU WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=ky_json.campo(jsonObj, 'code_doc');
      V_DOC   := ky_json.campo(jsonObj, 'code_doc');
      V_SEQ1  := '1';
      v_estap := ky_json.campo(jsonObj, 'p_estap');
    
      if (v_estap <> 'AT' AND v_estap <> 'CO') THEN
        --verificamos si todos los requistos ya fueron validados
      
        UPDATE YTBDOCU
           SET YTBDOCU_ESTA_CODE = v_estap
         WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_DOC || '-' || V_SEQ1;
      
        V_USUA_ID_MOV := ky_json.campo(jsonObj, 'usua_id');
      
        --REGISTRAMOS EL ESTADO DEL DOCUMENTO
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_DOC,
           V_SEQ1,
           YTRESDO_SEQ_SEQ.nextval,
           v_estap,
           SYSDATE,
           V_USUA_ID_MOV,
           ky_json.campo(jsonObj, 'comentario') || V_DOC);
      
        --REGISTRAR SEGUIMIENTO DE DOCUMENTO
      
        SELECT YTVESTA_DESCRIPCION, YTVESTA_ESTILO
          INTO V_ESTA_DOC_PASARA, V_ESTILO
          FROM YTVESTA
         WHERE YTVESTA_CODE = v_estap;
      
        INSERT INTO COMUMGR.YTRCOME
          (YTRCOME_CODE,
           YTRCOME_DOCU_CODE,
           YTRCOME_DOCU_SEQ,
           YTRCOME_FECHA_ACTIVIDAD,
           YTRCOME_USUA_ID,
           YTRCOME_TICO_CODE,
           YTRCOME_MENSAJE,
           YTRCOME_NOTI_CORREO,
           YTRCOME_USUA_NOMBRE)
        VALUES
          (SEQ_YTRCOME_CODE.NEXTVAL,
           V_DOC,
           V_SEQ1,
           sysdate,
           ky_json.campo(jsonObj, 'usua_id'),
           'AUTO',
           'El documento fue <span style=' || V_ESTILO || '>' ||
           V_ESTA_DOC_PASARA || '</span>...  ' ||
           ky_json.campo(jsonObj, 'comentario'),
           0,
           baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(V_USUA_ID_MOV),
                                                         'X'));
      
        --REGISTRAR EN BANDEJA INTERNA DE CAMPUS
      
        --NOTIFICAR POR CORREO SI FUESE NECESARIO
      
        v_msg := 'TRANSACCI?N APLICADA';
      ELSE
        V_MSG := 'ERP-ERR NO SE PUEDE MOVER A ESE ESTADO';
      END IF;
    
    ELSIF (P_ACCION = 'ELI') THEN
      DELETE YTRAPRO
       WHERE YTRAPRO_CODE_COLA_CODE || '-' || YTRAPRO_CODE_CODE || '-' ||
             YTRAPRO_ID_USUA = trim(ky_json.campo(jsonObj, 'ytrapro_pk'));
      v_msg := 'TRANSACCI?N APLICADA';
    
    END IF;
  
    COMMIT;
  
  exception
  
    WHEN EXP_PER_PAGO THEN
      v_msg := 'ERP-ERR NO HAY PERIODO CONFIGURADO PARA TRANSACCI?N ECONOMICA';
    WHEN EXP_SORGA THEN
      v_msg := 'ERP-ERR ESTE TIPO DE DOCUMENTO NECESITA ORGANIZACI?N ADMINISTRATIVA';
    
    when OTHERS then
      rollback;
      v_msg := 'ERP-ERR[' || SQLERRM || ']';
    
    --raise_application_error(-20001,'Error al crear el registro' || SQLERRM);
  
  END;



-------- temrino 1
--------------------****************************************************************************************************************
--------------------********************************************************************************************************************

---- inicio a termion 17261



  PROCEDURE KYT_DOCU_DOCU_PP_YTBDOCU_AUD(P_ACCION IN VARCHAR2,
                                         P_DATA   in varchar2,
                                         V_MSG    OUT varchar2) IS
  
    v_seq int;
    --jsonArray        json_list;
    V_BTN_MIN                NUMBER;
    V_BTN_MAXI               NUMBER;
    V_BT_EXISTE_AFECTA_PAGO  NUMBER;
    V_PRUEBA                 NUMBER;
    V_PRUEBA_TEXT            VARCHAR2(4000);
    V_YTRTEMP_JSON_DATA_CLOB CLOB;
    V_YTBDOCU_TRANSCRIPT     VARCHAR(4000);
  
    V_ORDEN     NUMBER;
    V_SEQ       NUMBER;
    V_CODE      NUMBER;
    V_EXPE      NUMBER;
    V_PLANTILLA CLOB;
    --v_num_event number;
    v_num_recu  number;
    V_PIDM      NUMBER;
    MSG         VARCHAR(150);
    V_APELLIDOS VARCHAR(300);
    V_NOMBRES   VARCHAR(3000);
    V_ASUNTO    VARCHAR2(4000);
    V_CODEDOC   VARCHAR2(10);
    V_CODEEXP   VARCHAR2(10);
    V_CODEREQ   NUMBER;
    V_CODEAPROB NUMBER;
  
    V_FACULTAD      VARCHAR2(80);
    V_FACULTAD_DESC VARCHAR2(80);
    V_CARRERA       VARCHAR2(80);
    V_CARRERA_DESC  VARCHAR2(80);
    V_DNI           VARCHAR2(20);
    V_SEXO          VARCHAR2(20);
    V_NUMERO        INT;
    V_TEXPE         VARCHAR2(12);
    V_CAMP_CODE     VARCHAR2(6);
  
    V_CAMP_CODE_1 VARCHAR2(6);
  
    V_TIPODOC VARCHAR2(8);
  
    v_plan_proc_code varchar2(20);
    v_PLAN_SEQ       varchar2(10);
    v_usua_id        varchar2(30);
    v_soli_code      varchar2(10);
  
    v_aprobado varchar2(3);
    v_usua_reg varchar2(30);
  
    v_coas       varchar2(5);
    v_unidad     varchar2(10);
    v_nom_unidad varchar2(150);
  
    V_PROVEIDO      VARCHAR2(5);
    V_PROVEIDO_DESC VARCHAR2(180);
    V_NIVEL         INT;
  
    V_ESTA_ACTUAL   VARCHAR2(3);
    V_TIPODOCUMENTO VARCHAR2(10);
  
    v_estap       varchar2(3);
    V_DOC         VARCHAR2(20);
    V_SEQ1        VARCHAR2(10);
    v_DEPENDENCIA varchar2(20);
    v_orgn_code   varchar2(30);
    v_vaan_code   varchar2(4);
  
    V_ES_ALUMNO INT;
    V_LEVL_CODE VARCHAR2(10);
  
    V_PARAMETRO VARCHAR2(20);
  
    V_CARRERA_USUA VARCHAR2(20);
    V_TIEMPO       DECIMAL;
    V_DEUDA        DECIMAL;
    V_PRECONDICION INT;
  
    V_CARRERA_ACTUAL VARCHAR2(10);
  
    V_CONTENEDORA     INT;
    V_VUELTA_DINAMICA INT;
    V_SUMA            INT;
  
    V_NIVEL_1       VARCHAR2(5);
    V_CARRERA_ENUS  VARCHAR2(30);
    V_PROGRAMA_CARR VARCHAR2(50);
  
    V_VALIDA_PC VARCHAR2(4000);
  
    V_ENTREGA   VARCHAR2(4);
    V_RECEPCION VARCHAR2(4);
    V_DERIVAR   VARCHAR2(4);
  
    V_USUA_ID_MOV     VARCHAR(20);
    V_ESTA_DOC_PASARA VARCHAR(30);
    V_ESTILO          VARCHAR(230);
  
    V_SEQ_PABA   VARCHAR2(10);
    V_PAGO_DESC  VARCHAR2(200);
    V_PAGO_MONTO VARCHAR2(20);
    V_PAGO_CATE  VARCHAR2(10);
  
    V_PAGO_LEVL_CODE VARCHAR2(10);
  
    V_TIPO_DOC VARCHAR2(2);
    V_ORG_USUA VARCHAR2(8);
  
    V_PROVEIDO_1      VARCHAR2(5);
    V_PROVEIDO_DESC_1 VARCHAR2(180);
  
    V_PROVEIDO_0      VARCHAR2(5);
    V_PROVEIDO_DESC_0 VARCHAR2(180);
  
    V_PERIODO_PAGO VARCHAR2(6);
  
    V_IND_DERIVADO VARCHAR2(5);
  
    V_QUEHACER     VARCHAR2(200);
    V_OTRO         VARCHAR2(2000);
    v_orgn_code_55 VARCHAR2(100);
    v_coas_55      VARCHAR2(100);
  
    v_observaciones VARCHAR2(2000);
  
    V_NO_CC INT; --NO TIENE CURRICULA CONCURRENTE
  
    V_SEQ_APROB   INT;
    V_SEQ_APROB_1 INT;
    V_NUM_COPIAS  INT;
    V_TOTAL_PAG   NUMBER(10, 2);
  
    V_ORG_DESC_1 VARCHAR2(200);
  
    V_EXISTE_CONCEPTO INT;
    V_DETAIL_CODE     VARCHAR2(20);
  
    V_MSG_BANCO  VARCHAR2(300);
    V_PAGO_BANCO INT;
  
    V_CODE_REQ VARCHAR2(20);
  
    V_CODEREQ_1 VARCHAR2(20);
    v_tasunto   varchar2(6);
  
    V_CODE_REQ VARCHAR2(10);
  
    V_MONTO_TOT_PAG NUMBER(10, 2);
  
    V_CODE_RP VARCHAR2(10);
  
    V_PARA_CODE VARCHAR2(20);
    V_PARA_DESC VARCHAR2(300);
  
    V_DUENO_PROCESO VARCHAR2(20);
  
    V_ORGN_DINA      VARCHAR2(20);
    V_PARA_DINA      VARCHAR2(100);
    V_MSG_GLOBAL     VARCHAR2(4000);
    V_SIGLA          VARCHAR2(30);
    V_EXISTE_NUM_DOC INT;
    V_YEAR           VARCHAR2(6);
  
    V_MONTO_REQ   NUMBER(7, 2);
    V_VPARAMETRO  VARCHAR2(100);
    V_FALTA_APROB INT;
    V_TERM_CODE   VARCHAR2(6);
  
    V_IND_CAUNA INT;
    V_CAMPOS    VARCHAR2(4000);
  
    V_COSTO_ENVIADO DECIMAL;
    V_SOLI_APRO     INT;
    V_NUM_APRO      INT; --VARIABLE PARA VERIFICAR CANTIDAD DE APROBADORES
    V_APERTURADO    INT;
    V_FACTOR        INT; --FACTOR PARA NIVELES DE APROBACI?N
    V_VALOR_COLA    VARCHAR2(30);
    V_VUELTA_COLA   INT;
  
    V_NUM_REG   INT;
    V_DATA_JSON VARCHAR2(200);
  
    V_METODO_APR  VARCHAR2(300);
    V_JSON_CARP   VARCHAR2(1000);
    V_RECIBO_PAGO VARCHAR2(50);
  
    V_GENERA_DOCSALIDA VARCHAR2(20);
    V_REQ_EVALUACION   VARCHAR2(20);
  
    --V_VALORES t_array;
    v_encontro int;
    V_VALOR1   VARCHAR2(700);
    v_valor2   varchar2(500);
    V_VALOR3   varchar2(3000);
  
    V_DIAS_VIGENCIA INT;
  
    --///////////////////////////VARIABLES DE CONSTANCIAS
    V_CONS_NOM       VARCHAR2(300);
    V_CONS_PLANTILLA CLOB;
    V_APAD_MAX       INT;
    V_CARPETA        VARCHAR2(20);
    V_NIVEL_CARPETA  INT;
    V_MENSAJE_GLOBAL VARCHAR2(300);
  
    V_NIVEL_DIM INT;
    CAMPOA      INT;
  
    V_CAMPO_CALCULADO      VARCHAR2(1000);
    V_JSON_CAMPO_CALCULADO VARCHAR2(500);
  
    V_YTRPLA_IND_COPIAS VARCHAR2(2);
  
    V_YTRPLAN_TIPO_ANTICIPO NUMBER;
  
    V_YTRVAMD_VALOR_JSON CLOB;
  
    V_YTRTEMP_JSON_CAMPOS_DINA CLOB;
  
    V_CANT_1 NUMBER;
  
    V_CICLO_1        VARCHAR2(100);
    V_CURSO_1        VARCHAR2(4000);
    V_CURSO_NOMBRE_1 VARCHAR2(4000);
    V_CARRERA_1      VARCHAR2(4000);
    --V_NIVEL_1 VARCHAR2(4000);
    V_CAMPUS_1 VARCHAR2(4000);
  
    V_YTRPLAN_DERIVAR VARCHAR2(4000);
  
    SQL_QUERY VARCHAR2(4000);
  
    V_CODIGO_CAME_CODE VARCHAR2(4000 CHAR);
  
    V_YTRVAMD_VALOR_DEFECTO VARCHAR2(4000 CHAR);
  
    V_YTRPLAN_IND_HAB_POLI VARCHAR2(4000 CHAR);
  
    P_HAB_POLI VARCHAR2(4000 CHAR);
  
    V_YTACEPO_DESCRIP_POLI CLOB;
  
    V_EXISTE NUMBER;
  
    v_arch varchar2(30);
  
    V_YTRREDO_CODE VARCHAR2(1000 CHAR);
  
    V_ADJ_NUM           NUMBER;
    V_ADJ_FORMATO       VARCHAR2(100);
    V_CANTIDAD_ADJUNTOS NUMBER;
    v_formato           varchar2(20);
    V_MINOR_DESC        varchar2(80);
    V_VERSION_MAJOR  varchar2(80);
    V_VERSION_MINOR  varchar2(80);
  
    --v_contenedora int;
    EXP_SORGA      EXCEPTION;
    EXP_PER_PAGO   EXCEPTION;
    EXP_CP         EXCEPTION;
    EXP_PAGO_BANCO EXCEPTION;
    EXP_PARAMETRO  EXCEPTION;
    EXP_CP_SF      EXCEPTION;
    EXP_NUP        EXCEPTION;
    exp_GLOBAL     EXCEPTION;
    EXP_POLITICAS  EXCEPTION;
  
    exp_CAMPO_CALCULADO EXCEPTION;
  
    json_DATA       json;
    json_DATA_DINAM json;
  
    --VARIABLES JSON
    V_LISTVALUE_1 json_list; --LISTA DE JSON AGREGADO X JR 07/10/2020 PARA RECORRER JSON DE BOTONES
    V_LISTVALUE_2 json_list; --PARA LA DATA QUE YA ESTA REGISTRADA
    v_element     json_value;
    v_obj         json;
  
    --CURSOR REQUISTOS SIN PLANTILLA
    CURSOR DT_REQ(P_REQ VARCHAR2) IS
      SELECT YTVREQU_CODE CODE,
             YTVREQU_DESCRIPCION DESCRIPCION,
             YTVREQU_IND_PERM_ADJUNTAR ADJUNTAR,
             YTVREQU_TIRE_CODE TIRE_CODE,
             (SELECT YTROBBD_NOMBRE_OBJETO
                FROM COMUMGR.YTROBBD
               WHERE YTROBBD_CODE = YTVREQU_CODE_FUNCION) FUNCION,
             YTVREQU_AYUDA AYUDA,
             YTVREQU_CONCEPTO_PAGO CONCEPTO_PAGO,
             YTVREQU_ADJ_NUM ADJ_NUM,
             YTVREQU_ADJ_FORMATO ADJ_FORMATO,
             YTVREQU_PROC_CODE PROC_CODE,
             YTVREQU_IND_OPCIONAL IND_OPCIONAL
      
        FROM COMUMGR.YTVREQU
       WHERE YTVREQU_CODE = P_REQ;
  
    DT_REQ_ROW DT_REQ%ROWTYPE;
  
    --CURSOR DE REQUISITOS
    CURSOR DT(P_PROC_CODE VARCHAR2, P_SEQ VARCHAR2) IS
      SELECT YTVREQU_CODE CODE,
             YTVREQU_DESCRIPCION DESCRIPCION,
             YTVREQU_IND_PERM_ADJUNTAR ADJUNTAR,
             YTVREQU_TIRE_CODE TIRE_CODE,
             YTRPLRE_ORDEN ORDEN,
             (SELECT YTROBBD_NOMBRE_OBJETO
                FROM YTROBBD
               WHERE YTROBBD_CODE = YTVREQU_CODE_FUNCION) FUNCION,
             YTVREQU_AYUDA AYUDA,
             YTVREQU_CONCEPTO_PAGO CONCEPTO_PAGO,
             YTVREQU_ADJ_NUM ADJ_NUM,
             YTVREQU_ADJ_FORMATO ADJ_FORMATO,
             YTVREQU_PROC_CODE PROC_CODE,
             YTVREQU_CM,
             YTVREQU_IND_FVALIDA,
             YTVREQU_CM COMO_GMONTO,
             YTVREQU_IND_FVALIDA DONDE_VALIDA,
             YTRPLRE_IND_SOLIC_ACD IND_SOLIC_ACD,
             YTRPLRE_IND_AUTOA IND_AUTOA,
             YTRPLRE_IND_PD IND_PD,
             YTVREQU_CAME_CODE CAME_CODE,
             YTVREQU_CAME_VALOR CAME_VALOR,
             YTVREQU_IND_OPCIONAL IND_OPCIONAL,
             YTRPLRE_IND_AUTOA_GE
        FROM YTRPLRE, YTVREQU
       WHERE YTRPLRE_PLAN_PROC_CODE = P_PROC_CODE
         AND YTRPLRE_PLAN_SEQ = P_SEQ
         AND YTRPLRE_IND_ESTADO = 'A'
         AND YTRPLRE_REQU_CODE = YTVREQU_CODE
       ORDER BY YTRPLRE_ORDEN;
  
    DT_ROW DT%ROWTYPE;
  
    --CURSOR PARA APROBADORES
  
    CURSOR DT1(P_PROC_CODE VARCHAR2, P_SEQ VARCHAR2) IS
      SELECT YTRPRCO_COLA_CODE,
             YTRCODE_CODE,
             YTRCODE_ORGN_CODE ORGN,
             YTRCODE_COAS_CODE COAS,
             YTRCODE_DESCRIPCION DESCRIPCION,
             YTRCODE_SUBDENOMINACION SUBDENOMINACION,
             (YTRCODE_NIVEL + (YTRPRCO_NIVEL_COLA - 1)) NIVEL,
             YTRCODE_PRVE_CODE PRVE_CODE,
             YTRCODE_PRVE_DESC PRVE_DESC,
             YTRCODE_ESTA_CODE_PASARA ESTA_CODE_PASARA,
             YTRCODE_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
             YTRCODE_TIAP_CODE,
             YTRCODE_YTRUNID_CODE UNID_CODE,
             YTACOLA_IND_CONTENEDORA CONTENEDORA,
             YTACOLA_PADRE PADRE,
             YTACOLA_PARAMETRO PARAMETRO,
             YTRCODE_TIEMPO TIEMPO,
             YTRCODE_IND_ADJUNTO IND_ADJUNTO,
             YTRCODE_POSN_POSN POSN,
             YTRCODE_IND_SALIDA SALIDA,
             YTRCODE_CANTIDAD CANTIDAD,
             YTRCODE_FORMATO FORMATO,
             YTRCODE_NIVEL NIVEL_COLA
        FROM YTRPRCO, YTACOLA, YTRCODE
       WHERE YTRPRCO_PLAN_PROC_CODE = P_PROC_CODE
         AND YTRPRCO_PLAN_SEQ = P_SEQ
         and YTRPRCO_IND_ESTADO = 'A'
         AND YTRPRCO_COLA_CODE = YTACOLA_CODE
         AND YTRPRCO_COLA_CODE = YTRCODE_COLA_CODE
         AND YTRCODE_IND_ESTADO = 'A'
       ORDER BY YTRPRCO_NIVEL_COLA ASC,
                (YTRCODE_NIVEL + (YTRPRCO_NIVEL_COLA - 1)) ASC;
    --ORDER BY (YTRCODE_NIVEL+(YTRPRCO_NIVEL_COLA-1)) ASC;
  
    --ORDER BY YTRCODE_NIVEL ,(YTRCODE_NIVEL+(YTRPRCO_NIVEL_COLA-1)) ASC;
  
    DT1_ROW DT1%ROWTYPE;
  
    --//////////////////CURSOR PARA SACAR COLA DE CARPETA DE DOCUMENTOS////////////////////////////////////////
    CURSOR DT_CCARPETA(P_CARPETA VARCHAR2, P_UNIDAD VARCHAR2) IS
      SELECT XXX.*
        FROM (SELECT YTRAPDO_CODE_CODE         COLA_CODE,
                     YTRAPDO_ORGN_CODE         ORGN,
                     YTRAPDO_COAS_CODE         COAS,
                     YTRAPDO_DESCRIPCION       DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION   SUBDENOMINACION,
                     YTRAPDO_NIVEL             NIVEL,
                     YTRAPDO_PRVE_CODE         PRVE_CODE,
                     YTRAPDO_PRVE_DESC         PRVE_DESC,
                     YTRAPDO_ESTA_CODE_PASARA  ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE         UNID_CODE,
                     YTRAPDO_TIEMPO            TIEMPO,
                     YTRAPDO_IND_ADJUNTO       IND_ADJUNTO,
                     YTRAPDO_POSN_POSN         POSN,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_SEQ
                FROM COMUMGR.YTRAPDO
               WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                     (SELECT YTRDOCA_DOCU_CODE || '-' || YTRDOCA_DOCU_SEQ
                        FROM COMUMGR.YTRDOCA
                       WHERE YTRDOCA_CAEX_CODE = P_CARPETA
                         AND ROWNUM = 1)
                    
                 AND YTRAPDO_IND_ESTADO = 'P'
               ORDER BY YTRAPDO_SEQ ASC) XXX
      
       WHERE XXX.YTRAPDO_SEQ >
             (SELECT MIN(YTRAPDO_SEQ)
                FROM COMUMGR.YTRAPDO
               WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                     XXX.YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ
                 AND YTRAPDO_COAS_CODE || YTRAPDO_ORGN_CODE =
                     (SELECT YTRUNID_ORGN_UPAO
                        FROM COMUMGR.YTRUNID
                       WHERE YTRUNID_CODE =
                             (SELECT YTRUNID_PADRE
                                FROM COMUMGR.YTRUNID
                               WHERE YTRUNID_CODE = P_UNIDAD)));
    /*SELECT YTRAPDO_CODE_CODE COLA_CODE,YTRAPDO_ORGN_CODE ORGN,YTRAPDO_COAS_CODE COAS,YTRAPDO_DESCRIPCION DESCRIPCION,YTRAPDO_SUBDENOMINACION SUBDENOMINACION,YTRAPDO_NIVEL NIVEL,
    YTRAPDO_PRVE_CODE PRVE_CODE ,YTRAPDO_PRVE_DESC PRVE_DESC,YTRAPDO_ESTA_CODE_PASARA ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
    YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE UNID_CODE,YTRAPDO_TIEMPO TIEMPO,YTRAPDO_IND_ADJUNTO IND_ADJUNTO,YTRAPDO_POSN_POSN POSN
    FROM COMUMGR.YTRAPDO
    WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=(SELECT YTRDOCA_DOCU_CODE||'-'||YTRDOCA_DOCU_SEQ FROM COMUMGR.YTRDOCA
                                                    WHERE YTRDOCA_CAEX_CODE=P_CARPETA AND ROWNUM=1)
    AND YTRAPDO_IND_ESTADO='P'
    ORDER BY YTRAPDO_SEQ ASC;*/
    DT_CCARPETA_ROW DT_CCARPETA%ROWTYPE;
    --//////////////////FIN DE CURSOR DE CARPETAS/////////////////////////////////////////////////////////////
  
    --//////////////////CURSOR  PARA SACAR LA COLA DINAMICA////////////////////////////////////////
    CURSOR COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,
                         P_PARAMETRO       VARCHAR2,
                         P_PARAMETRO2      VARCHAR2,
                         P_NIVEL           INT) IS
      SELECT YTACOLA_CODE,
             YTRCODE_CODE,
             YTRCODE_ORGN_CODE ORGN,
             YTRCODE_COAS_CODE COAS,
             YTRCODE_DESCRIPCION DESCRIPCION,
             YTRCODE_SUBDENOMINACION SUBDENOMINACION,
             (YTRCODE_NIVEL + (P_NIVEL - 1)) NIVEL,
             YTRCODE_PRVE_CODE PRVE_CODE,
             YTRCODE_PRVE_DESC PRVE_DESC,
             YTRCODE_ESTA_CODE_PASARA ESTA_CODE_PASARA,
             YTRCODE_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
             YTRCODE_TIAP_CODE,
             YTRCODE_YTRUNID_CODE UNID_CODE,
             YTACOLA_IND_CONTENEDORA CONTENEDORA,
             YTACOLA_PADRE PADRE,
             YTACOLA_PARAMETRO PARAMETRO,
             YTRCODE_TIEMPO TIEMPO,
             YTRCODE_IND_ADJUNTO IND_ADJUNTO,
             YTRCODE_POSN_POSN POSN,
             YTRCODE_IND_SALIDA SALIDA,
             YTRCODE_CANTIDAD CANTIDAD,
             YTRCODE_FORMATO FORMATO,
             YTRCODE_NIVEL NIVEL_COLA
        FROM YTACOLA, YTRCODE
       WHERE YTACOLA_PADRE = P_COLA_CODE_PADRE
         AND (YTACOLA_PARAMETRO = P_PARAMETRO OR
             YTACOLA_PARAMETRO = P_PARAMETRO2)
         AND YTACOLA_CODE = YTRCODE_COLA_CODE
         AND YTRCODE_IND_ESTADO = 'A'
       ORDER BY YTRCODE_NIVEL ASC;
  
    COLA_DINAMICA_ROW COLA_DINAMICA%ROWTYPE;
  
    --CURSOR DE COPIAS
    CURSOR COPIAS(P_COPIARA VARCHAR2) IS
      SELECT *
        FROM (SELECT DISTINCT TRIM(JA.GRUPO) AS ORG_CODE
                FROM (WITH t AS (SELECT P_COPIARA str FROM DUAL)
                       SELECT REGEXP_SUBSTR(str, '[^,]+', 1, LEVEL) AS GRUPO
                         FROM t
                       CONNECT BY LEVEL <=
                                  (select LENGTH(REPLACE(str, ',', NULL))
                                     from t)) JA
              )
       WHERE LENGTH(ORG_CODE) > 0;
  
    COPIAS_ROW COPIAS%ROWTYPE;
  
    --CURSOR DE CONCEPTOS DE PAGO
    CURSOR C_CP(V_REQ VARCHAR2, V_CAMP VARCHAR2) IS
      SELECT DETAIL_CODE, DESCRIPCION, MONTO, NIVEL
        FROM (SELECT YTVCOPR_DETAIL_CODE DETAIL_CODE,
                     TBBDETC_DESC        DESCRIPCION,
                     TBBDETC_AMOUNT      MONTO,
                     TBBDETC_LEVL_CODE   NIVEL
                FROM COMUMGR.YTVCOPR, TBBDETC@PROD.INT.UPAO.EDU.PE
               WHERE YTVCOPR_REQU_CODE = V_REQ
                 AND YTVCOPR_DETAIL_CODE = TBBDETC_DETAIL_CODE
                 AND TBBDETC_CAMP_CODE = V_CAMP
               ORDER BY TBBDETC_CAMP_CODE, YTVCOPR_ORDEN)
       WHERE ROWNUM = 1;
  
    CURSOR C_CP_MONTO(V_REQ VARCHAR2, V_CAMP VARCHAR2) IS
      SELECT MONTO
        FROM (SELECT YTVCOPR_DETAIL_CODE DETAIL_CODE,
                     TBBDETC_DESC        DESCRIPCION,
                     TBBDETC_AMOUNT      MONTO,
                     TBBDETC_LEVL_CODE   NIVEL
                FROM COMUMGR.YTVCOPR, TBBDETC@PROD.INT.UPAO.EDU.PE
               WHERE YTVCOPR_REQU_CODE = V_REQ
                 AND YTVCOPR_DETAIL_CODE = TBBDETC_DETAIL_CODE
                 AND TBBDETC_CAMP_CODE = V_CAMP
               ORDER BY TBBDETC_CAMP_CODE, YTVCOPR_ORDEN)
       WHERE ROWNUM = 1;
  
    CURSOR C_UNID_P(P_DUENO VARCHAR2) IS
      SELECT YTRUNID_CODE, YTRUNID_RUTA
        FROM YTRUNID
       WHERE YTRUNID_PADRE = P_DUENO
         AND YTRUNID_IND_PRINCIPAL = 'S'
         AND ROWNUM = 1;
  
    CURSOR C_UNID_DUENA(P_ORGN VARCHAR2, P_PARAMETRO VARCHAR2) IS
      SELECT YTRUNID_CODE, YTRUNID_RUTA
        FROM YTRUNID
       WHERE YTRUNID_PADRE =
             (SELECT YTRUNID_CODE
                FROM YTRUNID
               WHERE YTRUNID_ORGN_UPAO = P_ORGN
                 AND YTRUNID_PARAMETRO = P_PARAMETRO)
         AND YTRUNID_IND_PRINCIPAL = 'S';
    --REQUISITOS CON PAGOS
    CURSOR C_PAGOS(P_CODE VARCHAR2) IS
      SELECT YTRREDO_PADH_CODE
        FROM COMUMGR.YTRREDO
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = P_CODE
         AND YTRREDO_TIRE_CODE = 'REC';
    C_PAGOS_REC C_PAGOS%ROWTYPE;
  
    --///////CAMPOS ADICIONALES
    CURSOR C_CAMPOS(P_PLANTILLA VARCHAR2, P_SEQ VARCHAR2) IS
      SELECT YTRPLCA_CAME_CODE CAME_CODE,
             YTRPLCA_SEQ SEQ,
             YTRCAME_NOM_CAMPO NOM_CAMPO,
             YTRCAME_ID_CAMPO ID_CAMPO,
             YTRPLCA_CAME_CODE || YTRPLCA_SEQ || '_' || YTRCAME_ID_CAMPO CODE,
             YTRCAME_CONTROL CONTROL,
             YTRCAME_REQUERIDO REQUERIDO,
             YTRPLCA_ORDEN ORDEN,
             YTRCAME_TIPO_CAMPO TIPO_CAMPO,
             YTRCAME_VALOR_DEFECTO VALOR_DEFECTO,
             YTRCAME_IND_VALOR,
             YTRCAME_AFECTA_PAGO,
             YTRCAME_ANCHO,
             YTRCAME_TAMANO,
             YTRCAME_MODAL
        FROM COMUMGR.YTRPLCA, COMUMGR.YTRCAME
       WHERE YTRPLCA_PLAN_PROC_CODE = P_PLANTILLA
         AND YTRPLCA_PLAN_SEQ = P_SEQ
         AND YTRPLCA_IND_ESTADO = 'A'
         AND YTRPLCA_CAME_CODE = YTRCAME_CODE
       ORDER BY YTRPLCA_ORDEN;
    C_CAMPOS_REC C_CAMPOS%ROWTYPE;
  
    --///////CAMPOS ADICIONALES(POR PROCESO) PARA LAS COLAS DE APROBACI?N
  
    CURSOR C_CACAP(P_PLANTILLA VARCHAR2, P_COLA VARCHAR2) IS
      SELECT YTROBBD_NOMBRE_OBJETO
        FROM YTRMANA, YTROBBD
       WHERE YTRMANA_PROC_CODE || '-' || YTRMANA_PLAN_SEQ = P_PLANTILLA
         AND YTRMANA_CODE_CODE || YTRMANA_CODE_COLA_CODE = P_COLA
         AND YTRMANA_OBBD = YTROBBD_CODE;
    C_CACAP_REC C_CACAP%ROWTYPE;
  
  BEGIN
  
    V_PRUEBA := 10415;
  
    V_PARA_CODE := NULL;
    V_PARA_DESC := NULL;
    V_ORGN_DINA := NULL;
    V_NIVEL_DIM := 0;
  
    --P_DATA:=REPLACE(P_DATA,'?','');
    V_PAGO_BANCO := '';
    V_PRUEBA     := 10424;
    jsonObj      := json(P_DATA);
    V_PRUEBA     := 10426;
    v_usua_id    := ky_json.campo(jsonObj, 'usua_id');
    -- code := jsonObj.get_string('code');
  
    --V_DEUDA:=KYG_UTILIDADES.FYG_NO_DEUDA_USUARIO(v_usua_id);
  
    v_plan_proc_code := ky_json.campo(jsonObj, 'plan_proc_code');
    v_PLAN_SEQ       := ky_json.campo(jsonObj, 'plan_seq');
  
    v_soli_code    := ky_json.campo(jsonObj, 'soli_code');
    v_aprobado     := ky_json.campo(jsonObj, 'p_aprobar');
    v_usua_reg     := ky_json.campo(jsonObj, 'usua_id_reg');
    V_CARRERA_USUA := ky_json.campo(jsonObj, 'p_carrera');
    V_CARRERA_ENUS := ky_json.campo(jsonObj, 'p_carrera');
  
    v_DEPENDENCIA := ky_json.campo(jsonObj, 'p_dependencia_code');
    v_nom_unidad  := ky_json.campo(jsonObj, 'p_dependencia_desc');
  
    V_CODEDOC       := ky_json.campo(jsonObj, 'ytbdocu_pk');
    v_observaciones := ky_json.campo(jsonObj, 'observaciones');
    V_NUM_COPIAS    := ky_json.campo(jsonObj, 'p_copias');
  
    v_tasunto   := ky_json.campo(jsonObj, 'p_tasunto');
    V_CARPETA   := ky_json.campo(jsonObj, 'p_carpeta');
    V_TERM_CODE := ky_json.campo(jsonObj, 'p_term_code');
    P_HAB_POLI  := ky_json.campo(jsonObj, 'p_hab_poli');
  
    V_ASUNTO := ky_json.campo(jsonObj, 'asunto');
  
    V_PRUEBA := 10454;
  
    -- IF(V_CARRERA_ENUS<>'0' OR V_CARRERA_ENUS<>'-1') THEN
    IF (V_CARRERA_ENUS <> '0' AND V_CARRERA_ENUS <> '-1') THEN
    
      V_CARRERA_USUA := SUBSTR(V_CARRERA_ENUS,
                               1,
                               INSTR(V_CARRERA_ENUS, '-', 1, 1) - 1);
      V_NIVEL_1      := SUBSTR(V_CARRERA_ENUS,
                               INSTR(V_CARRERA_ENUS, '-', 1, 1) + 1,
                               2);
      V_CAMP_CODE_1  := SUBSTR(V_CARRERA_ENUS,
                               INSTR(V_CARRERA_ENUS, '-', 1, 2) + 1,
                               3);
    
      IF ky_json.campo(jsonObj, 'p_campus1') IS NULL THEN
        V_CAMP_CODE_1 := '%';
      ELSE
        V_CAMP_CODE_1 := ky_json.campo(jsonObj, 'p_campus1');
      END IF;
    
      V_PRUEBA := 10489;
    
      /* IF V_CAMP_CODE_1 IS NULL THEN
              V_CAMP_CODE_1:='%';
      END IF;*/
    
      -- V_CARRERA_ENUS:=SUBSTR(V_CARRERA_ENUS,1,INSTR(V_CARRERA_ENUS, '-', 1, 2 )-1);
    
      --SELECT SUBSTR('ICSI-UG',INSTR('ICSI-UG', '-', 1, 1 )+1,2) FROM DUAL;
    
      -- SELECT SUBSTR('ICSI-UG',INSTR('ICSI-UG', '-', 1, 1 )+1,2) FROM DUAL;
    END IF;
  
    V_VUELTA_DINAMICA := 0;
    V_SUMA            := 0;
  
    SELECT COUNT(*)
      INTO V_PRECONDICION
      FROM YTRPLRE, YTVREQU
     WHERE YTRPLRE_PLAN_PROC_CODE || '-' || YTRPLRE_PLAN_SEQ =
           v_plan_proc_code || '-' || v_PLAN_SEQ
       AND YTRPLRE_REQU_CODE = YTVREQU_CODE
       AND YTVREQU_TIRE_CODE = 'CON'
       AND YTRPLRE_IND_ESTADO = 'A';
  
    IF V_PRECONDICION > 0 THEN
      -- V_DEUDA:=KYG_UTILIDADES.FYG_NO_DEUDA_USUARIO(v_usua_id);
      --inicia a validar todas las pre-CONDIONES ACTIVAS PARA EL DOCUMENTO
      V_VALIDA_PC := kyt_ejecutor.FYT_PRE_CONDICIONES(P_DATA);
    
      --V_VALIDA_PC:= 'ERRxxxx';
    ELSE
      -- V_DEUDA:=0;
      V_VALIDA_PC := '0';
    END IF;
  
    IF (P_ACCION = 'ADI') THEN
    
      V_PRUEBA := 10528;
    
      --VALIDAR POLITICAS POR DOCUMENTO
    
      SELECT YTRPLAN_IND_HAB_POLI
        INTO V_YTRPLAN_IND_HAB_POLI
        FROM COMUMGR.YTRPLAN
       WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
         AND YTRPLAN_SEQ = v_PLAN_SEQ;
         
         V_PRUEBA := 105281;
    
      IF V_YTRPLAN_IND_HAB_POLI = 'S' THEN
      
      V_PRUEBA := 105282;
        --SELECT COUNT(*) INTO V_CANT FROM COMUMGR.YTACEPO WHERE YTACEPO_DOCU_CODE = P_DOCUMENTO;
      
        IF P_HAB_POLI <> 'S' THEN
        
        V_PRUEBA := 105283;
          --V_VALIDAR_1 := 1;
        
          --V_MSG := 'ERP-ERR DOCUMENTO NO SE PUEDE ENVIAR A EVALUACI?N POR QUE NO ACEPT? LAS POLITICAS';
        
          V_MSG_GLOBAL := 'ERP-ERR DOCUMENTO NO SE PUEDE CREAR POR QUE NO ACEPT? LAS POLITICAS ';
          RAISE EXP_POLITICAS;
        
        END IF;
      V_PRUEBA := 105284;
      END IF;
    
    V_PRUEBA := 105285;
      --- FIN VALIDACION POLITICAS
    
      /*V_CAMPOS := replace(replace(replace(ky_json.campo(jsonObj, 'data'),
                                          '?',
                                          '{'),
                                  '?',
                                  '}'),
                          '|',
                          '"');
      V_CAMPOS := REPLACE(V_CAMPOS, '?', '');*/
      
    V_CAMPOS:=replace(replace(replace(ky_json.campo(jsonObj, 'data'),'¬','{'),'µ','}'),'|','"');
    V_CAMPOS:=REPLACE(V_CAMPOS,'�','');
    
    V_PRUEBA := 105286;
      V_BTN_MIN  := 0;
      V_BTN_MAXI := 0;
        
    V_PRUEBA := 1052861;
    
    V_PRUEBA_TEXT := V_PRUEBA||' '||V_CAMPOS||' '||ky_json.campo(jsonObj, 'data');
  
      IF NOT V_CAMPOS IS NULL THEN
    V_PRUEBA := 10528611;
    
    V_PRUEBA_TEXT := ' '||V_PRUEBA||' '||V_CAMPOS||' '||ky_json.campo(jsonObj, 'data');        
       json_DATA := json(V_CAMPOS);
      
      V_PRUEBA := 1052817;
        /*INSERT INTO COMUMGR.YTLOG (YTLOG_CODE, YTLOG_VARIABLES)
        VALUES ( V_CODEDOC,V_CAMPOS);*/
      
        --REINICIAR NUMERO DE COPIAS A 0 SI HAY TIPOS BOTON
        OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH C_CAMPOS
            INTO C_CAMPOS_REC;
          EXIT WHEN C_CAMPOS%NOTFOUND;
        
          IF (C_CAMPOS_REC.CONTROL = 'BT') THEN
          
            IF (C_CAMPOS_REC.YTRCAME_AFECTA_PAGO = 'S') THEN
            
              V_NUM_COPIAS            := 0;
              V_BT_EXISTE_AFECTA_PAGO := 1;
            
            END IF;
          
          END IF;
        
        END LOOP;
        CLOSE C_CAMPOS;
      
      V_PRUEBA := 10528;
        --INSERTAMOS NUEVO NUMERO DE COPIAS
        OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH C_CAMPOS
            INTO C_CAMPOS_REC;
          EXIT WHEN C_CAMPOS%NOTFOUND;
        
          IF (C_CAMPOS_REC.CONTROL = 'BT') THEN
          
            IF (C_CAMPOS_REC.YTRCAME_AFECTA_PAGO = 'S') THEN
            
              SELECT COUNT(*)
                INTO v_encontro
                FROM COMUMGR.YTRTEMP
               WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                 AND YTRTEMP_ESTADO = 'A'
                 AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                 AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                 AND YTRTEMP_PLAN_PROC_CODE = v_plan_proc_code
                 AND YTRTEMP_PLAN_SEQ = v_PLAN_SEQ
                 AND YTRTEMP_CARRERA = V_CARRERA_USUA
                 AND YTRTEMP_PROGRAMA = V_NIVEL_1
                 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
            
              IF v_encontro <> 0 THEN
              
                SELECT YTRTEMP_JSON_DATA_CLOB
                  INTO V_YTRTEMP_JSON_DATA_CLOB
                  FROM COMUMGR.YTRTEMP
                 WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                   AND YTRTEMP_ESTADO = 'A'
                   AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                   AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                   AND YTRTEMP_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRTEMP_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRTEMP_CARRERA = V_CARRERA_USUA
                   AND YTRTEMP_PROGRAMA = V_NIVEL_1
                   AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
              
                V_LISTVALUE_1 := json_list(V_YTRTEMP_JSON_DATA_CLOB);
              
                V_NUM_COPIAS := V_NUM_COPIAS + V_LISTVALUE_1.COUNT;
              
              END IF;
            
              V_BTN_MIN  := V_BTN_MIN + C_CAMPOS_REC.YTRCAME_ANCHO;
              V_BTN_MAXI := V_BTN_MAXI + C_CAMPOS_REC.YTRCAME_TAMANO;
            
            END IF;
          
          END IF;
        
        END LOOP;
        CLOSE C_CAMPOS;
      END IF;
    
      V_PRUEBA := 10615;
    
      /*V_MSG_GLOBAL := 'ERP-ERR NUMERO DE COPIAS INVALIDO, PARA ESTE DOCUMENTO EL NUMERO DE COPIAS DEBE SER ' || V_NUM_COPIAS;
      RAISE exp_GLOBAL;*/
    
      IF (V_BT_EXISTE_AFECTA_PAGO = 0) THEN
      
        SELECT YTRPLAN_IND_COPIAS
          INTO V_YTRPLA_IND_COPIAS
          FROM YTRPLAN
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_IND_ESTADO = 'A'
           AND YTRPLAN_SEQ = v_PLAN_SEQ;
      
        IF V_YTRPLA_IND_COPIAS < V_NUM_COPIAS THEN
          V_MSG_GLOBAL := 'ERP-ERR NUMERO DE COPIAS INVALIDO, PARA ESTE DOCUMENTO EL NUMERO DE COPIAS DEBE SER ' ||
                          V_YTRPLA_IND_COPIAS;
          RAISE exp_GLOBAL;
          --V_MSG:='Error al crear registro';
        
        END IF;
      
      END IF;
    
      IF (V_BT_EXISTE_AFECTA_PAGO = 1) THEN
      
        IF V_NUM_COPIAS < V_BTN_MIN OR V_NUM_COPIAS > V_BTN_MAXI THEN
        
          V_MSG_GLOBAL := 'ERP-ERR N?MERO DE DATOS SELECCIONADOS ESTA FUERA DEL RANGO PERMITIDO , PARA ESTE DOCUMENTO TIENE QUE SELECCIONAR COMO M?NIMO ' ||
                          V_BTN_MIN || ' Y COMO M?XIMO ' || V_BTN_MAXI;
          RAISE exp_GLOBAL;
        
        END IF;
      
      END IF;
    
      --IF(V_DEUDA=0) THEN
      --SI ES CERO NOS INDICA QUE NO HAY RESTRICCIONES
      IF (V_VALIDA_PC = '0') then
        V_MSG := 'Error al crear registro';
      
        -- v_plan_proc_code:=ky_json.campo(jsonObj, 'plan_proc_code');
        --v_PLAN_SEQ:=ky_json.campo(jsonObj, 'plan_seq');
      
        --OBTENER PIDM Y NOMBRES DE USUARIO
      
        IF (v_soli_code = 'US') THEN
        
          SELECT SPRIDEN_PIDM,
                 SPRIDEN_LAST_NAME,
                 SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
                 SPBPERS_SSN DNI,
                 SPBPERS_SEX SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM SPRIDEN@PROD.INT.UPAO.EDU.PE
            LEFT OUTER JOIN SPBPERS@PROD.INT.UPAO.EDU.PE
              ON SPRIDEN_PIDM = SPBPERS_PIDM
           WHERE SPRIDEN_ID = v_usua_id
             AND SPRIDEN_CHANGE_IND IS NULL;
        
          --SACANDO EL TIPO DE DOCUMENTO
          SELECT YTAPROC_TIDO_CODE,
                 YTAPROC_TIPO_CODE,
                 YTRPLAN_TIPO_ANTICIPO
            INTO V_TIPODOCUMENTO, V_TIPO_DOC, V_YTRPLAN_TIPO_ANTICIPO
            FROM YTRPLAN, YTAPROC
           WHERE YTRPLAN_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code')
             AND YTRPLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
             AND YTRPLAN_PROC_CODE = YTAPROC_CODE;
        
          IF (V_TIPO_DOC = '04') THEN
            --SACAR EL DATO DE LA ORGANIZACI?N DEL USUARIO SOLICTANTE ES PARA DOCUMENTOS ADMINISTRATIVOS
            V_ORG_USUA := FKYT_DOCU_DOCU_PP_DAME_ORGAN(v_usua_id);
            --SELECT RRRMPLA_COAS||'-'||RRRMPLA_ORGA_ASIG INTO V_ORG_USUA FROM RRHHMGR.RRRMPLA WHERE RRRMPLA_ID=v_usua_id;
            -- V_ORG_USUA:='826';
          
            IF (V_ORG_USUA = '0') THEN
              RAISE EXP_SORGA;
            END IF;
          ELSE
            V_ORG_USUA := '';
          END IF;
        
          --OBTENEMOS SI TIENE UN VINCULO ACADEMICO CON LA UNIVERSIDAD NO INCLUYE CENTRO DE IDIOMAS
          SELECT COUNT(*)
            INTO V_ES_ALUMNO
            FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
           WHERE SGBSTDN_PIDM = V_PIDM
          --AND NOT SGBSTDN_LEVL_CODE IN('UB')
          ;
        
          IF (V_ES_ALUMNO > 0) THEN
          
            /* SELECT DISTINCT AA.SGBSTDN_PIDM, AA.SGBSTDN_TERM_CODE_EFF,AA.SGBSTDN_CAMP_CODE,AA.SGBSTDN_MAJR_CODE_1 ,BB.SORLCUR_LMOD_CODE,BB.SORLCUR_TERM_CODE,BB.SORLCUR_LEVL_CODE,BB.SORLCUR_COLL_CODE,
            CC.SORLFOS_TERM_CODE,CC.SORLFOS_MAJR_CODE,CC.SORLFOS_TERM_CODE_CTLG
            FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
            WHERE SGBSTDN_PIDM=:PIDM
            AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE
            AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
            AND BB.SORLCUR_SEQNO=(SELECT MAX(SORLCUR_SEQNO) FROM SORLCUR@PROD.INT.UPAO.EDU.PE WHERE SORLCUR_PIDM=:PIDM AND  SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB')
            AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
            AND  SGBSTDN_PIDM=SORLFOS_PIDM
            AND SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO=  (Select MAX(SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO)
                                                            FROM SORLFOS@PROD.INT.UPAO.EDU.PE
                                                            where SORLFOS_pidm=:PIDM AND  SORLFOS_TERM_CODE=BB.SORLCUR_TERM_CODE AND SORLFOS_LFST_CODE='MAJOR') ;*/
          
            --NO SELECCIONO CARRERA Y SE VA ASIGNAR UNA CARRERA POR DEFECTO
            IF (V_CARRERA_USUA = '0' OR V_CARRERA_USUA = '-1') THEN
            
              /*SELECT DISTINCT   BB.SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=BB.SORLCUR_COLL_CODE)  FACULTAD_DES,
              CC.SORLFOS_MAJR_CODE, (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=CC.SORLFOS_MAJR_CODE) CARRERA_DESC,AA.SGBSTDN_CAMP_CODE,SORLCUR_LEVL_CODE
              INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE
              FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
              WHERE SGBSTDN_PIDM=V_PIDM
              AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE
              AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
              AND BB.SORLCUR_SEQNO=(SELECT MAX(SORLCUR_SEQNO) FROM SORLCUR@PROD.INT.UPAO.EDU.PE WHERE SORLCUR_PIDM=V_PIDM AND  SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB')
              AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
              AND  SGBSTDN_PIDM=SORLFOS_PIDM
              AND SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO=  (Select MAX(SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO)
                                                              FROM SORLFOS@PROD.INT.UPAO.EDU.PE
                                                           where SORLFOS_pidm=V_PIDM AND  SORLFOS_TERM_CODE=BB.SORLCUR_TERM_CODE AND SORLFOS_LFST_CODE='MAJOR') ;
                */
            
              V_PRUEBA := 10732;
            
              SELECT count(*)
                into V_NO_CC
                FROM SORLCUR@prod.int.upao.edu.pe S,
                     SORLFOS@prod.int.upao.edu.pe
               WHERE S.SORLCUR_PIDM = V_PIDM
                    --AND  NOT S.SORLCUR_LEVL_CODE IN ('UB')
                 AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                 AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                 AND SORLCUR_TERM_CODE =
                     (select MAX(XX.SORLCUR_TERM_CODE)
                        from SORLCUR@prod.int.upao.edu.pe XX
                       where sorlcur_pidm = V_PIDM
                         AND SORLCUR_LMOD_CODE = 'LEARNER'
                         AND SORLCUR_CACT_CODE = 'ACTIVE'
                      --AND NOT XX.SORLCUR_LEVL_CODE  IN ('UB')
                      )
                    -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                 AND S.SORLCUR_PIDM = SORLFOS_PIDM
                 AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                 AND SORLFOS_CACT_CODE = 'ACTIVE'
                    -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                 AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
            
              IF V_NO_CC > 0 THEN
              
                /* SELECT SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=S.SORLCUR_COLL_CODE)  FACULTAD_DES,
                        O2.SORCMJR_MAJR_CODE AS SORLFOS_MAJR_CODE,    (SELECT STVMAJR_DESC FROM STVMAJR@prod.int.upao.edu.pe WHERE STVMAJR_CODE=O2.SORCMJR_MAJR_CODE)  AS CARRERA_DESC,
                        S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                       --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                         ,S.SORLCUR_PROGRAM AS PROGRAMA
                         INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE,V_PROGRAMA_CARR
                FROM SORLCUR@prod.int.upao.edu.pe S, SORCMJR@prod.int.upao.edu.pe O2, SORLFOS@prod.int.upao.edu.pe
                WHERE S.SORLCUR_PIDM =V_PIDM
                --   AND S.SORLCUR_LEVL_CODE = P_NIVEL
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND  SORLCUR_TERM_CODE= ( select MAX(XX.SORLCUR_TERM_CODE)
                                  from SORLCUR@prod.int.upao.edu.pe XX  where sorlcur_pidm=V_PIDM
                                      AND SORLCUR_LMOD_CODE = 'LEARNER'
                                    AND SORLCUR_CACT_CODE = 'ACTIVE' )
                   AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                   AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;*/
              
                SELECT DISTINCT SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                                SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                                S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                                S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                                --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                               ,
                                S.SORLCUR_PROGRAM AS PROGRAMA
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SORLCUR@prod.int.upao.edu.pe S,
                       SORLFOS@prod.int.upao.edu.pe
                 WHERE S.SORLCUR_PIDM = V_PIDM
                      --AND NOT S.SORLCUR_LEVL_CODE  IN ('UB')
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND S.SORLCUR_CAMP_CODE like V_CAMP_CODE_1
                   AND EXISTS
                 (SELECT 'Y'
                          FROM stvcamp@prod.int.upao.edu.pe
                         WHERE STVCAMP_CODE LIKE S.SORLCUR_CAMP_CODE
                           AND STVCAMP_SITE_CODE IS NOT NULL)
                      
                   AND SORLCUR_TERM_CODE || '-' || SORLCUR_SEQNO =
                       (select MAX(XX.SORLCUR_TERM_CODE || '-' ||
                                   SORLCUR_SEQNO)
                          from SORLCUR@prod.int.upao.edu.pe XX
                         where sorlcur_pidm = V_PIDM
                           AND SORLCUR_LMOD_CODE = 'LEARNER'
                           AND SORLCUR_CACT_CODE = 'ACTIVE'
                           AND XX.SORLCUR_CAMP_CODE like V_CAMP_CODE_1 --SE ADOICIONO PARA SOLUCIONAR PROBLEMA DE COSNULTA POR CAMPUS
                              --AND NOT XX.SORLCUR_LEVL_CODE  IN ('UB','PU','PC')
                           AND NOT XX.SORLCUR_LEVL_CODE IN ('PU', 'PC')
                           AND XX.SORLCUR_TERM_CODE = S.SORLCUR_TERM_CODE)
                      -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                      -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
              
              ELSE
                --NO TIENE CURRICULA CONCURRENTE SELECCIONARA DE SGBSTDN UNA CARRERA NO DISPONIBLE PARA CENTRO DE IDIOMAS
              
                SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                                SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                                SGBSTDN_CAMP_CODE,
                                SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                                SGBSTDN_PROGRAM_1 PROGRAMA
                
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SGBSTDN@prod.int.upao.edu.pe S
                 WHERE SGBSTDN_PIDM = V_PIDM
                      --AND ( NOT SGBSTDN_LEVL_CODE_2 IN('UB') OR SGBSTDN_LEVL_CODE_2 IS NULL)
                   AND SGBSTDN_LEVL_CODE_2 IS NULL
                   AND ROWNUM = 1;
              
              END IF;
            
              IF (LENGTH(V_CAMP_CODE) = 0) THEN
                V_CAMP_CODE := 'M'; --SETEAMOS POR DEFECTO A CAMPUS PRINCIPAL
              END IF;
            
              V_PARAMETRO := V_CARRERA;
            
            ELSE
              --USUARIO PROPORCIONA UNA CARRERA SELECCIONO CARRERA
            
              /*SELECT DISTINCT   BB.SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=BB.SORLCUR_COLL_CODE)  FACULTAD_DES,
              CC.SORLFOS_MAJR_CODE, (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=CC.SORLFOS_MAJR_CODE) CARRERA_DESC,AA.SGBSTDN_CAMP_CODE,SORLCUR_LEVL_CODE
              INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE
              FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
              WHERE SGBSTDN_PIDM=V_PIDM
              AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
              AND SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB'
              AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
              AND  SGBSTDN_PIDM=SORLFOS_PIDM
              AND SORLFOS_MAJR_CODE= V_CARRERA_USUA
              AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE;*/
            
              /*SELECT DISTINCT SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=S.SORLCUR_COLL_CODE)  FACULTAD_DES,
              O2.SORCMJR_MAJR_CODE AS SORLFOS_MAJR_CODE,    (SELECT STVMAJR_DESC FROM STVMAJR@prod.int.upao.edu.pe WHERE STVMAJR_CODE=O2.SORCMJR_MAJR_CODE)  AS CARRERA_DESC,
               S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                          --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                            ,S.SORLCUR_PROGRAM AS PROGRAMA
              INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE,V_PROGRAMA_CARR
                   FROM SORLCUR@prod.int.upao.edu.pe S, SORCMJR@prod.int.upao.edu.pe O2, SORLFOS@prod.int.upao.edu.pe
                   WHERE S.SORLCUR_PIDM =V_PIDM
                   --   AND S.SORLCUR_LEVL_CODE = P_NIVEL
                      AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                      AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                     --AND  S.SORLCUR_LEVL_CODE=
                      AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                      ---
                      AND S.SORLCUR_PIDM = SORLFOS_PIDM
                      AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                      AND SORLFOS_CACT_CODE = 'ACTIVE'
                      AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                      AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO
                      AND  O2.SORCMJR_MAJR_CODE||'-'||S.SORLCUR_LEVL_CODE=V_CARRERA_USUA||'-'||V_NIVEL_1;*/
            
              V_PRUEBA := 10872;
              select count(*)
                into V_NO_CC
                FROM SORLCUR@prod.int.upao.edu.pe S,
                     SORLFOS@prod.int.upao.edu.pe
               WHERE S.SORLCUR_PIDM = V_PIDM
                 AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
                 AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                 AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                    
                 AND SORLCUR_TERM_CODE =
                     (select MAX(XX.SORLCUR_TERM_CODE)
                        from SORLCUR@prod.int.upao.edu.pe XX,
                             SORLFOS@prod.int.upao.edu.pe YY
                       where sorlcur_pidm = V_PIDM
                         AND XX.SORLCUR_PIDM = YY.SORLFOS_PIDM
                         AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                         AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                         AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                         AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                         AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                         AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                         AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                    -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                 AND S.SORLCUR_PIDM = SORLFOS_PIDM
                 AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                 AND SORLFOS_CACT_CODE = 'ACTIVE'
                 AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
                    -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                 AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
            
              IF V_NO_CC > 0 THEN
              
                /* SELECT SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=S.SORLCUR_COLL_CODE)  FACULTAD_DES,
                        O2.SORCMJR_MAJR_CODE AS SORLFOS_MAJR_CODE,    (SELECT STVMAJR_DESC FROM STVMAJR@prod.int.upao.edu.pe WHERE STVMAJR_CODE=O2.SORCMJR_MAJR_CODE)  AS CARRERA_DESC,
                        S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                       --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                         ,S.SORLCUR_PROGRAM AS PROGRAMA
                         INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE,V_PROGRAMA_CARR
                FROM SORLCUR@prod.int.upao.edu.pe S, SORCMJR@prod.int.upao.edu.pe O2, SORLFOS@prod.int.upao.edu.pe
                WHERE S.SORLCUR_PIDM =V_PIDM
                --   AND S.SORLCUR_LEVL_CODE = P_NIVEL
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND  SORLCUR_TERM_CODE= ( select MAX(XX.SORLCUR_TERM_CODE)
                                  from SORLCUR@prod.int.upao.edu.pe XX  where sorlcur_pidm=V_PIDM
                                      AND SORLCUR_LMOD_CODE = 'LEARNER'
                                    AND SORLCUR_CACT_CODE = 'ACTIVE' )
                   AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                   AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;*/ --
                --Y
                SELECT DISTINCT SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                                SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                                S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                                S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                                --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                               ,
                                S.SORLCUR_PROGRAM AS PROGRAMA
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SORLCUR@prod.int.upao.edu.pe S,
                       SORLFOS@prod.int.upao.edu.pe AA
                 WHERE S.SORLCUR_PIDM = V_PIDM
                   AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND S.SORLCUR_CAMP_CODE like V_CAMP_CODE_1
                   AND EXISTS
                 (SELECT 'Y'
                          FROM stvcamp@prod.int.upao.edu.pe
                         WHERE STVCAMP_CODE LIKE S.SORLCUR_CAMP_CODE
                           AND STVCAMP_SITE_CODE IS NOT NULL)
                   AND SORLCUR_TERM_CODE || '-' || SORLCUR_SEQNO =
                       (select MAX(XX.SORLCUR_TERM_CODE || '-' ||
                                   SORLCUR_SEQNO)
                          from SORLCUR@prod.int.upao.edu.pe XX,
                               SORLFOS@prod.int.upao.edu.pe YY
                         where sorlcur_pidm = V_PIDM
                           AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                           AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                           AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                           AND XX.SORLCUR_TERM_CODE = S.SORLCUR_TERM_CODE
                           AND XX.SORLCUR_CAMP_CODE like V_CAMP_CODE_1 --SE ADOICIONO PARA SOLUCIONAR PROBLEMA DE COSNULTA POR CAMPUS
                           AND XX.sorlcur_pidm = YY.SORLFOS_PIDM
                           AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                           AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                           AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                           AND XX.SORLCUR_PRIORITY_NO =
                               YY.SORLFOS_PRIORITY_NO)
                      
                      -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = AA.SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = AA.SORLFOS_LCUR_SEQNO
                   AND AA.SORLFOS_CACT_CODE = 'ACTIVE'
                   AND AA.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                      -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO
                   AND ROWNUM = 1;
              
              ELSE
              
                SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                                SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                                SGBSTDN_CAMP_CODE,
                                SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                                SGBSTDN_PROGRAM_1 PROGRAMA
                
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SGBSTDN@prod.int.upao.edu.pe S
                 WHERE SGBSTDN_PIDM = V_PIDM
                      --AND ( NOT SGBSTDN_LEVL_CODE_2 IN('UB') OR SGBSTDN_LEVL_CODE_2 IS NULL)
                   AND SGBSTDN_LEVL_CODE_2 IS NULL
                   AND SGBSTDN_MAJR_CODE_1 = V_CARRERA_USUA
                   AND SGBSTDN_LEVL_CODE = V_NIVEL_1
                   and SGBSTDN_camp_code <> 'IN';
              
              END IF;
            
              IF (LENGTH(V_CAMP_CODE) = 0) THEN
                V_CAMP_CODE := 'M'; --SETEAMOS POR DEFECTO A CAMPUS PRINCIPAL
              END IF;
            
              V_PARAMETRO := V_CARRERA_USUA;
            
            END IF;
          
          ELSE
            --NO ES ALUMNOS
            V_PRUEBA := 10989;
          
            V_FACULTAD      := '';
            V_FACULTAD_DESC := '';
            V_CARRERA       := '';
            V_CARRERA_DESC  := '';
            V_CAMP_CODE     := '';
            V_LEVL_CODE     := '';
          
          END IF;
        
        ELSIF (v_soli_code = 'IE') THEN
          -- ES PARA INSTITUCIONES
        
          SELECT '' PIDM,
                 '' APELLIDOS,
                 YTVINST_DESCRIPCION,
                 '' DNI,
                 '' SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM YTVINST
           WHERE YTVINST_CODE = v_usua_id;
          V_TIPODOCUMENTO := ky_json.campo(jsonObj, 'p_tipodoc');
        
        ELSIF (v_soli_code = 'DA') THEN
          --UNIDAD ADMINISTRATIVA
        
          SELECT '' PIDM,
                 '' APELLIDOS,
                 YTRUNID_DESCRIPCION,
                 '' DNI,
                 '' SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM YTRUNID
           WHERE YTRUNID_CODE =
                 (SELECT YTRUNID_PADRE
                    FROM YTRUNID
                   WHERE YTRUNID_CODE = v_usua_id);
        
          --SELECT YTRUNID_DESCRIPCION  FROM  YTRUNID WHERE        YTRUNID_CODE=         (SELECT YTRUNID_PADRE FROM  YTRUNID   WHERE YTRUNID_CODE='000181'  )
        
          V_TIPODOCUMENTO := ky_json.campo(jsonObj, 'p_tipodoc');
        
        ELSIF (v_soli_code = 'GE') THEN
          --USUARIOS GENERALES
        
          /* SELECT '' PIDM,'' APELLIDOS,YTRUNID_DESCRIPCION,'' DNI,'' SEXO INTO V_PIDM,V_APELLIDOS,V_NOMBRES,V_DNI,V_SEXO
          FROM YTRUNID WHERE YTRUNID_CODE=(SELECT YTRUNID_PADRE FROM  YTRUNID   WHERE YTRUNID_CODE=v_usua_id) ;*/
        
          SELECT SPRIDEN_PIDM,
                 REPLACE(SPRIDEN_LAST_NAME, '  ', ' '),
                 SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
                 SPBPERS_SSN,
                 SPBPERS_SEX
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM SPRIDEN@prod.int.upao.edu.pe,
                 SATURN.SPBPERS@prod.int.upao.edu.pe
           WHERE SPRIDEN_ID = v_usua_id
             AND SPRIDEN_CHANGE_IND IS NULL
             AND SPBPERS_PIDM = SPRIDEN_PIDM;
        
        END IF;
      
        V_PRUEBA := 11017;
      
        --NUMERACION DE DOCUMENTO SACAMOS UN NUMERO TEMPORAL SE ASIGNARA EL VARDADERO NUMERO AL ENTREGAR EL DOCUMENTO
        SELECT YTRNUDO_NUMERACION_TEMP + 1
          INTO V_NUMERO
          FROM YTRNUDO
         WHERE YTRNUDO_PROC_CODE = v_plan_proc_code;
        UPDATE YTRNUDO
           SET YTRNUDO_NUMERACION_TEMP = YTRNUDO_NUMERACION_TEMP + 1
         WHERE YTRNUDO_PROC_CODE = v_plan_proc_code;
      
        --VERIFICAR SI TIENE UN EXPEDIENTE GENERAL PARA ADICIONAR SI NO TIENE DEVUELVE CERO
        SELECT NVL(MAX(YTBEXPE_CODE), 0)
          INTO V_TEXPE
          FROM YTBEXPE
         WHERE YTBEXPE_USUA_ID = v_usua_id
           AND YTBEXPE_IND_GENERAL = 'S';
      
        IF V_TEXPE = '0' THEN
          SELECT TO_NUMBER(MAX(YTBEXPE_CODE)) + 1
            INTO V_TEXPE
            FROM YTBEXPE;
          V_CODEEXP := LPAD(V_TEXPE, 10, '0');
          --CREANDO EL EXPEDIENTE GENERAL PARA SUS DOCUMENTOS
          INSERT INTO COMUMGR.YTBEXPE
            (YTBEXPE_CODE,
             YTBEXPE_FECHA_ACTIVIDAD,
             YTBEXPE_IND_ESTADO,
             YTBEXPE_DESCRIPCION,
             YTBEXPE_USUA_ID,
             YTBEXPE_USUA_ID_CREO,
             YTBEXPE_IND_GENERAL)
          VALUES
            (V_CODEEXP,
             SYSDATE,
             'A',
             'Expediente General',
             v_usua_id,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'S');
        ELSE
          V_CODEEXP := V_TEXPE;
        END IF;
      
        V_PRUEBA := 11045;
      
        --OBTENER LA PLANTILLA Y EL TIPO DE DOCUMENTO PARA REGISTRAR EN EL DOCUMENTO
      
        SELECT YTRPLAN_PLANTILLA,
               YTAPROC_TIPO_CODE,
               YTRPLAN_TIEMPO,
               YTRPLAN_IND_FORMA_ENTREGA,
               YTRPLAN_IND_FORMA_RECEPCION,
               YTRPLAN_IND_DERIVAR,
               YTAPROC_UNID_CODE,
               YTRPLAN_IND_CAUNA,
               YTRPLAN_IND_SOLI_APRO,
               ytrplan_dias_vigencia,
               YTRPLAN_GENERA_DOCSALIDA,
               YTRPLAN_REQ_EVALUACION,
               YTRPLAN_TIPO_ANTICIPO,
               YTRPLAN_VERSION_MAJOR,
               YTRPLAN_VERSION_MINOR
          INTO V_PLANTILLA,
               V_TIPODOC,
               V_TIEMPO,
               V_ENTREGA,
               V_RECEPCION,
               V_DERIVAR,
               V_DUENO_PROCESO,
               V_IND_CAUNA,
               V_SOLI_APRO,
               V_DIAS_VIGENCIA,
               V_GENERA_DOCSALIDA,
               V_REQ_EVALUACION,
               V_YTRPLAN_TIPO_ANTICIPO,
               V_VERSION_MAJOR,
               V_VERSION_MINOR
          FROM YTRPLAN, YTAPROC
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_SEQ = v_PLAN_SEQ
           AND YTRPLAN_PROC_CODE = YTAPROC_CODE;
      
        V_PRUEBA := 11058;
      
        /*
        SELECT  DISTINCT SGBSTDN_COLL_CODE_1 FACULTAD,
        (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=SGBSTDN_COLL_CODE_1)  FACULTAD_DESC,SGBSTDN_MAJR_CODE_1 CARRERA,
        (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=SGBSTDN_MAJR_CODE_1) CARRERA_DESC,sgbstdn_camp_code
        INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE
        
           FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
           WHERE SGBSTDN_PIDM=V_PIDM
           AND SGBSTDN_MAJR_CODE_1=P_MAJR_CODE;
           */
      
        /* V_FACULTAD:='';
        V_FACULTAD_DESC:='';
        V_CARRERA:='';
        V_CARRERA_DESC:='';
        V_CAMP_CODE:='';*/
      
        --INSERTAR DOCUMENTO
        /*INSERT INTO COMUMGR.YTBDOCU (
           YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
           YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID, YTBDOCU_USUA_ID_REG,
           YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
           YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA,
           YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES,
           YTBDOCU_ASUNTO, YTBDOCU_NUMERO_FOLIOS, YTBDOCU_IND_VIRTUAL,
           YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
           YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES, YTBDOCU_PIDM,YTBDOCU_COLL_DESC,YTBDOCU_COLL_CODE_1,YTBDOCU_MAJR_DESC,YTBDOCU_PERS_DNI,YTBDOCU_PERS_SEXO,YTBDOCU_NUMERO)
        
        VALUES (V_CODEDOC,1, P_ESTA_CODE, V_CODEEXP, P_COLL_CODE, P_PLAN_PROC_CODE,P_PLAN_SEQ,P_USUA_ID, P_USUA_ID_REG, SYSDATE,P_FECHA_RECEPCION,P_FECHA_EMISION,
         P_LEIDO,V_CAMP_CODE,P_DATA,P_BUSCA,V_PLANTILLA,P_OBSERVACIONES,V_ASUNTO, P_NUMERO_FOLIOS,P_IND_VIRTUAL,
         V_CARRERA,P_LEVL_CODE,P_CONDICION,V_APELLIDOS,V_NOMBRES,V_PIDM,V_FACULTAD_DESC,V_FACULTAD,V_CARRERA_DESC,V_DNI,V_SEXO,-1*V_NUMERO);
         */
      
        IF V_TIPO_DOC <> '06' THEN
          --SI NO ES UN DOCUMENTO SIN FORMATO SE LE ASIGNA EL ASUNTO DEL PROCESO
          v_tasunto := '0000';
        
        END IF;
      
        select to_char(sysdate, 'YYYY') into v_vaan_code from dual;
      
        /*FALTA SACAR EL COSTO DE LA TABLA DE REQUISITOS DE PAGO*/
      
        IF V_TERM_CODE IS NULL THEN
          V_TERM_CODE := NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL('UG'), 0);
        END IF;
      
        V_PRUEBA := 11109;
      
        --///ADICIONADO PARA APROBACI?N DE CREDITOS ADICIONALES DONDE SE ENVIA EL MONTO A PAGAR
        IF ky_json.campo(jsonObj, 'p_monto1') IS NOT NULL THEN
        
          V_COSTO_ENVIADO := ky_json.campo(jsonObj, 'p_monto1');
          IF V_COSTO_ENVIADO = '0' THEN
            V_COSTO_ENVIADO := FKYT_DOCU_DOCU_PP_COSTO_RECIBO(V_PIDM,
                                                              ky_json.campo(jsonObj,
                                                                            'p_recibo1'));
            IF V_COSTO_ENVIADO = '0' THEN
              V_MENSAJE_GLOBAL := 'ERP-ERR NO SE PUEDE APLICAR COSTO CERO A ESTE PROCESO';
              RAISE exp_GLOBAL;
            END IF;
          END IF;
        ELSIF ky_json.campo(jsonObj, 'p_costo') IS NOT NULL THEN
          V_COSTO_ENVIADO := ky_json.campo(jsonObj, 'p_costo');
        ELSE
          V_COSTO_ENVIADO := 0;
        END IF;
      
        --NUMERO PARA DOCUMENTO
        --SELECT TO_NUMBER(MAX(YTBDOCU_CODE))+1  INTO V_CODE  FROM YTBDOCU;
        SELECT SEQ_YTBDOCU_CODE.NEXTVAL INTO V_CODE FROM DUAL;
        --IF V_CODE IS NULL THEN
        --   V_CODE := 1;
        -- END IF;
        V_CODEDOC := LPAD(V_CODE, 10, '0');
      
        SELECT NVL(TO_NUMBER(MAX(YTBDOCU_NUM_REG)), 1)
          INTO V_NUM_REG
          FROM COMUMGR.YTBDOCU
         WHERE YTBDOCU_VAAN_CODE = v_vaan_code;
      
        --VAMOS ASIGNAR UN CODIGO TEMPORAL PARA NO PERDER EL SECUENCIAL
        IF V_NUM_REG < 900000 THEN
          V_NUM_REG := 900000;
        ELSE
          V_NUM_REG := 900000 + 1;
        END IF;
        --FIN DE SECUENCIAL
      
        --V_NUM_REG := V_NUM_REG +1;
      
        select DBMS_RANDOM.STRING('X', 4)
          INTO V_YTBDOCU_TRANSCRIPT
          from dual;
        V_YTBDOCU_TRANSCRIPT := V_YTBDOCU_TRANSCRIPT || '-' || V_CODEDOC;
      
        --V_PRUEBA_TEXT :=  v_tasunto;  YTBDOCU_COSTO
        IF ky_json.campo(jsonObj, 'p_minor') IS NOT NULL THEN
          SELECT STVMAJR_DESC
            INTO V_MINOR_DESC
            FROM STVMAJR@PROD.INT.UPAO.EDU.PE
           WHERE STVMAJR_CODE = TRIM(ky_json.campo(jsonObj, 'p_minor'));
        
        END IF;
      
        INSERT INTO COMUMGR.YTBDOCU
          (YTBDOCU_CODE,
           YTBDOCU_SEQ,
           YTBDOCU_ESTA_CODE,
           YTBDOCU_EXPE_CODE,
           YTBDOCU_COLL_CODE,
           YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ,
           YTBDOCU_USUA_ID,
           YTBDOCU_USUA_ID_REG,
           YTBDOCU_FECHA_ACTIVIDAD,
           YTBDOCU_FECHA_RECEPCION,
           YTBDOCU_FECHA_EMISION,
           YTBDOCU_LEIDO,
           YTBDOCU_CAMP_CODE,
           YTBDOCU_DATA,
           YTBDOCU_BUSCA,
           YTBDOCU_PLANTILLA,
           YTBDOCU_OBSERVACIONES,
           YTBDOCU_ASUNTO,
           YTBDOCU_NUMERO_FOLIOS,
           YTBDOCU_IND_VIRTUAL,
           YTBDOCU_MAJR_CODE,
           YTBDOCU_LEVL_CODE,
           YTBDOCU_CONDICION,
           YTBDOCU_APELLIDOS,
           YTBDOCU_NOMBRES,
           YTBDOCU_PIDM,
           YTBDOCU_MAJR_DESC,
           YTBDOCU_COLL_CODE_1,
           YTBDOCU_COLL_DESC,
           YTBDOCU_PERS_DNI,
           YTBDOCU_PERS_SEXO,
           YTBDOCU_FECHA_ENTREGA,
           YTBDOCU_ID_USUA_ENT,
           YTBDOCU_NUMERO,
           YTBDOCU_ID_USUA_VALIDO,
           YTBDOCU_FECHA_VALIDO,
           YTBDOCU_FECHA_COMPLETO,
           YTBDOCU_CODIGO_BARRAS,
           YTBDOCU_UNIDAD_ENTREGAR,
           YTBDOCU_ID_USUA_RECIBE,
           YTBDOCU_UNIDAD_ENTREGAR_COAS,
           YTBDOCU_TIPO_CODE,
           YTBDOCU_SOLI_CODE,
           YTBDOCU_TIDO_CODE,
           YTBDOCU_NUM_EXT,
           YTBDOCU_PRIO_CODE,
           YTBDOCU_VAAN_CODE,
           YTBDOCU_TIEMPO,
           YTBDOCU_COSTO,
           YTBDOCU_CARR_PROG,
           YTBDOCU_IND_ENTREGA,
           YTBDOCU_IND_RECEPCION,
           YTBDOCU_IND_DERIVAR,
           YTBDOCU_USUA_ORG,
           YTBDOCU_DOC_REFERENCIA,
           YTBDOCU_PADRE,
           YTBDOCU_NUM_COPIA,
           YTBDOCU_ASUN_CODE,
           YTBDOCU_IP,
           YTBDOCU_CAEX_CODE,
           YTBDOCU_IND_CAUNA,
           YTBDOCU_TERM_CODE,
           YTBDOCU_NUM_REG,
           YTBDOCU_dias_vigencia,
           YTBDOCU_GENERA_DOCSALIDA,
           YTBDOCU_REQ_EVALUACION,
           YTBDOCU_TRANSCRIPT,
           YTBDOCU_MINOR_CODE,
           YTBDOCU_MINOR_DESC,
           YTBDOCU_VERSION_MAJOR,
           YTBDOCU_VERSION_MINOR)
        VALUES
          (V_CODEDOC,
           1,
           ky_json.campo(jsonObj, 'esta_code'),
           V_CODEEXP,
           ky_json.campo(jsonObj, 'coll_code'),
           ky_json.campo(jsonObj, 'plan_proc_code'),
           ky_json.campo(jsonObj, 'plan_seq'),
           ky_json.campo(jsonObj, 'usua_id'),
           ky_json.campo(jsonObj, 'usua_id_reg'),
           sysdate,
           null,
           ky_json.campo(jsonObj, 'fecha_emision'),
           ky_json.campo(jsonObj, 'leido'),
           V_CAMP_CODE,
           V_CAMPOS,
           ky_json.campo(jsonObj, 'busca'),
           V_PLANTILLA,
           ky_json.campo(jsonObj, 'observaciones'),
           V_ASUNTO /* COMENTADO 16/08/2021 ky_json.campo(jsonObj, 'asunto')*/,
           ky_json.campo(jsonObj, 'numero_folios'),
           ky_json.campo(jsonObj, 'ind_virtual'),
           V_CARRERA,
           V_LEVL_CODE,
           COMUMGR.KYG_UTILIDADES.FYG_CONDICION_USUARIO(P_DATA),
           V_APELLIDOS,
           V_NOMBRES,
           V_PIDM,
           V_CARRERA_DESC,
           V_FACULTAD,
           V_FACULTAD_DESC,
           V_DNI,
           V_SEXO,
           null,
           null,
           -1 * V_NUMERO,
           null,
           null,
           null,
           ky_json.campo(jsonObj, 'codigo_barras'),
           '',
           ky_json.campo(jsonObj, 'id_usua_recibe'),
           ky_json.campo(jsonObj, 'unidad_entrega_coas'),
           V_TIPODOC,
           v_soli_code,
           V_TIPODOCUMENTO,
           ky_json.campo(jsonObj, 'p_num_ext'),
           ky_json.campo(jsonObj, 'prioridad'),
           v_vaan_code,
           V_TIEMPO,
           V_COSTO_ENVIADO,
           V_PROGRAMA_CARR,
           V_ENTREGA,
           V_RECEPCION,
           V_DERIVAR,
           V_ORG_USUA,
           ky_json.campo(jsonObj, 'p_referencia'),
           ky_json.campo(jsonObj, 'p_padre'),
           V_NUM_COPIAS,
           v_tasunto,
           ky_json.campo(jsonObj, 'p_ip'),
           V_CARPETA,
           V_IND_CAUNA,
           V_TERM_CODE,
           V_NUM_REG,
           V_DIAS_VIGENCIA,
           V_GENERA_DOCSALIDA,
           V_REQ_EVALUACION,
           V_YTBDOCU_TRANSCRIPT,
           ky_json.campo(jsonObj, 'p_minor'),
           V_MINOR_DESC,
           V_VERSION_MAJOR,
           V_VERSION_MINOR);
      
        V_PRUEBA := 11183;
      
        --QUITAMOS LA ky_json.campo(jsonObj, 'condicion') POR KYG_UTILIDADES.CONDICION_USUARIO  07/08/2020
        --*************NUEVO PARA AGRUPAR DOCUMENTO EN CARPETA AL CREARLO SE BRINDA EL CODIGO DE CARPETA....
        IF ky_json.campo(jsonObj, 'p_carpeta456') IS NOT NULL THEN
          -- V_JSON_CARP:='{"p_carpeta":"'||ky_json.campo(jsonObj, 'p_carpeta456')||'","p_documento":"'||V_CODEDOC||'-1'||'","usua_id":"'||ky_json.campo(jsonObj, 'usua_id_reg')||'","p_commit":"NO"}';
          -- KYT_DOCU_DOCU_PP_YTRDOCA_AUD('ADI',V_JSON_CARP,V_MSG_GLOBAL);
          SELECT COUNT(*)
            INTO V_APERTURADO
            FROM YTBCAEX
           WHERE YTBCAEX_CODE = ky_json.campo(jsonObj, 'p_carpeta456')
             AND YTBCAEX_IND_ESTADO = 'A';
          IF V_APERTURADO > 0 THEN
            --///////////////// QUITAMOS DOCUMENTO DE LA CARPETA A APROBAR
            DELETE COMUMGR.YTRDOCA
             WHERE YTRDOCA_DOCU_CODE || '-' || YTRDOCA_DOCU_SEQ =
                   V_CODEDOC || '-1';
            SELECT (COUNT(*) + 1)
              INTO V_SEQ1
              FROM COMUMGR.YTRDOCA
             WHERE YTRDOCA_CAEX_CODE =
                   ky_json.campo(jsonObj, 'p_carpeta456');
            INSERT INTO COMUMGR.YTRDOCA
              (YTRDOCA_DOCU_CODE,
               YTRDOCA_DOCU_SEQ,
               YTRDOCA_CAEX_CODE,
               YTRDOCA_SEQ,
               YTRDOCA_USUA_ID,
               YTRDOCA_FECHA_ACTIVIDAD,
               YTRDOCA_IND_ESTADO,
               YTRDOCA_COMENTARIO)
            VALUES
              (V_CODEDOC,
               1,
               ky_json.campo(jsonObj, 'p_carpeta456'),
               V_SEQ1,
               ky_json.campo(jsonObj, 'usua_id_reg'),
               sysdate,
               'A',
               'Adicionado desde otro modulo');
          ELSE
            V_MSG_GLOBAL := 'ERP-ERR CARPETA NO ESTA HABILITADA PARA EJECUTAR LA ACCI?N SOLICITADA';
            RAISE exp_GLOBAL;
          END IF;
        END IF;
        --************FIN DE INSERTAR DOCUMENTO EN CARPETA
      
        V_SEQ1 := 0;
      
        --************+ SI ES DOCUMENTO INTERNO(ENTRE UNIDADES ADMINISTRATIVAS) SE ACTUALIZA LA NUMERACI?N POR TIPO DE DOCUMENTO
        IF V_TIPODOC in ('05', '03') THEN
          -- DOCSA sea adiciona para generar numeraci?n de documentos salients
          V_EXISTE_NUM_DOC := 0;
        
          V_YEAR := TO_CHAR(SYSDATE, 'YYYY');
          --***********VERIFICAR CONSULTA PARA NO PERMITIR NUMEROS REPETIDOS POR UNIDAD
          SELECT COUNT(*)
            INTO V_EXISTE_NUM_DOC
            FROM COMUMGR.YTBDOCU
           WHERE YTBDOCU_USUA_ID = ky_json.campo(jsonObj, 'usua_id')
             AND YTBDOCU_TIDO_CODE = TRIM(V_TIPODOCUMENTO)
             AND YTBDOCU_NUM_EXT = ky_json.campo(jsonObj, 'p_num_ext')
             AND YTBDOCU_VAAN_CODE = TRIM(V_YEAR);
        
          V_EXISTE_NUM_DOC := 0;
          --***********VERIFICAR QUE NUMERO DE DOCUMENTO NO EXISTA
          IF V_EXISTE_NUM_DOC > 0 THEN
            V_MSG_GLOBAL := 'ERP-ERR YA EXISTE UN DOCUMENTO PARA EL USUARIO CON ESE NUMERO ' ||
                            V_EXISTE_NUM_DOC ||
                            ky_json.campo(jsonObj, 'usua_id') ||
                            V_TIPODOCUMENTO ||
                            ky_json.campo(jsonObj, 'p_num_ext');
            RAISE exp_GLOBAL;
          END IF;
        
          UPDATE COMUMGR.YTRNDUN
             SET YTRNDUN_NUM_ACT = YTRNDUN_NUM_ACT + 1
           WHERE YTRNDUN_UNID_CODE =
                 trim(ky_json.campo(jsonObj, 'usua_id'))
             AND YTRNDUN_TIDO_CODE = V_TIPODOCUMENTO
             AND YTRNDUN_IND_ESTADO = 'A'
             AND YTRNDUN_VAAN_CODE = V_YEAR;
        
          IF NOT (SQL%ROWCOUNT > 0) THEN
            V_MSG_GLOBAL := 'ERP-ERR NO HAY NUMERACI?N ASIGNADA PARA ESTE TIPO DE DOCUMENTO';
            RAISE exp_GLOBAL;
          END IF;
          --*********PON SIGLAS
          SELECT YTRUNID_SIGLA ||
                 DECODE(YTRUNID_SEDE, '0', '', '-' || YTRUNID_SEDE)
            INTO V_SIGLA
            FROM COMUMGR.YTRUNID
           WHERE YTRUNID_CODE = trim(ky_json.campo(jsonObj, 'usua_id'));
          --*************COLOCAMOS LAS SIGLAS EN EL DOCUMENTO
          UPDATE COMUMGR.YTBDOCU
             SET YTBDOCU_SIGLA_UNI = V_SIGLA
           WHERE YTBDOCU_CODE = V_CODEDOC;
        END IF;
      
        --VERIFICAMOS SI TIENE ADJUNTOS TEMPORALES
        IF (ky_json.campo(jsonObj, 'p_adju') = 'SI') THEN
          UPDATE COMUMGR.YTRAPAD
             SET YTRAPAD_APPL_CODE       = V_CODEDOC || '-1',
                 YTRAPAD_APPL_REFERENCIA = 'DOCDOC'
           WHERE YTRAPAD_USUA_ID = ky_json.campo(jsonObj, 'usua_id_reg')
             AND YTRAPAD_IND_ESTADO = 'A'
             AND YTRAPAD_APPL_REFERENCIA = 'DOCTEMP';
        
        END IF;
      
        --AGREGAMOS LA NUMERACION TEMPORAL QUE SE ACTUALIZARA AL MOMENTO DE ENTREGAR EL DOCUMENTO
      
        --ESTADO INICIAL
      
        IF ky_json.campo(jsonObj, 'esta_code') = 'EV' THEN
          --SI SE QUIERE ENVIAR DIRECTO A EVALUACI?N
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'NU',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
        END IF;
      
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_CODEDOC,
           1,
           YTRESDO_SEQ_SEQ.nextval,
           ky_json.campo(jsonObj, 'esta_code'),
           SYSDATE,
           ky_json.campo(jsonObj, 'usua_id_reg'),
           'SYS');
      
        --YTRESDO_SEQ_SEQ.nextval
      
        IF V_RECEPCION = 'R' THEN
          --R=RECEPCION PRESENCIAL,
        
          --ACTUALIZAMOS EL ESTADO DEL DOCUMENTO A EVALUACI?N
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE       = 'EV',
                 YTBDOCU_FECHA_RECEPCION = SYSDATE
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_CODEDOC || '-' || '1';
          --REGISTRAMOS EL HISTORIAL DE ESTADOS DE DOCUMENTO
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'EV',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
        END IF;
      
        --DOCUMENTOS ENTRANTES or DOCUMENTOS ENTRE UNIDADES
        IF (V_TIPODOC = '02' OR V_TIPODOC = '05' OR V_TIPODOC = '03') THEN
          --DOCSA  DOCUMENTOS SALIENTES
        
          V_IND_DERIVADO := 'S';
        
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'TR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
          -- SELECT YTBDOCU_PLAN_PROC_CODE INTO V_PLAN_CODE FROM YTBDOCU  WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_CODE_DOC;
          SELECT YTRNUDO_NUMERACION_ACT + 1
            INTO V_NUMERO
            FROM YTRNUDO
           WHERE YTRNUDO_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code');
          UPDATE YTRNUDO
             SET YTRNUDO_NUMERACION_ACT = YTRNUDO_NUMERACION_ACT + 1
           WHERE YTRNUDO_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code');
        
          UPDATE YTBDOCU
             SET YTBDOCU_NUMERO = V_NUMERO, YTBDOCU_ESTA_CODE = 'TR'
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_CODEDOC || '-' || '1'
             AND YTBDOCU_NUMERO < 0
             AND YTBDOCU_FECHA_COMPLETO IS NULL; --PARA CREAR NUMERACI?N SOLO UNA VEZ
        
        END IF;
      
        --/////CAMPOS ADICIONALES   05/07/2016
        /* INGRESA EN EL FORMATO   {"000481_CURSO":"HUMA-2222"}*/
        --V_PRUEBA := -1;
        V_PRUEBA_TEXT := V_CAMPOS;
        IF NOT V_CAMPOS IS NULL THEN
          json_DATA := json(V_CAMPOS);
        
          /*INSERT INTO COMUMGR.YTLOG (YTLOG_CODE, YTLOG_VARIABLES)
          VALUES ( V_CODEDOC,V_CAMPOS);*/
        
          OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
          LOOP
            FETCH C_CAMPOS
              INTO C_CAMPOS_REC;
            EXIT WHEN C_CAMPOS%NOTFOUND;
          
            IF (C_CAMPOS_REC.CONTROL <> 'OC') THEN
              --/////////////SI CAMPO NO ES OCULTO
            
              IF (C_CAMPOS_REC.CONTROL = 'BT') THEN
              
                SELECT COUNT(*)
                  INTO v_encontro
                  FROM COMUMGR.YTRTEMP
                 WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                   AND YTRTEMP_ESTADO = 'A'
                   AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                   AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                   AND YTRTEMP_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRTEMP_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRTEMP_CARRERA = V_CARRERA_USUA
                   AND YTRTEMP_PROGRAMA = V_NIVEL_1
                   AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
              
                IF v_encontro <> 0 THEN
                
                  SELECT YTRTEMP_JSON_DATA_CLOB
                    INTO V_YTRTEMP_JSON_DATA_CLOB
                    FROM COMUMGR.YTRTEMP
                   WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                     AND YTRTEMP_ESTADO = 'A'
                     AND YTRTEMP_USUARIO =
                         ky_json.campo(jsonObj, 'usua_id')
                     AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                     AND YTRTEMP_PLAN_PROC_CODE =
                         ky_json.campo(jsonObj, 'plan_proc_code')
                     AND YTRTEMP_PLAN_SEQ =
                         ky_json.campo(jsonObj, 'plan_seq')
                     AND YTRTEMP_CARRERA = V_CARRERA_USUA
                     AND YTRTEMP_PROGRAMA = V_NIVEL_1
                     AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                
                  SELECT YTRTEMP_JSON_CAMPOS_DINAMICOS
                    INTO V_YTRTEMP_JSON_CAMPOS_DINA
                    FROM COMUMGR.YTRTEMP
                   WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                     AND YTRTEMP_ESTADO = 'A'
                     AND YTRTEMP_USUARIO =
                         ky_json.campo(jsonObj, 'usua_id')
                     AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                     AND YTRTEMP_PLAN_PROC_CODE =
                         ky_json.campo(jsonObj, 'plan_proc_code')
                     AND YTRTEMP_PLAN_SEQ =
                         ky_json.campo(jsonObj, 'plan_seq')
                     AND YTRTEMP_CARRERA = V_CARRERA_USUA
                     AND YTRTEMP_PROGRAMA = V_NIVEL_1
                     AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                
                ELSE
                
                  V_YTRTEMP_JSON_DATA_CLOB := empty_clob();
                
                END IF;
              
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR,
                   YTRVAMD_VALOR_JSON,
                   YTRVAMD_VALOR_DEFECTO)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR,
                   V_YTRTEMP_JSON_DATA_CLOB,
                   REPLACE(REPLACE(C_CAMPOS_REC.VALOR_DEFECTO, '<p>', ''),
                           '</p>',
                           ''));
              
                /*IF V_YTRTEMP_JSON_CAMPOS_DINA = empty_clob() THEN
                
                    UPDATE COMUMGR.YTRTEMP SET YTRTEMP_FECHA_REG_DOCUMENTO = SYSDATE, YTRTEMP_OBSERVACIONES = 'REGISTRO DOCUMENTO' , YTRTEMP_ESTADO = 'E'
                    WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                    AND YTRTEMP_PLAN_PROC_CODE = ky_json.campo(jsonObj, 'plan_proc_code') AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
                    AND YTRTEMP_CARRERA = V_CARRERA_USUA AND YTRTEMP_PROGRAMA = V_NIVEL_1 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1 ;
                
                END IF; */
              
              ELSE
              
                v_encontro := 0;
                IF C_CAMPOS_REC.CONTROL <> 'TA' THEN
                  v_encontro := INSTR(ky_json.campo(json_DATA,
                                                    C_CAMPOS_REC.CODE),
                                      '>');
                END IF;
              
                --INSERT INTO COMUMGR.YTLOG (YTLOG_CODE, YTLOG_VARIABLES)
                --VALUES ( V_CODEDOC,v_encontro ||'->'|| C_CAMPOS_REC.CODE ||'-->json'|| ky_json.campo(json_DATA, C_CAMPOS_REC.CODE));
              
                IF (v_encontro = 0) THEN
                
                  --IF NOT ky_json.campo(json_DATA, C_CAMPOS_REC.CODE) IS NULL THEN
                
                  --YTRVAMD_VALOR_JSON
                
                  IF C_CAMPOS_REC.CONTROL = 'TA' THEN
                  
                    INSERT INTO COMUMGR.YTRVAMD
                      (YTRVAMD_DOCU_CODE,
                       YTRVAMD_DOCU_SEQ,
                       YTRVAMD_CAME_CODE,
                       YTRVAMD_NOM_CAMPO,
                       YTRVAMD_FECHA_ACTIVIDAD,
                       YTRVAMD_USUA_ID,
                       YTRVAMD_VALOR_JSON,
                       YTRVAMD_CAME_ID_CAMPO,
                       YTRVAMD_CODE,
                       YTRVAMD_PLCA_SEQ,
                       YTRVAMD_ORDEN,
                       YTRVAMD_CONTROL,
                       YTRVAMD_REQUERIDO,
                       YTRVAMD_TIPO_CAMPO,
                       YTRVAMD_IND_VALOR)
                    VALUES
                      (V_CODEDOC,
                       1,
                       C_CAMPOS_REC.CAME_CODE,
                       C_CAMPOS_REC.NOM_CAMPO,
                       SYSDATE,
                       ky_json.campo(jsonObj, 'usua_id'),
                       ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                       C_CAMPOS_REC.ID_CAMPO,
                       C_CAMPOS_REC.CODE,
                       C_CAMPOS_REC.SEQ,
                       C_CAMPOS_REC.ORDEN,
                       C_CAMPOS_REC.CONTROL,
                       C_CAMPOS_REC.REQUERIDO,
                       C_CAMPOS_REC.TIPO_CAMPO,
                       C_CAMPOS_REC.YTRCAME_IND_VALOR);
                  
                  ELSE
                  
                    INSERT INTO COMUMGR.YTRVAMD
                      (YTRVAMD_DOCU_CODE,
                       YTRVAMD_DOCU_SEQ,
                       YTRVAMD_CAME_CODE,
                       YTRVAMD_NOM_CAMPO,
                       YTRVAMD_FECHA_ACTIVIDAD,
                       YTRVAMD_USUA_ID,
                       YTRVAMD_VALOR,
                       YTRVAMD_CAME_ID_CAMPO,
                       YTRVAMD_CODE,
                       YTRVAMD_PLCA_SEQ,
                       YTRVAMD_ORDEN,
                       YTRVAMD_CONTROL,
                       YTRVAMD_REQUERIDO,
                       YTRVAMD_TIPO_CAMPO,
                       YTRVAMD_IND_VALOR)
                    VALUES
                      (V_CODEDOC,
                       1,
                       C_CAMPOS_REC.CAME_CODE,
                       C_CAMPOS_REC.NOM_CAMPO,
                       SYSDATE,
                       ky_json.campo(jsonObj, 'usua_id'),
                       ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                       C_CAMPOS_REC.ID_CAMPO,
                       C_CAMPOS_REC.CODE,
                       C_CAMPOS_REC.SEQ,
                       C_CAMPOS_REC.ORDEN,
                       C_CAMPOS_REC.CONTROL,
                       C_CAMPOS_REC.REQUERIDO,
                       C_CAMPOS_REC.TIPO_CAMPO,
                       C_CAMPOS_REC.YTRCAME_IND_VALOR);
                  
                  END IF;
                
                  --YTRCAME_CONTROL CONTROL,YTRCAME_REQUERIDO REQUERIDO,YTRPLCA_ORDEN ORDEN,YTRCAME_TIPO_CAMPO TIPO_CAMPO
                
                  INSERT INTO COMUMGR.YTRTEMPR
                    (YTRTEMPR_FECHA, YTRTEMPR_STRING)
                  VALUES
                    (SYSDATE(),
                     ky_json.campo(json_DATA, C_CAMPOS_REC.CODE));
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),v_encontro);
                
                  --END IF;
                ELSE
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.CODE);
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.YTRCAME_MODAL);
                
                  --VERIFICAR SI EL CONTROL ESTA EN LA MODAL
                  IF (C_CAMPOS_REC.YTRCAME_MODAL = 'S') THEN
                  
                    SELECT COUNT(*)
                      INTO v_encontro
                      FROM COMUMGR.YTRTEMP
                     WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                       AND YTRTEMP_ESTADO = 'A'
                       AND YTRTEMP_USUARIO =
                           ky_json.campo(jsonObj, 'usua_id')
                       AND YTRTEMP_PLAN_PROC_CODE =
                           ky_json.campo(jsonObj, 'plan_proc_code')
                       AND YTRTEMP_PLAN_SEQ =
                           ky_json.campo(jsonObj, 'plan_seq')
                       AND YTRTEMP_CARRERA = V_CARRERA_USUA
                       AND YTRTEMP_PROGRAMA = V_NIVEL_1
                       AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                  
                    IF v_encontro <> 0 THEN
                    
                      SELECT YTRTEMP_JSON_CAMPOS_DINAMICOS
                        INTO V_YTRTEMP_JSON_CAMPOS_DINA
                        FROM COMUMGR.YTRTEMP
                       WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                         AND YTRTEMP_ESTADO = 'A'
                         AND YTRTEMP_USUARIO =
                             ky_json.campo(jsonObj, 'usua_id')
                         AND YTRTEMP_PLAN_PROC_CODE =
                             ky_json.campo(jsonObj, 'plan_proc_code')
                         AND YTRTEMP_PLAN_SEQ =
                             ky_json.campo(jsonObj, 'plan_seq')
                         AND YTRTEMP_CARRERA = V_CARRERA_USUA
                         AND YTRTEMP_PROGRAMA = V_NIVEL_1
                         AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                    
                    ELSE
                    
                      V_YTRTEMP_JSON_CAMPOS_DINA := empty_clob();
                    
                    END IF;
                    /*
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.VALOR_DEFECTO);
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(jsonObj, 'usua_id') );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.CAME_CODE );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(jsonObj, 'plan_proc_code') );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(jsonObj, 'plan_seq') );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_CARRERA_USUA );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_NIVEL_1 );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_CAMP_CODE_1 );*/
                  
                    IF V_YTRTEMP_JSON_CAMPOS_DINA <> empty_clob() THEN
                    
                      V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                            '[',
                                                            '');
                      V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                            ']',
                                                            '');
                    
                      json_DATA_DINAM := json(V_YTRTEMP_JSON_CAMPOS_DINA);
                    
                      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(V_YTRTEMP_JSON_CAMPOS_DINA, C_CAMPOS_REC.CODE));
                    
                      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_YTRTEMP_JSON_CAMPOS_DINA);
                    
                      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(json_DATA_DINAM, C_CAMPOS_REC.CODE));
                    
                      v_encontro := INSTR(ky_json.campo(json_DATA_DINAM,
                                                        C_CAMPOS_REC.CODE),
                                          '>');
                    
                      V_VALOR3 := '';
                      select substr(ky_json.campo(json_DATA_DINAM,
                                                  C_CAMPOS_REC.CODE),
                                    1,
                                    v_encontro - 1),
                             substr(ky_json.campo(json_DATA_DINAM,
                                                  C_CAMPOS_REC.CODE),
                                    v_encontro + 1)
                        INTO V_VALOR1, v_valor2
                        from dual;
                    
                      INSERT INTO COMUMGR.YTRVAMD
                        (YTRVAMD_DOCU_CODE,
                         YTRVAMD_DOCU_SEQ,
                         YTRVAMD_CAME_CODE,
                         YTRVAMD_NOM_CAMPO,
                         YTRVAMD_FECHA_ACTIVIDAD,
                         YTRVAMD_USUA_ID,
                         YTRVAMD_VALOR,
                         YTRVAMD_CAME_ID_CAMPO,
                         YTRVAMD_CODE,
                         YTRVAMD_PLCA_SEQ,
                         YTRVAMD_VALOR1,
                         YTRVAMD_ORDEN,
                         YTRVAMD_CONTROL,
                         YTRVAMD_REQUERIDO,
                         YTRVAMD_TIPO_CAMPO,
                         YTRVAMD_IND_VALOR,
                         YTRVAMD_EN_MODAL)
                      VALUES
                        (V_CODEDOC,
                         1,
                         C_CAMPOS_REC.CAME_CODE,
                         C_CAMPOS_REC.NOM_CAMPO,
                         SYSDATE,
                         ky_json.campo(jsonObj, 'usua_id'),
                         V_VALOR1,
                         C_CAMPOS_REC.ID_CAMPO,
                         C_CAMPOS_REC.CODE,
                         C_CAMPOS_REC.SEQ,
                         V_VALOR2,
                         C_CAMPOS_REC.ORDEN,
                         C_CAMPOS_REC.CONTROL,
                         C_CAMPOS_REC.REQUERIDO,
                         C_CAMPOS_REC.TIPO_CAMPO,
                         C_CAMPOS_REC.YTRCAME_IND_VALOR,
                         'S');
                    
                      /*
                      UPDATE COMUMGR.YTRTEMP SET YTRTEMP_FECHA_REG_DOCUMENTO = SYSDATE, YTRTEMP_OBSERVACIONES = 'REGISTRO DOCUMENTO' , YTRTEMP_ESTADO = 'E'
                         WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                         AND YTRTEMP_PLAN_PROC_CODE = ky_json.campo(jsonObj, 'plan_proc_code') AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
                         AND YTRTEMP_CARRERA = V_CARRERA_USUA AND YTRTEMP_PROGRAMA = V_NIVEL_1 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1 ;*/
                    
                    END IF;
                  
                  ELSE
                  
                    V_VALOR3 := '';
                  
                    select substr(ky_json.campo(json_DATA,
                                                C_CAMPOS_REC.CODE),
                                  1,
                                  v_encontro - 1),
                           substr(ky_json.campo(json_DATA,
                                                C_CAMPOS_REC.CODE),
                                  v_encontro + 1)
                      INTO V_VALOR1, v_valor2
                      from dual;
                  
                    if C_CAMPOS_REC.YTRCAME_IND_VALOR = 'S' THEN
                    
                      SELECT YTRVACA_VALOR
                        INTO V_VALOR3
                        FROM COMUMGR.YTRVACA
                       WHERE YTRVACA_CODE = V_VALOR1;
                    
                    END IF;
                  
                    INSERT INTO COMUMGR.YTRVAMD
                      (YTRVAMD_DOCU_CODE,
                       YTRVAMD_DOCU_SEQ,
                       YTRVAMD_CAME_CODE,
                       YTRVAMD_NOM_CAMPO,
                       YTRVAMD_FECHA_ACTIVIDAD,
                       YTRVAMD_USUA_ID,
                       YTRVAMD_VALOR,
                       YTRVAMD_CAME_ID_CAMPO,
                       YTRVAMD_CODE,
                       YTRVAMD_PLCA_SEQ,
                       YTRVAMD_VALOR1,
                       YTRVAMD_ORDEN,
                       YTRVAMD_CONTROL,
                       YTRVAMD_REQUERIDO,
                       YTRVAMD_TIPO_CAMPO,
                       YTRVAMD_IND_VALOR,
                       YTRVAMD_VALOR_DEFECTO)
                    VALUES
                      (V_CODEDOC,
                       1,
                       C_CAMPOS_REC.CAME_CODE,
                       C_CAMPOS_REC.NOM_CAMPO,
                       SYSDATE,
                       ky_json.campo(jsonObj, 'usua_id'),
                       V_VALOR1,
                       C_CAMPOS_REC.ID_CAMPO,
                       C_CAMPOS_REC.CODE,
                       C_CAMPOS_REC.SEQ,
                       V_VALOR2,
                       C_CAMPOS_REC.ORDEN,
                       C_CAMPOS_REC.CONTROL,
                       C_CAMPOS_REC.REQUERIDO,
                       C_CAMPOS_REC.TIPO_CAMPO,
                       C_CAMPOS_REC.YTRCAME_IND_VALOR,
                       V_VALOR3);
                  
                  END IF;
                
                END IF;
              
              END IF;
            
            ELSE
              --SI ES OCULTO    INSERTAMOS EL VALOR POR DEFECTO
              V_VALOR2 := '';
              --/// VAMOS A VERIFICAR SI ES CALCULADO
              IF (C_CAMPOS_REC.TIPO_CAMPO = 'A') THEN
                --//SI ES UN CAMPO CALCULADO
              
                V_JSON_CAMPO_CALCULADO := '{"p_carrera":"' ||
                                          V_CARRERA_USUA || '","usua_id":"' ||
                                          v_usua_id || '"}';
              
                V_CAMPO_CALCULADO := kyt_ejecutor.EJECUTOR(C_CAMPOS_REC.VALOR_DEFECTO,
                                                           P_DATA);
              
                IF V_CAMPO_CALCULADO = 'ERR' THEN
                
                  --LO QUITAMOS DE LA FUNCION MERITO PORUQE OCASIONABA QUE NO ENTRE EL ERRROR
                  --comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('ORDEN-MERI','EC','TD','DO','KYG_UTILIDADES.FYG_MERITO', P_DATA || SQLERRM ,V_USUA_ID,'');
                
                  V_MSG_GLOBAL := 'ERP-ERR AL GENERAR INFORMACION ADICIONAL ( ADI )' ||
                                  P_DATA;
                  RAISE exp_CAMPO_CALCULADO;
                END IF;
              
                IF V_CAMPO_CALCULADO = 'Ninguno' THEN
                
                  --LO QUITAMOS DE LA FUNCION MERITO PORUQE OCASIONABA QUE NO ENTRE EL ERRROR
                  --comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('ORDEN-MERI','EC','TD','DO','KYG_UTILIDADES.FYG_MERITO', P_DATA || SQLERRM ,V_USUA_ID,'');
                
                  V_MSG_GLOBAL := 'ERP-ERR AL GENERAR INFORMACION ADICIONAL - NINGUNO ( ADI )' ||
                                  P_DATA;
                  RAISE exp_CAMPO_CALCULADO;
                END IF;
              
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   V_CAMPO_CALCULADO,
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   V_VALOR2,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR);
              
              ELSE
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   C_CAMPOS_REC.VALOR_DEFECTO,
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   V_VALOR2,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR);
              END IF;
            
            END IF;
          
          END LOOP;
          CLOSE C_CAMPOS;
        END IF;
      
        --V_PRUEBA := -2;
        --REQUISITOS
      
        V_PRUEBA := 4;
      
        OPEN DT(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH DT
            INTO DT_ROW;
          EXIT WHEN DT%NOTFOUND;
        
          V_DETAIL_CODE    := NULL;
          V_PAGO_DESC      := NULL;
          V_PAGO_MONTO     := NULL;
          V_PAGO_LEVL_CODE := NULL;
          V_PAGO_BANCO     := '';
        
          SELECT TO_NUMBER(MAX(YTRREDO_CODE)) + 1
            INTO V_CODEREQ
            FROM YTRREDO;
        
          IF V_CODEREQ IS NULL THEN
            V_CODEREQ := 1;
          END IF;
        
          SELECT LPAD(V_CODEREQ, 8, '0') INTO V_CODEREQ_1 FROM DUAL;
        
          IF (DT_ROW.TIRE_CODE = 'POS') THEN
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO,
               YTRREDO_IND_OPCIONAL)
            VALUES
              (V_CODEREQ_1,
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Sera ejecutado autom?ticamente al aprobar el documento(sistema)',
               'V',
               sysdate,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO,
               DT_ROW.IND_OPCIONAL);
          
            --V_VALIDA_PC='0'  ===> INDICA QUE NO TIENE RESTRICCIONES
            --VALIDA LOS REQUISITOS DE PRECONDICION SI YA FUERON VALIDADOS
            --
          
          ELSIF (DT_ROW.TIRE_CODE = 'CON' AND V_VALIDA_PC = '0') THEN
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO,
               YTRREDO_IND_OPCIONAL)
            VALUES
              (V_CODEREQ_1,
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Aprobaci?n automatica(sistema)',
               'V',
               sysdate,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO,
               DT_ROW.IND_OPCIONAL);
          
          ELSE
          
            IF (DT_ROW.COMO_GMONTO = 'EM' AND DT_ROW.TIRE_CODE = 'REC') THEN
              IF LENGTH(ky_json.campo(jsonObj, 'p_monto1')) = 0 OR
                 ky_json.campo(jsonObj, 'p_monto1') IS NULL THEN
                V_MSG_GLOBAL := 'ERP-ERR NO SE ENVIO EL MONTO DEL REQUISITO';
                RAISE EXP_GLOBAL;
              END IF;
            
              V_MONTO_REQ := ky_json.campo(jsonObj, 'p_monto1');
            ELSIF (DT_ROW.COMO_GMONTO = 'CM' AND DT_ROW.TIRE_CODE = 'REC') THEN
              V_MONTO_REQ := KYG_UTILIDADES.FYG_MONTO_POR_CONCEPTO(DT_ROW.CONCEPTO_PAGO) *
                             V_NUM_COPIAS;
            END IF;
          
            --*******ADICIONAR FUNCIONALIDAD CAMPOS ADICIONALES
            IF ((DT_ROW.TIRE_CODE = 'ADJ' OR DT_ROW.TIRE_CODE = 'GEN') AND
               (LENGTH(NVL(DT_ROW.FUNCION, '0')) <= 1 AND
               LENGTH(NVL(DT_ROW.CAME_CODE, '0')) > 1 AND
               LENGTH(NVL(DT_ROW.CAME_VALOR, '0')) > 1)) THEN
              --************VAMOS A VERIFICAR QUE CAMPO CONDICIONAL SELECCIONO EL USUARIO
              SELECT COUNT(*)
                INTO CAMPOA
                FROM COMUMGR.YTRVAMD
               where YTRVAMD_DOCU_CODE = V_CODEDOC
                 AND YTRVAMD_DOCU_SEQ = 1
                 AND YTRVAMD_CAME_CODE = DT_ROW.CAME_CODE
                 AND YTRVAMD_VALOR = DT_ROW.CAME_VALOR;
            
              IF (CAMPOA > 0) THEN
              
                --APROBACION AUTOMATICA PARA CUALQUIER TIPO DE REQUISITO AGREGADO 27/09/2021 X JR
                --IF (DT_ROW.YTRPLRE_IND_AUTOA_GE = '1') THEN
              
                /*INSERT INTO YTRREDO (YTRREDO_CODE, YTBDOCU_CODE, YTBDOCU_SEQ,
                                YTRREDO_REQU_CODE, YTRREDO_DESCRIPCION, YTRREDO_USUA_ID,YTRREDO_FECHA_ACTIVIDAD, YTRREDO_IND_ADJ_VIRTUAL, YTRREDO_COMENTARIO,
                                YTRREDO_IND_ESTADO, YTRREDO_FECHA_ACEPTADO,YTRREDO_TIRE_CODE,YTRREDO_ORDEN,YTRREDO_METODO,YTRREDO_AYUDA,
                                YTRREDO_CONCEPTO_PAGO,YTRREDO_ADJ_NUMBER,YTRREDO_ADJ_FORMATO,YTRREDO_PROC_CODE,
                                YTRREDO_CM,YTRREDO_IND_FVALIDA,YTRREDO_MONTO,YTRREDO_IND_OPCIONAL)
                VALUES (V_CODEREQ_1, V_CODEDOC, 1,DT_ROW.CODE,DT_ROW.DESCRIPCION,ky_json.campo(jsonObj, 'usua_id'),
                        SYSDATE, DT_ROW.ADJUNTAR,'Aprobaci?n automatica(sistema)',  'V',sysdate,DT_ROW.TIRE_CODE,DT_ROW.ORDEN,DT_ROW.FUNCION,
                        DT_ROW.AYUDA,DT_ROW.CONCEPTO_PAGO,DT_ROW.ADJ_NUM,DT_ROW.ADJ_FORMATO,DT_ROW.PROC_CODE,
                        DT_ROW.YTVREQU_CM,DT_ROW.YTVREQU_IND_FVALIDA,V_MONTO_REQ,DT_ROW.IND_OPCIONAL);*/
              
                --ELSE
              
                INSERT INTO YTRREDO
                  (YTRREDO_CODE,
                   YTBDOCU_CODE,
                   YTBDOCU_SEQ,
                   YTRREDO_REQU_CODE,
                   YTRREDO_DESCRIPCION,
                   YTRREDO_USUA_ID,
                   YTRREDO_FECHA_ACTIVIDAD,
                   YTRREDO_IND_ADJ_VIRTUAL,
                   YTRREDO_COMENTARIO,
                   YTRREDO_IND_ESTADO,
                   YTRREDO_FECHA_ACEPTADO,
                   YTRREDO_TIRE_CODE,
                   YTRREDO_ORDEN,
                   YTRREDO_METODO,
                   YTRREDO_AYUDA,
                   YTRREDO_CONCEPTO_PAGO,
                   YTRREDO_ADJ_NUMBER,
                   YTRREDO_ADJ_FORMATO,
                   YTRREDO_PROC_CODE,
                   YTRREDO_CM,
                   YTRREDO_IND_FVALIDA,
                   YTRREDO_MONTO,
                   YTRREDO_IND_OPCIONAL)
                VALUES
                  (V_CODEREQ_1,
                   V_CODEDOC,
                   1,
                   DT_ROW.CODE,
                   DT_ROW.DESCRIPCION,
                   ky_json.campo(jsonObj, 'usua_id'),
                   SYSDATE,
                   DT_ROW.ADJUNTAR,
                   'Pendiente',
                   'P',
                   null,
                   DT_ROW.TIRE_CODE,
                   DT_ROW.ORDEN,
                   DT_ROW.FUNCION,
                   DT_ROW.AYUDA,
                   DT_ROW.CONCEPTO_PAGO,
                   DT_ROW.ADJ_NUM,
                   DT_ROW.ADJ_FORMATO,
                   DT_ROW.PROC_CODE,
                   DT_ROW.YTVREQU_CM,
                   DT_ROW.YTVREQU_IND_FVALIDA,
                   V_MONTO_REQ,
                   DT_ROW.IND_OPCIONAL);
              
                --END IF;
              
              END IF;
            ELSE
              --**** SI SON DE TIPO ADJUNTO Y HAY FUNCION
              IF ((DT_ROW.TIRE_CODE = 'ADJ' OR DT_ROW.TIRE_CODE = 'GEN') AND
                 LENGTH(NVL(DT_ROW.FUNCION, '0')) > 1) THEN
              
                V_DATA_JSON := '{"p_carrera":"' || V_CARRERA_USUA ||
                               '","p_campo":"' || dt_row.CAME_CODE || '"}';
                IF kyt_ejecutor.EJECUTOR(DT_ROW.FUNCION, V_DATA_JSON) = '1' THEN
                
                  INSERT INTO YTRREDO
                    (YTRREDO_CODE,
                     YTBDOCU_CODE,
                     YTBDOCU_SEQ,
                     YTRREDO_REQU_CODE,
                     YTRREDO_DESCRIPCION,
                     YTRREDO_USUA_ID,
                     YTRREDO_FECHA_ACTIVIDAD,
                     YTRREDO_IND_ADJ_VIRTUAL,
                     YTRREDO_COMENTARIO,
                     YTRREDO_IND_ESTADO,
                     YTRREDO_FECHA_ACEPTADO,
                     YTRREDO_TIRE_CODE,
                     YTRREDO_ORDEN,
                     YTRREDO_METODO,
                     YTRREDO_AYUDA,
                     YTRREDO_CONCEPTO_PAGO,
                     YTRREDO_ADJ_NUMBER,
                     YTRREDO_ADJ_FORMATO,
                     YTRREDO_PROC_CODE,
                     YTRREDO_CM,
                     YTRREDO_IND_FVALIDA,
                     YTRREDO_MONTO,
                     YTRREDO_IND_OPCIONAL)
                  VALUES
                    (V_CODEREQ_1,
                     V_CODEDOC,
                     1,
                     DT_ROW.CODE,
                     DT_ROW.DESCRIPCION,
                     ky_json.campo(jsonObj, 'usua_id'),
                     SYSDATE,
                     DT_ROW.ADJUNTAR,
                     'Pendiente',
                     'P',
                     null,
                     DT_ROW.TIRE_CODE,
                     DT_ROW.ORDEN,
                     DT_ROW.FUNCION,
                     DT_ROW.AYUDA,
                     DT_ROW.CONCEPTO_PAGO,
                     DT_ROW.ADJ_NUM,
                     DT_ROW.ADJ_FORMATO,
                     DT_ROW.PROC_CODE,
                     DT_ROW.YTVREQU_CM,
                     DT_ROW.YTVREQU_IND_FVALIDA,
                     V_MONTO_REQ,
                     DT_ROW.IND_OPCIONAL);
                
                END IF;
              ELSE
              
                INSERT INTO YTRREDO
                  (YTRREDO_CODE,
                   YTBDOCU_CODE,
                   YTBDOCU_SEQ,
                   YTRREDO_REQU_CODE,
                   YTRREDO_DESCRIPCION,
                   YTRREDO_USUA_ID,
                   YTRREDO_FECHA_ACTIVIDAD,
                   YTRREDO_IND_ADJ_VIRTUAL,
                   YTRREDO_COMENTARIO,
                   YTRREDO_IND_ESTADO,
                   YTRREDO_FECHA_ACEPTADO,
                   YTRREDO_TIRE_CODE,
                   YTRREDO_ORDEN,
                   YTRREDO_METODO,
                   YTRREDO_AYUDA,
                   YTRREDO_CONCEPTO_PAGO,
                   YTRREDO_ADJ_NUMBER,
                   YTRREDO_ADJ_FORMATO,
                   YTRREDO_PROC_CODE,
                   YTRREDO_CM,
                   YTRREDO_IND_FVALIDA,
                   YTRREDO_MONTO,
                   YTRREDO_IND_OPCIONAL)
                VALUES
                  (V_CODEREQ_1,
                   V_CODEDOC,
                   1,
                   DT_ROW.CODE,
                   DT_ROW.DESCRIPCION,
                   ky_json.campo(jsonObj, 'usua_id'),
                   SYSDATE,
                   DT_ROW.ADJUNTAR,
                   'Pendiente',
                   'P',
                   null,
                   DT_ROW.TIRE_CODE,
                   DT_ROW.ORDEN,
                   DT_ROW.FUNCION,
                   DT_ROW.AYUDA,
                   DT_ROW.CONCEPTO_PAGO,
                   DT_ROW.ADJ_NUM,
                   DT_ROW.ADJ_FORMATO,
                   DT_ROW.PROC_CODE,
                   DT_ROW.YTVREQU_CM,
                   DT_ROW.YTVREQU_IND_FVALIDA,
                   V_MONTO_REQ,
                   DT_ROW.IND_OPCIONAL);
              
              END IF;
            END IF;
          
            --************FIN CAMPOS ADICIONALES
          END IF;
        
          --//////////////////SI ES RECIBO DE PAGO Y ES NECESARIO ADJUNATR EL PAGO PARA SOLICITAR EL PROCESO
        
          IF DT_ROW.IND_SOLIC_ACD = '1' AND DT_ROW.TIRE_CODE = 'REC' THEN
            V_RECIBO_PAGO := ky_json.campo(jsonObj, 'p_recibo1');
            IF LENGTH(V_RECIBO_PAGO) = 0 OR V_RECIBO_PAGO IS NULL THEN
              V_MSG_GLOBAL := 'ERP-ERR DEBES ADJUNTAR EL RECIBO PARA ' ||
                              DT_ROW.DESCRIPCION || ' RECIBO ' ||
                              V_RECIBO_PAGO;
              RAISE EXP_GLOBAL;
            
            ELSE
              --///////VAMOS A VERIFICAR SI EL RECIBO ESTA DISPONIBLE Y ES EL CORRECTO PARA EL REQUISITO
            
              --///VERIFICAMOS SI TIENE QUE ESTAR PAGADO
              IF (DT_ROW.IND_PD = 1) THEN
                --TIENE QUE ESTAR PAGADO
                KYT_DOCU_DOCU_PP_PAGO_REQ(V_CODEDOC,
                                          '1',
                                          V_CODEREQ_1,
                                          'REQU',
                                          ky_json.campo(jsonObj,
                                                        'p_recibo1'),
                                          ky_json.campo(jsonObj, 'usua_id'),
                                          'ADJUNTADO DESDE AULA',
                                          DT_ROW.IND_AUTOA,
                                          V_MSG_GLOBAL);
              ELSE
                --SE ACEPTA Y SOLO DEBE ESTAR SEMBRADO COMO DEUDA
                KYT_DOCU_DOCU_PP_PAGO_REQ_D(V_CODEDOC,
                                            '1',
                                            V_CODEREQ_1,
                                            'REQU',
                                            ky_json.campo(jsonObj,
                                                          'p_recibo1'),
                                            ky_json.campo(jsonObj,
                                                          'usua_id'),
                                            'ADJUNTADO DESDE AULA',
                                            DT_ROW.IND_AUTOA,
                                            V_MSG_GLOBAL);
              END IF;
              IF V_MSG_GLOBAL != 'OK' THEN
                V_MSG_GLOBAL := V_MSG_GLOBAL;
                RAISE EXP_GLOBAL;
              END IF;
            
            END IF;
          END IF;
        
          --///////////////////////////////////////////////////////////////////////////////////////
          --///////////////NUEVO PARA ADJUNTAR PLANTILLA DE CONSTANCIA
          --INSERTA EN APAD EL REQUERIMIENTO DE DOCUMENTOS ADJUNTOS SI ES TIPO CONSTANCIA
        
          IF DT_ROW.TIRE_CODE = 'CNS' THEN
            SELECT YTRPLAN_PLANTILLA, YTRPLAN_TITULO
              INTO V_CONS_PLANTILLA, V_CONS_NOM
              FROM COMUMGR.YTRPLAN
             WHERE YTRPLAN_PROC_CODE || '-' || YTRPLAN_SEQ =
                   DT_ROW.PROC_CODE;
          
            /*V_CONS_NOM VARCHAR2(300);
            V_CONS_PLANTILLA CLOB;
            V_APAD_MAX INT;*/
            SELECT NVL(MAX(YTRAPAD_SEQ), 0)
              INTO V_APAD_MAX
              FROM COMUMGR.YTRAPAD
             WHERE YTRAPAD_ADJU_CODE = '1'; --1 NOS INDICA QUE VA UTILIZAR DOC COMO REFERENCIA
          
            INSERT INTO COMUMGR.YTRAPAD
              (YTRAPAD_ADJU_CODE,
               YTRAPAD_APPL_CODE,
               YTRAPAD_APPL_REFERENCIA,
               YTRAPAD_FECHA_ACTIVIDAD,
               YTRAPAD_USUA_ID,
               YTRAPAD_IND_ESTADO,
               YTRAPAD_CONTENIDO,
               YTRAPAD_URL,
               YTRAPAD_SEQ,
               YTRAPAD_NOMBRE)
            VALUES
              (1,
               V_CODEDOC || '-1-' || V_CODEREQ_1,
               'DOCDOC',
               SYSDATE,
               ky_json.campo(jsonObj, 'usua_id'),
               'A',
               V_CONS_PLANTILLA,
               '',
               V_APAD_MAX + 1,
               V_CONS_NOM);
          
          END IF;
        
          --,YTVREQU_ADJ_NUM ADJ_NUM,YTVREQU_ADJ_FORMATO ADJ_FORMATO
        
          --INSERTAMOS EL PAGO EN LA TABLA TEMPORAL
        
          /*   IF(DT_ROW.TIRE_CODE='REC' AND DT_ROW.CONCEPTO_PAGO IS NOT NULL) THEN
          
                            --SELECT YTBPABA_SEQ INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
                            SELECT NVL(MAX(YTBPABA_SEQ),0)+1 INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
          
                            --V_NUM_COPIAS  NUMERO DE COPIAS HAY QUE MULTIPLICAR POR EL COSTO PARA
                            --V_CAMP_CODE EL CAMPUS PARA SACAR EL CONCEPTO DE PAGO
                            select TBBDETC_DESC,TBBDETC_AMOUNT,TBBDETC_DCAT_CODE,TBBDETC_LEVL_CODE INTO V_PAGO_DESC,V_PAGO_MONTO,V_PAGO_CATE,V_PAGO_LEVL_CODE
                            from tbbdetc@PROD.INT.UPAO.EDU.PE
                            where tbbdetc_detail_code = DT_ROW.CONCEPTO_PAGO;
          
          
                            V_PERIODO_PAGO:=KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_PAGO_LEVL_CODE);
          
                            IF V_PERIODO_PAGO=0 THEN
                                RAISE EXP_PER_PAGO;
                            END IF;
          
          
                            INSERT INTO COMUMGR.YTBPABA (
                               YTBPABA_DOCU_CODE, YTBPABA_DOCU_SEQ, YTBPABA_SEQ,
                               YTBPABA_FECHA_ACTIVIDAD, YTBPABA_MONTO, YTBPABA_CAMPUS,
                               YTBPABA_CODE_DETALLE, YTBPABA_IND_ESTADO, YTBPABA_FECHA_PAGO,
                               YTBPABA_USUA_ID, YTBPABA_USUA_PIDM, YTBPABA_CODE_DETALLE_DESC,YTBPABA_CODE_DETALLE_CATE,YTBPABA_TERM_CODE, YTBPABA_FECHA_INI,
                               YTBPABA_FECHA_FIN, YTBPABA_NUM_DOC_QPAGO, YTBPABA_SEM_ANNO)
                            VALUES ( V_CODEDOC, 1, V_SEQ_PABA, SYSDATE, V_PAGO_MONTO, V_CAMP_CODE, DT_ROW.CONCEPTO_PAGO, 'P', NULL,
                             v_usua_id, V_PIDM, V_PAGO_DESC,V_PAGO_CATE,V_PERIODO_PAGO,SYSDATE,SYSDATE+20,NULL,TO_CHAR(SYSDATE,'WW')||TO_CHAR(SYSDATE,'YY'));
          
          END IF;*/
        
          --PARA PAGOS EN BANCO
          IF (DT_ROW.TIRE_CODE = 'REC' AND V_TIPODOC <> '06' AND
             DT_ROW.IND_SOLIC_ACD = '0' AND DT_ROW.DONDE_VALIDA = '0') THEN
            --06 ::> DOCUMENTOS SIN FORMATO NO ENVIARPAGO AL BANCO
          
            --SELECT YTBPABA_SEQ INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
            ---SELECT NVL(MAX(YTBPABA_SEQ),0)+1 INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
          
            --V_NUM_COPIAS  NUMERO DE COPIAS HAY QUE MULTIPLICAR POR EL COSTO PARA
            --V_CAMP_CODE EL CAMPUS PARA SACAR EL CONCEPTO DE PAGO
          
            /* select TBBDETC_DESC,TBBDETC_AMOUNT,TBBDETC_DCAT_CODE,TBBDETC_LEVL_CODE INTO V_PAGO_DESC,V_PAGO_MONTO,V_PAGO_CATE,V_PAGO_LEVL_CODE
            from tbbdetc@PROD.INT.UPAO.EDU.PE
            where tbbdetc_detail_code = DT_ROW.CONCEPTO_PAGO;*/
          
            OPEN C_CP(DT_ROW.CODE, V_CAMP_CODE);
            FETCH C_CP
              INTO V_DETAIL_CODE,
                   V_PAGO_DESC,
                   V_PAGO_MONTO,
                   V_PAGO_LEVL_CODE;
            CLOSE C_CP;
          
            IF V_DETAIL_CODE IS NULL THEN
              --//CONCEPTOS DE PAGO NO FUERON CONFIGURADOS
              RAISE EXP_CP;
            END IF;
          
            IF V_PAGO_LEVL_CODE = '0' THEN
              V_PAGO_LEVL_CODE := 'UG';
            END IF;
            V_PERIODO_PAGO := NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_LEVL_CODE),
                                  0);
          
            IF V_PERIODO_PAGO = 0 THEN
              RAISE EXP_PER_PAGO;
            END IF;
          
            /*INSERT INTO COMUMGR.YTBPABA (
               YTBPABA_DOCU_CODE, YTBPABA_DOCU_SEQ, YTBPABA_SEQ,
               YTBPABA_FECHA_ACTIVIDAD, YTBPABA_MONTO, YTBPABA_CAMPUS,
               YTBPABA_CODE_DETALLE, YTBPABA_IND_ESTADO, YTBPABA_FECHA_PAGO,
               YTBPABA_USUA_ID, YTBPABA_USUA_PIDM, YTBPABA_CODE_DETALLE_DESC,YTBPABA_CODE_DETALLE_CATE,YTBPABA_TERM_CODE, YTBPABA_FECHA_INI,
               YTBPABA_FECHA_FIN, YTBPABA_NUM_DOC_QPAGO, YTBPABA_SEM_ANNO)
            VALUES ( V_CODEDOC, 1, V_SEQ_PABA, SYSDATE, V_PAGO_MONTO, V_CAMP_CODE, DT_ROW.CONCEPTO_PAGO, 'P', NULL,
             v_usua_id, V_PIDM, V_PAGO_DESC,V_PAGO_CATE,V_PERIODO_PAGO,SYSDATE,SYSDATE+20,NULL,TO_CHAR(SYSDATE,'WW')||TO_CHAR(SYSDATE,'YY'));
             */
          
            /*INSERTAR EN TABLA DE PAGOS A BANCO*/
            --TZRPADH_TIPO=3 TRAMITE DOCUMENTARIO
          
            --SELECT NVL(MAX(TZRPADH_CODE),1) INTO V_SEQ_TZRPADH FROM  TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE;
          
            /*procedure PYG_CARGO_TRAMITE(P_CODE IN OUT NUMBER,P_TIPO IN NUMBER,P_PIDM  IN NUMBER , P_DETAIL_CODE IN VARCHAR2  ,
            P_INI_DATE  IN DATE ,P_FIN_DATE IN DATE,P_VIG_DATE IN DATE      ,
            P_TERM_CODE IN VARCHAR2, P_CAMP_CODE IN VARCHAR2, P_LEVL_CODE IN VARCHAR2,P_USER IN VARCHAR2,P_REDO_CODE IN VARCHAR2,P_NUM_COPIA IN INTEGER,
            P_DOCU_CODE VARCHAR2,P_DOCU_SEQ INTEGER,V_MSG OUT varchar2)*/
          
            --el usuario cuenta con 5 dias para realizar pago de lo contario el documento debera ser archivado
          
            --////////////////SACANDO VALOR DE PAGO EN DIAS EN BANCO
            V_VPARAMETRO := KYG_UTILIDADES.FYS_DAME_PARAMETRO('T04');
          
            IF (V_VPARAMETRO = 'SPXXX') THEN
              --///INDICA QUE PARAMETRO NO ESTA CONFIGURADO APLICARA 5 DIAS POR DEFECTO
              V_VPARAMETRO := 5;
            END IF;
          
            BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_TRAMITE@PROD.INT.UPAO.EDU.PE(V_PAGO_BANCO,
                                                                                    V_YTRPLAN_TIPO_ANTICIPO,
                                                                                    V_PIDM,
                                                                                    V_DETAIL_CODE,
                                                                                    TO_DATE(KYG_UTILIDADES.FYS_DAME_PARAMETRO('T07'),
                                                                                            'DD/MM/YYYY'),
                                                                                    TO_DATE(TO_CHAR(SYSDATE +
                                                                                                    V_VPARAMETRO,
                                                                                                    'DD/MM/YYYY')),
                                                                                    TO_DATE(TO_CHAR(SYSDATE +
                                                                                                    V_VPARAMETRO,
                                                                                                    'DD/MM/YYYY')),
                                                                                    V_PERIODO_PAGO,
                                                                                    V_CAMP_CODE,
                                                                                    V_LEVL_CODE,
                                                                                    v_usua_id,
                                                                                    V_CODEREQ_1,
                                                                                    V_NUM_COPIAS,
                                                                                    V_CODEDOC,
                                                                                    1,
                                                                                    V_MONTO_REQ,
                                                                                    'REQ',
                                                                                    V_MSG_BANCO);
          
            -- IF V_MSG_BANCO='OK' THEN
            --//////////////////////////////////////////////
            -- INSERTAR DETALLE DE PAGO DE TR?MITE
          
            -- ELSE
            --      RAISE EXP_PAGO_BANCO;
            -- END IF;
          
            IF V_MSG_BANCO <> 'OK' THEN
              RAISE EXP_PAGO_BANCO;
            ELSE
              --/// SE ACTUALIZA EL REQUERIMIENTO CON EL CODIGO DE PAGO DEL BANCO
              UPDATE COMUMGR.YTRREDO
                 SET YTRREDO_PADH_CODE = V_PAGO_BANCO
               WHERE YTRREDO_CODE = V_CODEREQ_1;
            END IF;
          
            /*INSERT INTO TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE (
               TZRPADH_CODE, TZRPADH_TIPO, TZRPADH_PIDM,
               TZRPADH_DETAIL_CODE, TZRPADH_INI_DATE, TZRPADH_FIN_DATE,
               TZRPADH_VIG_DATE, TZRPADH_TERM_CODE, TZRPADH_CAMP_CODE,
               TZRPADH_LEVL_CODE, TZRPADH_ACTIVITY_DATE, TZRPADH_USER,
               TZRPADH_STATUS, TZRPADH_RECEIPT_NUMBER)
            VALUES (BANINST1.SEQ_TZRPADH_CODE, 3, V_PIDM , V_DETAIL_CODE, SYSDATE, SYSDATE+20,
             SYSDATE+21, V_PERIODO_PAGO,V_CAMP_CODE, V_PAGO_LEVL_CODE, SYSDATE, v_usua_id,1, NULL);*/
          
          END IF;
        
          --FIN DE REGISTRO DE PAGO
        
        END LOOP;
        CLOSE DT;
      
        V_PRUEBA := 11926;
      
        --PARA DOCUMENTOS SIN FORMATO:::> VERIFICAR SU REQUISITO DE PAGO
      
        IF V_TIPODOC = '06' THEN
        
          V_DETAIL_CODE    := NULL;
          V_PAGO_DESC      := NULL;
          V_PAGO_MONTO     := NULL;
          V_PAGO_LEVL_CODE := NULL;
        
          V_MONTO_TOT_PAG := NULL;
        
          IF v_tasunto <> '0000' THEN
          
            SELECT TO_NUMBER(MAX(YTRREDO_CODE)) + 1
              INTO V_CODEREQ
              FROM YTRREDO;
          
            IF V_CODEREQ IS NULL THEN
              V_CODEREQ := 1;
            END IF;
          
            SELECT LPAD(V_CODEREQ, 8, '0') INTO V_CODEREQ_1 FROM DUAL;
          
            --V_CODE_REQ:=v_tasunto;
          
            -- C_CP_MONTO(v_tasunto) V_MONTO_TOT_PAG
          
            SELECT NVL(YTRASUN_REQU_CODE, -2)
              INTO V_CODE_RP
              FROM YTRASUN
             WHERE YTRASUN_CODE = v_tasunto;
          
            OPEN C_CP_MONTO(V_CODE_RP, V_CAMP_CODE);
            FETCH C_CP_MONTO
              INTO V_MONTO_TOT_PAG;
            CLOSE C_CP_MONTO;
          
            IF V_MONTO_TOT_PAG IS NULL THEN
              RAISE EXP_CP_SF;
            ELSE
              UPDATE YTBDOCU
                 SET YTBDOCU_COSTO = V_MONTO_TOT_PAG
               WHERE YTBDOCU_CODE = V_CODEDOC;
            END IF;
          
            OPEN DT_REQ(V_CODE_RP);
            LOOP
              FETCH DT_REQ
                INTO DT_REQ_ROW;
              EXIT WHEN DT_REQ%NOTFOUND;
              INSERT INTO YTRREDO
                (YTRREDO_CODE,
                 YTBDOCU_CODE,
                 YTBDOCU_SEQ,
                 YTRREDO_REQU_CODE,
                 YTRREDO_DESCRIPCION,
                 YTRREDO_USUA_ID,
                 YTRREDO_FECHA_ACTIVIDAD,
                 YTRREDO_IND_ADJ_VIRTUAL,
                 YTRREDO_COMENTARIO,
                 YTRREDO_IND_ESTADO,
                 YTRREDO_FECHA_ACEPTADO,
                 YTRREDO_TIRE_CODE,
                 YTRREDO_ORDEN,
                 YTRREDO_METODO,
                 YTRREDO_AYUDA,
                 YTRREDO_CONCEPTO_PAGO,
                 YTRREDO_ADJ_NUMBER,
                 YTRREDO_ADJ_FORMATO,
                 YTRREDO_PROC_CODE,
                 YTRREDO_IND_OPCIONAL)
              VALUES
                (V_CODEREQ_1,
                 V_CODEDOC,
                 1,
                 DT_REQ_ROW.CODE,
                 DT_REQ_ROW.DESCRIPCION,
                 ky_json.campo(jsonObj, 'usua_id'),
                 SYSDATE,
                 DT_REQ_ROW.ADJUNTAR,
                 'Pendiente',
                 'P',
                 null,
                 DT_REQ_ROW.TIRE_CODE,
                 (SELECT NVL(MAX(YTRREDO_ORDEN) + 1, 1)
                    FROM COMUMGR.YTRREDO
                   WHERE YTBDOCU_CODE = V_CODEDOC),
                 DT_REQ_ROW.FUNCION,
                 DT_REQ_ROW.AYUDA,
                 DT_REQ_ROW.CONCEPTO_PAGO,
                 DT_REQ_ROW.ADJ_NUM,
                 DT_REQ_ROW.ADJ_FORMATO,
                 DT_REQ_ROW.PROC_CODE,
                 DT_ROW.IND_OPCIONAL);
            END LOOP;
            CLOSE DT_REQ;
          
            --YTVREQU_ADJ_NUM ADJ_NUM,YTVREQU_ADJ_FORMATO ADJ_FORMATO
            /*
            
            --PARA PAGOS EN BANCO
                       --  IF(DT_ROW.TIRE_CODE='REC' AND V_TIPODOC <>'06') THEN  --06 ::> DOCUMENTOS SIN FORMATO NO ENVIARPAGO AL BANCO
            
                                                OPEN  C_CP(DT_ROW.CODE, V_CAMP_CODE);
                                                 FETCH C_CP INTO V_DETAIL_CODE,V_PAGO_DESC,V_PAGO_MONTO,V_PAGO_LEVL_CODE;
                                                 CLOSE C_CP;
            
                                                 IF V_DETAIL_CODE IS NULL THEN
                                                   --//CONCEPTOS DE PAGO NO FUERON CONFIGURADOS
                                                   RAISE EXP_CP;
                                                 END IF;
            
            
                                             V_PERIODO_PAGO:=NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_LEVL_CODE),0);
            
                                             IF V_PERIODO_PAGO=0 THEN
                                             RAISE EXP_PER_PAGO;
                                             END IF;
            
                                          BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_TRAMITE@PROD.INT.UPAO.EDU.PE(V_PAGO_BANCO,3,V_PIDM,V_DETAIL_CODE,
                                           TO_CHAR(SYSDATE,'DD/MM/YYY'), SYSDATE+20,
                                          SYSDATE+21,V_PERIODO_PAGO,V_CAMP_CODE,V_LEVL_CODE,v_usua_id,V_CODEREQ_1,V_NUM_COPIAS,V_CODEDOC,1,V_MSG_BANCO);
                                           -- IF V_MSG_BANCO='OK' THEN
                                             --//////////////////////////////////////////////
                                             -- INSERTAR DETA LLE DE PAGO DE TR?MITE
                                           -- ELSE
                                           --      RAISE EXP_PAGO_BANCO;
                                           -- END IF;
                                           IF V_MSG_BANCO<>'OK' THEN
                                             RAISE EXP_PAGO_BANCO;
                                           ELSE
                                             --/// SE ACTUALIZA EL REQUERIMIENTO CON EL CODIGO DE PAGO DEL BANCO
                                              UPDATE COMUMGR.YTRREDO SET YTRREDO_PADH_CODE=V_PAGO_BANCO
                                              WHERE YTRREDO_CODE=V_CODEREQ_1;
                                           END IF;
            
                       --   END IF;
                       */
          END IF;
        
          --FIN DE REGISTRO DE PAGO
        
        END IF;
      
        --/////////////VERIFICAR SI YA NO HAY REQUSITOS PENDIENTES
        --////////////LO ENVIAMOS DIRECTO A TR?MITE
      
        SELECT COUNT(*)
          INTO V_FALTA_APROB
          FROM COMUMGR.YTRREDO
         WHERE YTBDOCU_CODE = V_CODEDOC
           AND YTRREDO_IND_ENV_USUA = 'N'
           AND YTRREDO_IND_FVALIDA = 0
           AND NOT YTRREDO_TIRE_CODE in
                (SELECT YTVTIRE_CODE
                      FROM COMUMGR.YTVTIRE
                     WHERE YTVTIRE_RESPONSABLE = 'UP'
                       AND YTVTIRE_IND_ESTADO = 'A');
        IF V_FALTA_APROB = 0 THEN
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE       = 'TR',
                 YTBDOCU_FECHA_RECEPCION = SYSDATE
           WHERE YTBDOCU_CODE = V_CODEDOC
             AND YTBDOCU_ESTA_CODE <> 'TR';
          -- AND YTBDOCU_USUA_ID=P_USUA_ID;
          --/////////PRIMERO INSERTAMOS EL ESTADO DE EVALUACI?N PARA SEGUIR LA REGLA DE ESTADOS
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'EV',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS(autom?tico)');
        
          --//////////ENVIAMOS A TRAMITE
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'TR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS(autom?tico)');
        
          --////////INSERTAMOS EL COMENTARIO
          INSERT INTO COMUMGR.YTRCOME
            (YTRCOME_CODE,
             YTRCOME_DOCU_CODE,
             YTRCOME_DOCU_SEQ,
             YTRCOME_FECHA_ACTIVIDAD,
             YTRCOME_USUA_ID,
             YTRCOME_TICO_CODE,
             YTRCOME_MENSAJE,
             YTRCOME_NOTI_CORREO,
             YTRCOME_USUA_NOMBRE)
          VALUES
            (SEQ_YTRCOME_CODE.NEXTVAL,
             V_CODEDOC,
             1,
             sysdate,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'USUA',
             '<span style="color:blue; font-weight:bold;">Documento fue enviado a Evaluaci?n de la unidad respectiva</span>',
             0,
             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                        'usua_id_reg')),
                                                           'X'));
        END IF;
      
        --/////////////////////////////////////////////GENERAR COLA DE APROBACIONES PARA DOCUMENTO.////////////////////////////////////////////////////
      
        /*CURSOR DT1(P_PROC_CODE VARCHAR2,P_SEQ VARCHAR2) IS
        SELECT  YTRPRCO_COLA_CODE ,YTRCODE_CODE,YTRCODE_ORGN_CODE ORGN,YTRCODE_COAS_CODE COAS,YTRCODE_DESCRIPCION DESCRIPCION,YTRCODE_SUBDENOMINACION SUBDENOMINACION,YTRCODE_NIVEL NIVEL
        FROM YTRPRCO ,YTRCODE
        WHERE  YTRPRCO_PLAN_PROC_CODE=P_PROC_CODE AND  YTRPRCO_PLAN_SEQ=P_SEQ
        AND YTRPRCO_COLA_CODE=YTRCODE_COLA_CODE AND YTRCODE_IND_ESTADO='A';*/
      
        V_FACTOR := 0;
        --V_VALOR_COLA ;
        V_VUELTA_COLA := 1;
      
        V_PRUEBA := 12088;
      
        OPEN DT1(v_PLAN_PROC_CODE, v_PLAN_SEQ);
        LOOP
          FETCH DT1
            INTO DT1_ROW;
          EXIT WHEN DT1%NOTFOUND;
        
          IF V_VUELTA_COLA <> 1 THEN
          
            IF V_VALOR_COLA = DT1_ROW.YTRPRCO_COLA_CODE THEN
              V_FACTOR := V_FACTOR + (DT1_ROW.NIVEL - 1);
            END IF;
            V_VALOR_COLA := DT1_ROW.YTRPRCO_COLA_CODE;
          ELSE
            V_VALOR_COLA := DT1_ROW.YTRPRCO_COLA_CODE;
          END IF;
          V_VUELTA_COLA := V_VUELTA_COLA + 1;
          --YTRPRCO_COLA_CODE ,YTRCODE_CODE
        
          IF (DT1_ROW.CONTENEDORA = 'N') THEN
            --ES UNA FIJA
          
            SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
              INTO V_CODEAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
               AND YTRAPDO_DOCU_SEQ = 1;
          
            IF V_CODEAPROB IS NULL THEN
              V_CODEAPROB := 1;
            END IF;
          
            SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
              INTO V_PROVEIDO, V_PROVEIDO_DESC
              FROM YTVPRVE
             WHERE YTVPRVE_CODE = DT1_ROW.PRVE_CODE;
          
            IF (V_VUELTA_DINAMICA > 0) THEN
              V_SUMA := V_VUELTA_DINAMICA - 1;
            ELSE
              V_SUMA := 0;
            END IF;
          
            V_METODO_APR := '';
            OPEN C_CACAP(v_plan_proc_code || '-' || v_PLAN_SEQ,
                         DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE);
            FETCH C_CACAP
              INTO V_METODO_APR;
            CLOSE C_CACAP;
          
            IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
            
              IF (V_TIPODOC = '02' OR V_TIPODOC = '05') THEN
              
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN,
                   YTRAPDO_FECHA_DERIVACION,
                   YTRAPDO_METODO,
                   YTRAPDO_IND_SALIDA,
                   YTRAPDO_CANTIDAD,
                   YTRAPDO_FORMATO,
                   YTRAPDO_CONTENEDORA,
                   YTRAPDO_COLA_CODE_PADRE,
                   YTRAPDO_NIVEL_COLA)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                   v_usua_reg,
                   DT1_ROW.ORGN,
                   DT1_ROW.COAS,
                   DT1_ROW.DESCRIPCION,
                   DT1_ROW.SUBDENOMINACION,
                   DT1_ROW.NIVEL + V_SUMA,
                   'A',
                   DT1_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   sysdate,
                   'aprobaci?n automatica',
                   SYSDATE,
                   DT1_ROW.ESTA_CODE_PASARA,
                   DT1_ROW.ESTA_CODE_REGRESA,
                   DT1_ROW.YTRCODE_TIAP_CODE,
                   DT1_ROW.UNID_CODE,
                   DT1_ROW.TIEMPO,
                   DT1_ROW.IND_ADJUNTO,
                   DT1_ROW.POSN,
                   SYSDATE,
                   V_METODO_APR,
                   DT1_ROW.SALIDA,
                   DT1_ROW.CANTIDAD,
                   DT1_ROW.FORMATO,
                   DT1_ROW.CONTENEDORA,
                   DT1_ROW.YTRPRCO_COLA_CODE,
                   DT1_ROW.NIVEL_COLA);
              
              ELSE
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN,
                   YTRAPDO_METODO,
                   YTRAPDO_IND_SALIDA,
                   YTRAPDO_CANTIDAD,
                   YTRAPDO_FORMATO,
                   YTRAPDO_CONTENEDORA,
                   YTRAPDO_COLA_CODE_PADRE,
                   YTRAPDO_NIVEL_COLA)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                   v_usua_reg,
                   DT1_ROW.ORGN,
                   DT1_ROW.COAS,
                   DT1_ROW.DESCRIPCION,
                   DT1_ROW.SUBDENOMINACION,
                   DT1_ROW.NIVEL + V_SUMA,
                   'A',
                   DT1_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   sysdate,
                   'aprobaci?n automatica',
                   SYSDATE,
                   DT1_ROW.ESTA_CODE_PASARA,
                   DT1_ROW.ESTA_CODE_REGRESA,
                   DT1_ROW.YTRCODE_TIAP_CODE,
                   DT1_ROW.UNID_CODE,
                   DT1_ROW.TIEMPO,
                   DT1_ROW.IND_ADJUNTO,
                   DT1_ROW.POSN,
                   V_METODO_APR,
                   DT1_ROW.SALIDA,
                   DT1_ROW.CANTIDAD,
                   DT1_ROW.FORMATO,
                   DT1_ROW.CONTENEDORA,
                   DT1_ROW.YTRPRCO_COLA_CODE,
                   DT1_ROW.NIVEL_COLA);
              
              END IF;
            
            ELSE
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_TIEMPO,
                 YTRAPDO_IND_ADJUNTO,
                 YTRAPDO_POSN_POSN,
                 YTRAPDO_METODO,
                 YTRAPDO_IND_SALIDA,
                 YTRAPDO_CANTIDAD,
                 YTRAPDO_FORMATO,
                 YTRAPDO_CONTENEDORA,
                 YTRAPDO_COLA_CODE_PADRE,
                 YTRAPDO_NIVEL_COLA)
              VALUES
                (V_CODEAPROB,
                 V_CODEDOC,
                 1,
                 DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                 NULL,
                 DT1_ROW.ORGN,
                 DT1_ROW.COAS,
                 DT1_ROW.DESCRIPCION,
                 DT1_ROW.SUBDENOMINACION,
                 DT1_ROW.NIVEL + V_SUMA,
                 'P',
                 DT1_ROW.PRVE_CODE,
                 V_PROVEIDO_DESC,
                 NULL,
                 'POR APROBAR',
                 SYSDATE,
                 DT1_ROW.ESTA_CODE_PASARA,
                 DT1_ROW.ESTA_CODE_REGRESA,
                 DT1_ROW.YTRCODE_TIAP_CODE,
                 DT1_ROW.UNID_CODE,
                 DT1_ROW.TIEMPO,
                 DT1_ROW.IND_ADJUNTO,
                 DT1_ROW.POSN,
                 V_METODO_APR,
                 DT1_ROW.SALIDA,
                 DT1_ROW.CANTIDAD,
                 DT1_ROW.FORMATO,
                 DT1_ROW.CONTENEDORA,
                 DT1_ROW.YTRPRCO_COLA_CODE,
                 DT1_ROW.NIVEL_COLA);
            END IF;
          
          ELSE
            --ES UNA COLA CONTENEDORA DINAMICA
          
            SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
              INTO V_CODEAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
               AND YTRAPDO_DOCU_SEQ = 1;
          
            IF V_CODEAPROB IS NULL THEN
              V_CODEAPROB := 1;
            END IF;
          
            --CONSULTAMOS SI TIENE CODIGO DE DERIVACION LO QUE SIGNIFICA QUE LA COLA NO SE CREARA A PARTIR DEL CENTROS DE ESTUDIOS SELECCIONADO EN LA PAGINA PRINCIPAL SINO DESDE
            --EL COMPONENTE SELECCIONADO EN LA PLANTILLA CAMPO DERIVAR
            SELECT YTRPLAN_DERIVAR
              INTO V_YTRPLAN_DERIVAR
              FROM YTRPLAN
             WHERE YTRPLAN_PROC_CODE =
                   ky_json.campo(jsonObj, 'plan_proc_code')
               AND YTRPLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq');
          
            --POR DEFECTO TODAS LAS PLANTILLAS ESTAN INICIALIZADAS CON -1 LAS QUE SON DIFERENTE DE -1 SE PROCEDE A REALIZAR LA SIGUIENTE LOGICA
            IF V_YTRPLAN_DERIVAR <> '-1' THEN
            
              SELECT COUNT(*)
                INTO v_encontro
                FROM COMUMGR.YTRTEMP
               WHERE YTRTEMP_ESTADO = 'A'
                 AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                 AND YTRTEMP_PLAN_PROC_CODE =
                     ky_json.campo(jsonObj, 'plan_proc_code')
                 AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
                 AND YTRTEMP_CARRERA = V_CARRERA_USUA
                 AND YTRTEMP_PROGRAMA = V_NIVEL_1
                 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
            
              IF v_encontro <> 0 THEN
              
                SELECT YTRTEMP_JSON_CAMPOS_DINAMICOS
                  INTO V_YTRTEMP_JSON_CAMPOS_DINA
                  FROM COMUMGR.YTRTEMP
                 WHERE YTRTEMP_ESTADO = 'A'
                   AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                   AND YTRTEMP_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRTEMP_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRTEMP_CARRERA = V_CARRERA_USUA
                   AND YTRTEMP_PROGRAMA = V_NIVEL_1
                   AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
              
              ELSE
              
                V_YTRTEMP_JSON_CAMPOS_DINA := empty_clob();
              
              END IF;
            
              IF V_YTRTEMP_JSON_CAMPOS_DINA <> empty_clob() THEN
              
                V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                      '[',
                                                      '');
                V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                      ']',
                                                      '');
              
                json_DATA_DINAM := json(V_YTRTEMP_JSON_CAMPOS_DINA);
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(V_YTRTEMP_JSON_CAMPOS_DINA, C_CAMPOS_REC.CODE));
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_YTRTEMP_JSON_CAMPOS_DINA);
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(json_DATA_DINAM, C_CAMPOS_REC.CODE));
              
                SELECT YTRPLCA_CAME_CODE || YTRPLCA_SEQ || '_' ||
                       YTRCAME_ID_CAMPO CODE
                  INTO V_CODIGO_CAME_CODE
                  FROM COMUMGR.YTRPLCA, COMUMGR.YTRCAME
                 WHERE YTRPLCA_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRPLCA_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRPLCA_IND_ESTADO = 'A'
                   AND YTRPLCA_CAME_CODE = V_YTRPLAN_DERIVAR
                   AND YTRPLCA_CAME_CODE = YTRCAME_CODE
                 ORDER BY YTRPLCA_ORDEN;
              
                v_encontro := INSTR(ky_json.campo(json_DATA_DINAM,
                                                  V_CODIGO_CAME_CODE),
                                    '>');
              
                select substr(ky_json.campo(json_DATA_DINAM,
                                            V_CODIGO_CAME_CODE),
                              1,
                              v_encontro - 1),
                       substr(ky_json.campo(json_DATA_DINAM,
                                            V_CODIGO_CAME_CODE),
                              v_encontro + 1)
                  INTO V_VALOR1, v_valor2
                  from dual;
              
                V_PARAMETRO := V_VALOR1;
              
                --OBTENER LA FACULTAD
                select distinct stvcoll_code
                  INTO V_FACULTAD
                  from smrprle@prod.int.upao.edu.pe,
                       sobcurr@prod.int.upao.edu.pe,
                       sorcmjr@prod.int.upao.edu.pe,
                       stvmajr@prod.int.upao.edu.pe,
                       stvcoll@prod.int.upao.edu.pe
                 where smrprle_program = sobcurr_program
                   and sobcurr_curr_rule = sorcmjr_curr_rule
                   and sorcmjr_majr_code = stvmajr_code
                   and sobcurr_coll_code = stvcoll_code
                   and sobcurr_levl_code = V_NIVEL_1
                   AND stvmajr_code = V_PARAMETRO
                --and stvcoll_code=p_cod_facul
                 order by stvmajr_desc;
              
              END IF;
            
            ELSE
            
              IF (LENGTH(V_ORG_USUA) > 0) THEN
                -- NOS INDICA QUE ES UN DOCUMENTO NETAMENTE ADMINISTRATIVO Y HAY QUE COGER LA COLA VARIABLE ADMINISTRATIVA
                V_PARAMETRO := V_ORG_USUA;
              END IF;
            
            END IF;
          
            --COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,P_PARAMETRO VARCHAR2,P_NIVEL INT)
            --VAMOS A BUSCAR LA COLA DINAMICA QUE SE ASIGNARA DE ACUERDO A LA ESCUELA
          
            /* OPEN DT1(v_PLAN_PROC_CODE,v_PLAN_SEQ);
            LOOP
             FETCH DT1 INTO DT1_ROW;
             EXIT WHEN DT1%NOTFOUND;
             */
          
            -- OPEN COLA_DINAMICA(DT1_ROW.PADRE,V_PARAMETRO,DT1_ROW.NIVEL);
          
            /*INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_PARAMETRO));
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_FACULTAD));
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), DT1_ROW.NIVEL);*/
          
            /*INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_PARAMETRO));
            
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_FACULTAD));
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), DT1_ROW.NIVEL);   */
          
            OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,
                               TRIM(V_PARAMETRO),
                               TRIM(V_FACULTAD),
                               DT1_ROW.NIVEL);
            -- OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,'ICSI',DT1_ROW.NIVEL);
            V_VUELTA_DINAMICA := 0;
            LOOP
              FETCH COLA_DINAMICA
                INTO COLA_DINAMICA_ROW;
              EXIT WHEN COLA_DINAMICA%NOTFOUND;
            
              SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                INTO V_PROVEIDO, V_PROVEIDO_DESC
                FROM YTVPRVE
               WHERE YTVPRVE_CODE = COLA_DINAMICA_ROW.PRVE_CODE;
            
              IF (V_VUELTA_DINAMICA = 0 AND V_ORGN_DINA IS NULL) THEN
                -- SACAMOS LA ORGANIZACI?N DE LA COLA DINAMICA PARA PODER GENERAR EL RECEPTOR PRINCIPAL
                V_ORGN_DINA := COLA_DINAMICA_ROW.COAS ||
                               COLA_DINAMICA_ROW.ORGN;
                V_PARA_DINA := COLA_DINAMICA_ROW.PARAMETRO;
              END IF;
            
              V_METODO_APR := '';
            
              OPEN C_CACAP(v_plan_proc_code || '-' || v_PLAN_SEQ,
                           COLA_DINAMICA_ROW.YTRCODE_CODE ||
                           COLA_DINAMICA_ROW.YTACOLA_CODE);
              FETCH C_CACAP
                INTO V_METODO_APR;
              CLOSE C_CACAP;
            
              IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                IF (V_TIPODOC = '02' OR V_TIPODOC = '05') THEN
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO,
                     YTRAPDO_POSN_POSN,
                     YTRAPDO_FECHA_DERIVACION,
                     YTRAPDO_METODO,
                     YTRAPDO_IND_SALIDA,
                     YTRAPDO_CANTIDAD,
                     YTRAPDO_FORMATO,
                     YTRAPDO_CONTENEDORA,
                     YTRAPDO_COLA_CODE_PADRE,
                     YTRAPDO_COLA_CODE_HIJO,
                     YTRAPDO_NIVEL_COLA)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     COLA_DINAMICA_ROW.YTRCODE_CODE ||
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     v_usua_reg,
                     COLA_DINAMICA_ROW.ORGN,
                     COLA_DINAMICA_ROW.COAS,
                     COLA_DINAMICA_ROW.DESCRIPCION,
                     COLA_DINAMICA_ROW.SUBDENOMINACION,
                     COLA_DINAMICA_ROW.NIVEL,
                     'A',
                     COLA_DINAMICA_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     sysdate,
                     'aprobaci?n automatica',
                     SYSDATE,
                     COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                     COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                     COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                     COLA_DINAMICA_ROW.UNID_CODE,
                     COLA_DINAMICA_ROW.TIEMPO,
                     COLA_DINAMICA_ROW.IND_ADJUNTO,
                     COLA_DINAMICA_ROW.POSN,
                     SYSDATE,
                     V_METODO_APR,
                     COLA_DINAMICA_ROW.SALIDA,
                     COLA_DINAMICA_ROW.CANTIDAD,
                     COLA_DINAMICA_ROW.FORMATO,
                     DT1_ROW.CONTENEDORA,
                     DT1_ROW.YTRPRCO_COLA_CODE,
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     COLA_DINAMICA_ROW.NIVEL_COLA);
                ELSE
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO,
                     YTRAPDO_POSN_POSN,
                     YTRAPDO_METODO,
                     YTRAPDO_IND_SALIDA,
                     YTRAPDO_CANTIDAD,
                     YTRAPDO_FORMATO,
                     YTRAPDO_CONTENEDORA,
                     YTRAPDO_COLA_CODE_PADRE,
                     YTRAPDO_COLA_CODE_HIJO,
                     YTRAPDO_NIVEL_COLA)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     COLA_DINAMICA_ROW.YTRCODE_CODE ||
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     v_usua_reg,
                     COLA_DINAMICA_ROW.ORGN,
                     COLA_DINAMICA_ROW.COAS,
                     COLA_DINAMICA_ROW.DESCRIPCION,
                     COLA_DINAMICA_ROW.SUBDENOMINACION,
                     COLA_DINAMICA_ROW.NIVEL,
                     'A',
                     COLA_DINAMICA_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     sysdate,
                     'aprobaci?n automatica',
                     SYSDATE,
                     COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                     COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                     COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                     COLA_DINAMICA_ROW.UNID_CODE,
                     COLA_DINAMICA_ROW.TIEMPO,
                     COLA_DINAMICA_ROW.IND_ADJUNTO,
                     COLA_DINAMICA_ROW.POSN,
                     V_METODO_APR,
                     COLA_DINAMICA_ROW.SALIDA,
                     COLA_DINAMICA_ROW.CANTIDAD,
                     COLA_DINAMICA_ROW.FORMATO,
                     DT1_ROW.CONTENEDORA,
                     DT1_ROW.YTRPRCO_COLA_CODE,
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     COLA_DINAMICA_ROW.NIVEL_COLA);
                END IF;
              ELSE
                --/////no inicia con una cola dinamica
                select max(nvl(YTRAPDO_nivel, 0)) + 1
                  into V_NIVEL_DIM
                  from YTRAPDO
                 where YTRAPDO_DOCU_CODE = V_CODEDOC
                   and YTRAPDO_DOCU_SEQ = 1; --scamos en siguiente nivel
              
                IF V_NIVEL_DIM IS NULL THEN
                  V_NIVEL_DIM := 1;
                END IF;
              
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN,
                   YTRAPDO_METODO,
                   YTRAPDO_IND_SALIDA,
                   YTRAPDO_CANTIDAD,
                   YTRAPDO_FORMATO,
                   YTRAPDO_CONTENEDORA,
                   YTRAPDO_COLA_CODE_PADRE,
                   YTRAPDO_COLA_CODE_HIJO,
                   YTRAPDO_NIVEL_COLA)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   COLA_DINAMICA_ROW.YTRCODE_CODE ||
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   NULL,
                   COLA_DINAMICA_ROW.ORGN,
                   COLA_DINAMICA_ROW.COAS,
                   COLA_DINAMICA_ROW.DESCRIPCION,
                   COLA_DINAMICA_ROW.SUBDENOMINACION,
                   V_NIVEL_DIM,
                   'P',
                   COLA_DINAMICA_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   NULL,
                   'POR APROBAR' || v_plan_proc_code || '-' || v_PLAN_SEQ || '/' ||
                   COLA_DINAMICA_ROW.YTRCODE_CODE ||
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   SYSDATE,
                   COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                   COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                   COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                   COLA_DINAMICA_ROW.UNID_CODE,
                   COLA_DINAMICA_ROW.TIEMPO,
                   COLA_DINAMICA_ROW.IND_ADJUNTO,
                   COLA_DINAMICA_ROW.POSN,
                   V_METODO_APR,
                   COLA_DINAMICA_ROW.SALIDA,
                   COLA_DINAMICA_ROW.CANTIDAD,
                   COLA_DINAMICA_ROW.FORMATO,
                   DT1_ROW.CONTENEDORA,
                   DT1_ROW.YTRPRCO_COLA_CODE,
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   COLA_DINAMICA_ROW.NIVEL_COLA);
              
                /* INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_TIEMPO,
                YTRAPDO_IND_ADJUNTO,YTRAPDO_POSN_POSN,YTRAPDO_METODO)
                VALUES (V_CODEAPROB, V_CODEDOC, 1, COLA_DINAMICA_ROW.YTRCODE_CODE||COLA_DINAMICA_ROW.YTACOLA_CODE,NULL, COLA_DINAMICA_ROW.ORGN, COLA_DINAMICA_ROW.COAS, COLA_DINAMICA_ROW.DESCRIPCION,
                COLA_DINAMICA_ROW.SUBDENOMINACION, COLA_DINAMICA_ROW.NIVEL+V_FACTOR,'P',COLA_DINAMICA_ROW.PRVE_CODE,
                V_PROVEIDO_DESC,NULL,'POR APROBAR'|| v_plan_proc_code||'-'||v_PLAN_SEQ||'/'||COLA_DINAMICA_ROW.YTRCODE_CODE||COLA_DINAMICA_ROW.YTACOLA_CODE,SYSDATE,COLA_DINAMICA_ROW.ESTA_CODE_PASARA,COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,COLA_DINAMICA_ROW.UNID_CODE,COLA_DINAMICA_ROW.TIEMPO,
                COLA_DINAMICA_ROW.IND_ADJUNTO,COLA_DINAMICA_ROW.POSN,V_METODO_APR);*/
              END IF;
              V_CODEAPROB       := V_CODEAPROB + 1;
              V_VUELTA_DINAMICA := V_VUELTA_DINAMICA + 1;
            END LOOP;
            CLOSE COLA_DINAMICA;
          
          END IF;
          /*VERIFICAR SI ES NECESARIO REGISTRAR EL DETALLE DE APROBADORES DE LO CONTRARIO SOLO NOS IMPORTA LA PERSONA QUE APROBO*/
        
        END LOOP;
        CLOSE DT1;
      
        --////////VERIFICAMOS SI EL DOC QUIERE APROBACI?N
        IF V_SOLI_APRO >= 1 THEN
        
          SELECT COUNT(*)
            INTO V_NUM_APRO
            FROM COMUMGR.YTRAPDO
           WHERE YTRAPDO_DOCU_CODE = V_CODEDOC;
          IF (V_NUM_APRO = 0) THEN
            V_MSG_GLOBAL := 'ERP-ERR DOCUMENTO AL MENOS DEBE TENER UN NIVEL DE APROBACI?N';
            RAISE exp_GLOBAL;
          END IF;
        
        END IF;
      
        --NUEVO PARA DOSUMENTOS CON PLANTILLA DEFINIDA ENTRE ALUMNO UNIVERSIDAD
        IF (V_TIPODOC = '01') THEN
        
          -- SELECT YTRUNID_CODE,YTRUNID_RUTA INTO V_PARA_CODE,V_PARA_DESC
          -- YTRUNID WHERE YTRUNID_PADRE=V_DUENO_PROCESO AND YTRUNID_IND_PRINCIPAL='S' AND ROWNUM=1;
        
          OPEN C_UNID_P(V_DUENO_PROCESO);
          FETCH C_UNID_P
            INTO V_PARA_CODE, V_PARA_DESC;
          CLOSE C_UNID_P;
        
          --EXP_NUP
          --ACTUALIZANDO LA UNIDAD RECEPTORA PRINCIPAL
        
          IF V_PARA_CODE IS NULL THEN
            --PODEMOS VERIFICAR SI ES UNA COLA CONTENEDORA
          
            IF V_ORGN_DINA IS NULL THEN
              -- ETO NOS INDICA QUE NO HAY DATOS DE COLA DINAMICA Y SE LANZA LA EXCEPCI?N
              RAISE EXP_NUP;
            
            ELSE
              --INDICA QUE SI HAY UNA COLA DINAMICA DE LA CUAL SE SACARA LA ORGANIZACI?N PRINCIPAL
            
              OPEN C_UNID_DUENA(V_ORGN_DINA, V_PARA_DINA);
              FETCH C_UNID_DUENA
                INTO V_PARA_CODE, V_PARA_DESC;
              CLOSE C_UNID_DUENA;
            
            END IF;
          
          END IF;
        
          UPDATE YTRAPDO
             SET YTRAPDO_IND_PARA = 'P'
           WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
             AND YTRAPDO_DOCU_SEQ = 1
             AND YTRAPDO_UNID_CODE = V_PARA_CODE;
        END IF;
      
        --ADICIONAR QUIEN RECEPCIONARA LOS DOCUMENTOS
      
        --v_coas:=ky_json.campo(jsonObj, 'coas');
        --v_unidad:=ky_json.campo(jsonObj, 'unidad_entrega');
        --v_nom_unidad:=ky_json.campo(jsonObj, 'nomunidad');
        v_unidad      := ky_json.campo(jsonObj, 'p_dependencia_code');
        v_DEPENDENCIA := ky_json.campo(jsonObj, 'p_dependencia_code');
        v_nom_unidad  := ky_json.campo(jsonObj, 'p_dependencia_desc');
        V_QUEHACER    := ky_json.campo(jsonObj, 'p_quehacer');
        V_OTRO        := ky_json.campo(jsonObj, 'p_otro');
      
        --INGRESA CUANDO  ES UN DOCUMENTO ENTRANTE Y SE LE BRINDA LAS UNIDADES
        IF (length(v_unidad) > 0) THEN
        
          --OBTENEMOS EL ULTIMO NIVEL DE APROBACION
        
          --OBTENEMOS EL PROVEIDO
          SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
            INTO V_PROVEIDO, V_PROVEIDO_DESC
            FROM YTVPRVE
           WHERE YTVPRVE_CODE =
                 (SELECT YGVPPAR_VALOR_PREDETERMINADO
                    FROM COMUMGR.YGVPPAR
                   WHERE YGVPPAR_CODI = 'T02');
          SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
            INTO V_PROVEIDO_1, V_PROVEIDO_DESC_1
            FROM YTVPRVE
           WHERE YTVPRVE_CODE =
                 (SELECT YGVPPAR_VALOR_PREDETERMINADO
                    FROM COMUMGR.YGVPPAR
                   WHERE YGVPPAR_CODI = 'T03');
        
          --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
          --////////// SI NO HEREDA COLA DE CARPETA SACA NOMBRES DE UNIDAD///////////////////////////////////////////////////
        
          IF (V_CARPETA IS NULL) THEN
          
            IF V_SOLI_CODE = 'DA' THEN
              -- DOCUMENTOS ENTRE UNIDADES SOLICITA LA UNIDAD PADRE
              /*SELECT SUBSTR(TA.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TA.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA
              WHERE TA.YTRUNID_CODE=v_DEPENDENCIA;
              V_CODEAPROB:=v_DEPENDENCIA;*/
              IF V_TIPODOC <> '03' THEN
                --- DOCSA-05/03/2019
                SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                       SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
                  INTO V_COAS, v_orgn_code
                  FROM YTRUNID TA, YTRUNID TB
                 WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
                   AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
                --V_CODEAPROB:=v_DEPENDENCIA;
                --ELSE
                -- v_orgn_code:=v_DEPENDENCIA;
              END IF;
              --V_CODEAPROB:=v_DEPENDENCIA;
              V_CODEAPROB := 1;
              V_NIVEL     := 1;
            ELSE
            
              --SELECT NVL(TO_NUMBER(MAX(YTRAPDO_SEQ))+1,1)  INTO V_CODEAPROB  FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE=V_CODEDOC AND YTRAPDO_DOCU_SEQ=1;
              --SELECT NVL(TO_NUMBER(MAX(YTRAPDO_NIVEL))+1,1)  INTO V_NIVEL  FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE=V_CODEDOC AND YTRAPDO_DOCU_SEQ=1;
            
              SELECT NVL(TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1, 1)
                INTO V_CODEAPROB
                FROM YTRAPDO
               WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                 AND YTRAPDO_DOCU_SEQ = 1;
              SELECT NVL(TO_NUMBER(MAX(YTRAPDO_NIVEL)) + 1, 1)
                INTO V_NIVEL
                FROM YTRAPDO
               WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                 AND YTRAPDO_DOCU_SEQ = 1;
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
                INTO V_COAS, v_orgn_code
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            END IF;
          ELSE
            V_CODEAPROB := 1;
            V_NIVEL     := 1;
          
            --//////////////////////SI SE ADJUNTA CARPETA HAY QUE BLOQUEAR LA CARPETA PARA QUE YA NO SE ADJUNTE A OTRO DOCUMENTO/////////////
            UPDATE YTBCAEX
               SET YTBCAEX_IND_ADJUNTO = 'S'
             WHERE YTBCAEX_CODE = V_CARPETA;
          END IF;
        
          --se comento la conSULTA ANTERIOR PORQUR AHORA SOLO ENVIA A UNIDADES PADRE
        
          /*   SELECT SUBSTR(Ta.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(Ta.YTRUNID_ORGN_UPAO,2,10) CODE  INTO V_COAS,v_orgn_code
          FROM YTRUNID TA
          WHERE TA.YTRUNID_CODE=v_DEPENDENCIA;     */
        
          --NOS INDICA QUE SON DOCUMENTOS ENTRE UNIDADES ADMINISTRATIVAS---------------
          IF V_SOLI_CODE = 'DA' OR V_TIPODOC = '06' THEN
          
            IF (V_TIPODOC <> '06') THEN
              --SACANDO PROVEIDOS POR DEFECTO PARA REGISTRAR ENVIO DE DOCUMENTOS ENTRANTES
              SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                INTO V_PROVEIDO_0, V_PROVEIDO_DESC_0
                FROM YTVPRVE
               WHERE YTVPRVE_CODE =
                     (SELECT YGVPPAR_VALOR_PREDETERMINADO
                        FROM COMUMGR.YGVPPAR
                       WHERE YGVPPAR_CODI = 'T01');
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
                INTO V_COAS_55, v_orgn_code_55
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = ky_json.campo(jsonObj, 'usua_id')
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            
              --SEMBRANDO LA APROBACI?N DEL CREADOR DEL DOCUMENTO
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_tiempo,
                 YTRAPDO_IND_ESTADO_1,
                 YTRAPDO_IND_COPIA,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB,
                 V_CODEDOC,
                 1,
                 1,
                 NULL,
                 v_orgn_code_55,
                 v_coas_55,
                 V_NOMBRES,
                 NULL,
                 V_NIVEL,
                 'A',
                 V_PROVEIDO_0,
                 V_PROVEIDO_DESC_0,
                 NULL,
                 'USUARIO QUE ENVIO EL DOCUMENTO',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 v_DEPENDENCIA,
                 'N',
                 0,
                 'E',
                 'I',
                 'S');
            
              V_NIVEL := V_NIVEL + 1;
            
              --YTRAPDO_IND_COPIA: I=INFORMATIVO,
            END IF;
          
            IF LENGTH(V_OTRO) > 0 THEN
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_tiempo,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB + 1,
                 V_CODEDOC,
                 1,
                 2,
                 NULL,
                 v_orgn_code,
                 v_coas,
                 v_nom_unidad,
                 NULL,
                 V_NIVEL,
                 'P',
                 V_QUEHACER,
                 V_OTRO,
                 NULL,
                 'POR RECEPCIONAR',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 v_DEPENDENCIA,
                 V_IND_DERIVADO,
                 ky_json.campo(jsonObj, 'p_tiempo'),
                 'P');
            
            ELSE
            
              --///////////////VERIFICAR SI TIENE UNA CARPETA ADJUNTA
              --*************** NOS INDICA QUE DEBEMOS CLONAR LA COLA DE LA CARPETA
              IF (LENGTH(V_CARPETA) > 0) THEN
              
                --////////////////OBTENEMOS LA MAYOR SECUENCIA DE LA COLA DE APROBACI?N//////////////////////////
                --V_NIVEL_CARPETA
                SELECT MAX(YTRAPDO_SEQ) + 1
                  INTO V_SEQ_APROB
                  FROM COMUMGR.YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                   AND YTRAPDO_DOCU_SEQ = 1;
              
                --    V_NIVEL:=V_NIVEL+1;
              
                OPEN DT_CCARPETA(V_CARPETA, v_usua_id);
                LOOP
                  FETCH DT_CCARPETA
                    INTO DT_CCARPETA_ROW;
                  EXIT WHEN DT_CCARPETA%NOTFOUND;
                
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_DERIVADO,
                     YTRAPDO_IND_COPIA,
                     YTRAPDO_IND_PARA,
                     YTRAPDO_IND_ADJUNTO,
                     YTRAPDO_SEQ_DCA)
                  
                  VALUES
                    (V_SEQ_APROB,
                     V_CODEDOC,
                     1,
                     DT_CCARPETA_ROW.COLA_CODE,
                     NULL,
                     DT_CCARPETA_ROW.ORGN,
                     DT_CCARPETA_ROW.COAS,
                     DT_CCARPETA_ROW.DESCRIPCION,
                     DT_CCARPETA_ROW.SUBDENOMINACION,
                     V_NIVEL,
                     'P',
                     DT_CCARPETA_ROW.PRVE_CODE,
                     DT_CCARPETA_ROW.PRVE_DESC,
                     NULL,
                     'POR RECEPCIONAR',
                     SYSDATE,
                     DT_CCARPETA_ROW.ESTA_CODE_PASARA,
                     DT_CCARPETA_ROW.ESTA_CODE_REGRESA,
                     DT_CCARPETA_ROW.YTRAPDO_TIAP_CODE,
                     DT_CCARPETA_ROW.UNID_CODE,
                     DT_CCARPETA_ROW.TIEMPO,
                     '',
                     'N',
                     'N',
                     DT_CCARPETA_ROW.IND_ADJUNTO,
                     DT_CCARPETA_ROW.YTRAPDO_SEQ);
                
                  V_SEQ_APROB   := V_SEQ_APROB + 1;
                  V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
                  V_NIVEL       := V_NIVEL + 1;
                
                  /* SELECT YTRAPDO_CODE_CODE COLA_CODE,YTRAPDO_ORGN_CODE ORGN,YTRAPDO_COAS_CODE COAS,YTRAPDO_DESCRIPCION DESCRIPCION,YTRAPDO_SUBDENOMINACION SUBDENOMINACION,YTRAPDO_NIVEL NIVEL,
                  YTRAPDO_PRVE_CODE PRVE_CODE ,YTRAPDO_PRVE_DESC PRVE_DESC,YTRAPDO_ESTA_CODE_PASARA ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
                  YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE UNID_CODE,YTRAPDO_TIEMPO TIEMPO,YTRAPDO_IND_ADJUNTO IND_ADJUNTO,YTRAPDO_POSN_POSN POSN*/
                
                END LOOP;
                CLOSE DT_CCARPETA;
              
                --///////////SI NO ES CARPETA COLOCA AL DESTINARIO DEL COMBOBOX
              ELSE
                SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                  INTO V_PROVEIDO, V_PROVEIDO_DESC
                  FROM YTVPRVE
                 WHERE YTVPRVE_CODE = V_QUEHACER;
              
                --////ADICIONAR LOGICA PARA DAR PEMISOS DE APROBAR AL USUARIO QUE CREO EL DOCUMENTO EN EL CASO DE DOCUMENTOS SALIENTES
                IF V_TIPODOC <> '03' THEN
                  --DOCSA
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_IND_DERIVADO,
                     YTRAPDO_tiempo,
                     YTRAPDO_IND_PARA)
                  VALUES
                    (V_CODEAPROB + 1,
                     V_CODEDOC,
                     1,
                     2,
                     NULL,
                     v_orgn_code,
                     v_coas,
                     v_nom_unidad,
                     NULL,
                     V_NIVEL,
                     'P',
                     V_PROVEIDO,
                     V_PROVEIDO_DESC,
                     NULL,
                     'POR RECEPCIONAR',
                     SYSDATE,
                     NULL,
                     'OB',
                     'DOC',
                     v_DEPENDENCIA,
                     V_IND_DERIVADO,
                     ky_json.campo(jsonObj, 'p_tiempo'),
                     'P');
                ELSE
                  --///SI ES O3 ENTONCES ASIGNAMOS LA UNIDAD QUE CREO EL DOCUMENTO
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_IND_DERIVADO,
                     YTRAPDO_tiempo,
                     YTRAPDO_IND_PARA)
                  VALUES
                    (V_CODEAPROB + 1,
                     V_CODEDOC,
                     1,
                     2,
                     NULL,
                     v_orgn_code_55,
                     v_coas_55,
                     v_nom_unidad,
                     NULL,
                     V_NIVEL,
                     'P',
                     V_PROVEIDO,
                     V_PROVEIDO_DESC,
                     NULL,
                     'POR RECEPCIONAR',
                     SYSDATE,
                     NULL,
                     'OB',
                     'DOC',
                     v_DEPENDENCIA,
                     V_IND_DERIVADO,
                     ky_json.campo(jsonObj, 'p_tiempo'),
                     'P');
                END IF;
              END IF;
            
              --//////////////FIN DE SEMBRAR COLA DE CARPETA
            
            END IF;
          
            V_SEQ_APROB   := 2;
            V_SEQ_APROB_1 := 3;
            OPEN COPIAS(ky_json.campo(jsonObj, 'p_copiar_a'));
            LOOP
              FETCH COPIAS
                INTO COPIAS_ROW;
              EXIT WHEN COPIAS%NOTFOUND;
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE,
                     TB.YTRUNID_DESCRIPCION
                INTO V_COAS, v_orgn_code, V_ORG_DESC_1
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = COPIAS_ROW.ORG_CODE
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_IND_COPIA,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB + V_SEQ_APROB,
                 V_CODEDOC,
                 1,
                 V_SEQ_APROB_1,
                 NULL,
                 v_orgn_code,
                 v_coas,
                 V_ORG_DESC_1,
                 NULL,
                 V_NIVEL,
                 'P',
                 V_PROVEIDO_1,
                 V_PROVEIDO_DESC_1,
                 NULL,
                 'POR RECEPCIONAR',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 COPIAS_ROW.ORG_CODE,
                 'N',
                 'S',
                 'C');
            
              V_SEQ_APROB   := V_SEQ_APROB + 1;
              V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
            
            END LOOP;
            CLOSE COPIAS;
          
            /*
            
            IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_1'))>5) THEN
            
                       SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                       WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_1')
                       AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
            
            
                       INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                       VALUES (V_CODEAPROB + 2, V_CODEDOC, 1, 3,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_1'), NULL, V_NIVEL+1,'P',
                               V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_1'),'N','S');
            
                END IF;
            
                 IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_2'))>5) THEN
            
                           SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                           WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_2')
                           AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
            
            
                       INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                       VALUES (V_CODEAPROB + 3, V_CODEDOC, 1, 4,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_2'), NULL, V_NIVEL+1,'P',
                               V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_2'),'N','S');
            
                END IF;
            
                */
          
          ELSE
            --CUANDO SON DOCUMENTOS ENTRANTES DE OTRAS EMPRESAS
          
            INSERT INTO COMUMGR.YTRAPDO
              (YTRAPDO_SEQ,
               YTRAPDO_DOCU_CODE,
               YTRAPDO_DOCU_SEQ,
               YTRAPDO_CODE_CODE,
               YTRAPDO_ID_USUA_APROB,
               YTRAPDO_ORGN_CODE,
               YTRAPDO_COAS_CODE,
               YTRAPDO_DESCRIPCION,
               YTRAPDO_SUBDENOMINACION,
               YTRAPDO_NIVEL,
               YTRAPDO_IND_ESTADO,
               YTRAPDO_PRVE_CODE,
               YTRAPDO_PRVE_DESC,
               YTRAPDO_FECHA_APROBACION,
               YTRAPDO_COMENTARIO,
               YTRAPDO_FECHA_ACTIVIDAD,
               YTRAPDO_ESTA_CODE_PASARA,
               YTRAPDO_ESTA_CODE_REGRESA,
               YTRAPDO_TIAP_CODE,
               YTRAPDO_UNID_CODE,
               YTRAPDO_IND_DERIVADO,
               YTRAPDO_IND_PARA)
            VALUES
              (V_CODEAPROB,
               V_CODEDOC,
               1,
               1,
               NULL,
               v_orgn_code,
               v_coas,
               v_nom_unidad,
               NULL,
               V_NIVEL,
               'P',
               V_PROVEIDO,
               V_PROVEIDO_DESC,
               NULL,
               'POR RECEPCIONAR',
               SYSDATE,
               NULL,
               'OB',
               'DOC',
               v_DEPENDENCIA,
               V_IND_DERIVADO,
               'P');
          
            V_SEQ_APROB   := 1;
            V_SEQ_APROB_1 := 2;
            OPEN COPIAS(ky_json.campo(jsonObj, 'p_copiar_a'));
            LOOP
              FETCH COPIAS
                INTO COPIAS_ROW;
              EXIT WHEN COPIAS%NOTFOUND;
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE,
                     TB.YTRUNID_DESCRIPCION
                INTO V_COAS, v_orgn_code, V_ORG_DESC_1
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = COPIAS_ROW.ORG_CODE
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_IND_COPIA,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB + V_SEQ_APROB,
                 V_CODEDOC,
                 1,
                 V_SEQ_APROB_1,
                 NULL,
                 v_orgn_code,
                 v_coas,
                 V_ORG_DESC_1,
                 NULL,
                 V_NIVEL,
                 'P',
                 V_PROVEIDO_1,
                 V_PROVEIDO_DESC_1,
                 NULL,
                 'POR RECEPCIONAR',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 COPIAS_ROW.ORG_CODE,
                 V_IND_DERIVADO,
                 'S',
                 'C');
            
              V_SEQ_APROB   := V_SEQ_APROB + 1;
              V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
            
            END LOOP;
            CLOSE COPIAS;
            /*  IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_1'))>5) THEN
            
                   SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                   WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_1')
                   AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
                   INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                   VALUES (V_CODEAPROB + 1, V_CODEDOC, 1, 2,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_1'), NULL, V_NIVEL,'P',
                           V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_1'),V_IND_DERIVADO,'S');
            
            END IF;
            
             IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_2'))>5) THEN
            
                       SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                       WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_2')
                       AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
            
                   INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                   VALUES (V_CODEAPROB + 2, V_CODEDOC, 1, 3,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_2'), NULL, V_NIVEL,'P',
                           V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_2'),V_IND_DERIVADO,'S');
            
            END IF;*/
          
          END IF;
        
          --comumgr.kyt_tramite_comunicacion.FYT_ENVIAR_CORREO('rvarasr@upao.edu.pe','Recepci?n de Documento', 'Saludos,','Se te envio un documento para su aprobaci?n y recepci?n');
        
        END IF;
      
        --CAMPOS DE FORMULARIO
      
        --ELIMINAR DATOS DE LA TABLA TEMPORAL DE LOS CAMPOS DINAMICOS ESPECIALMENTE DE LA VENTANA MODAL X JR
        DELETE FROM COMUMGR.YTRTEMP
         WHERE YTRTEMP_PLAN_PROC_CODE =
               ky_json.campo(jsonObj, 'plan_proc_code')
           AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
           AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id');
      
        --INSERTAMOS POLITICAS DE ACEPTACION EN CASO LAS TENGA
        SELECT YTRPLAN_IND_HAB_POLI
          INTO V_YTRPLAN_IND_HAB_POLI
          FROM COMUMGR.YTRPLAN
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_SEQ = v_PLAN_SEQ;
      
        IF V_YTRPLAN_IND_HAB_POLI = 'S' THEN
        
          --SELECT COUNT(*) INTO V_CANT FROM COMUMGR.YTACEPO WHERE YTACEPO_DOCU_CODE = P_DOCUMENTO;
        
          IF P_HAB_POLI = 'S' THEN
          
            --V_VALIDAR_1 := 1;
          
            --V_MSG := 'ERP-ERR DOCUMENTO NO SE PUEDE ENVIAR A EVALUACI?N POR QUE NO ACEPT? LAS POLITICAS';
          
            -- INSERTAR
            SELECT YTPLAPO_TXT_DESC
              INTO V_YTACEPO_DESCRIP_POLI
              FROM COMUMGR.YTPLAPO
             WHERE YTPLAPO_PROCE_CODE = v_plan_proc_code
               AND YTPLAPO_SEQ = v_PLAN_SEQ;
            --SELECT YTRPLAN_TXT_POLITICAS INTO V_YTACEPO_DESCRIP_POLI FROM COMUMGR.YTRPLAN WHERE YTRPLAN_PROC_CODE = V_YTBDOCU_PLAN_PROC_CODE AND YTRPLAN_SEQ = V_YTBDOCU_PLAN_SEQ;
          
            INSERT INTO COMUMGR.YTACEPO
              (YTACEPO_CODE,
               YTACEPO_DOCU_CODE,
               YTACEPO_ACEPT_POLI,
               YTACEPO_FECHA_REGISTRO,
               YTACEPO_USUARIO_ID,
               YTACEPO_DESCRIP_POLI)
            VALUES
              (SEQ_YTACEPO_CODE.NEXTVAL,
               V_CODEDOC,
               'S',
               SYSDATE,
               ky_json.campo(jsonObj, 'usua_id'),
               V_YTACEPO_DESCRIP_POLI);
          
            --V_MSG_GLOBAL := 'ERP-ERR DOCUMENTO NO SE PUEDE CREAR POR QUE NO ACEPT? LAS POLITICAS ';
            --RAISE EXP_POLITICAS;
          
            UPDATE COMUMGR.YTBDOCU
               SET YTBDOCU_ACEP_POLITICA = 'S'
             WHERE YTBDOCU_CODE = V_CODEDOC;
          
          END IF;
        
        END IF;
      
        SELECT NVL(TO_NUMBER(MAX(YTBDOCU_NUM_REG)) + 1, 1)
          INTO V_NUM_REG
          FROM COMUMGR.YTBDOCU
         WHERE YTBDOCU_VAAN_CODE = v_vaan_code
           AND TO_NUMBER(YTBDOCU_NUM_REG) < 900000;
        /* IF V_NUM_REG<999000 THEN
           V_NUM_REG:=999000;
        ELSE
           V_NUM_REG:=V_NUM_REG+1;
        END IF;*/
        --GRABAMOS EL CODIGO DEFINITIVO DEL DOCUMENTO
        UPDATE COMUMGR.YTBDOCU
           SET YTBDOCU_NUM_REG = LPAD(V_NUM_REG, 6, '0')
         WHERE YTBDOCU_CODE = V_CODEDOC;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := V_CODEDOC ||
                   'TRANSACCIÓN APLICADA Y GRABADA, SE CREÓ EL DOCUMENTO NÚMERO ' ||
                   V_CODEDOC;
        ELSE
          ROLLBACK;
          v_msg := 'ERP-ERR ERROR AL GRABAR DOCUMENTO ' || V_CODEDOC;
        END IF;
      
      ELSE
        -- v_msg :='ERP-ERR Tienes una deuda de ' || V_DEUDA || ' soles,  para poder realizar el tr?mite debes estar al dia en tus pagos...';
      
        v_msg := V_VALIDA_PC;
      END IF;
    
    ELSIF (P_ACCION = 'ACU_IMAGEN') THEN
    
      V_PRUEBA := 13056;
    
      v_arch    := ky_json.campo(jsonObj, 'archivo');
      V_CODEDOC := ky_json.campo(jsonObj, 'ytbdocu_pk');
    
      -----------------------   LOGICA PARA ADJUNTAR IMAGEN AL REQUISITO DEL DOCUMENTO CREADO ----------------------
      SELECT YTRREDO_CODE
        INTO V_YTRREDO_CODE
        FROM COMUMGR.YTRREDO
       WHERE YTBDOCU_CODE = V_CODEDOC
         AND ROWNUM = 1;
    
      SELECT COUNT(*)
        INTO V_EXISTE
        FROM YTRAPAD
       WHERE YTRAPAD_ADJU_CODE = v_arch
         AND YTRAPAD_APPL_CODE = V_CODEDOC || '-1-' || V_YTRREDO_CODE
         AND YTRAPAD_IND_ESTADO <> 'E';
    
      IF V_EXISTE = 0 THEN
      
        SELECT COUNT(*)
          INTO V_CANTIDAD_ADJUNTOS
          FROM YTRAPAD
         WHERE YTRAPAD_APPL_CODE = V_CODEDOC || '-1-' || V_YTRREDO_CODE
           AND YTRAPAD_IND_ESTADO <> 'E';
      
        --************************************
        --VERIFICAR SI NO SUPERAS EL NUMERO DE ADJUNTOS
        SELECT YTRREDO_ADJ_NUMBER, LOWER(YTRREDO_ADJ_FORMATO)
          INTO V_ADJ_NUM, V_ADJ_FORMATO
          FROM COMUMGR.YTRREDO
         WHERE TRIM(YTBDOCU_CODE || '-' || YTBDOCU_SEQ || '-' ||
                    YTRREDO_CODE) = V_CODEDOC || '-1-' || V_YTRREDO_CODE
           AND ROWNUM = 1;
      
        V_PRUEBA := 15412;
      
        IF V_CANTIDAD_ADJUNTOS < V_ADJ_NUM THEN
        
          V_PRUEBA := 15417;
        
          select lower(ytradju_formato)
            into v_formato
            from comumgr.ytradju
           where ytradju_code = v_arch;
        
          V_PRUEBA := 15419;
        
          IF (INSTR(V_ADJ_FORMATO, v_formato) > 0) THEN
          
            /* SELECT YTRADJU_VALIDADOR INTO V_VALIDADOR FROM  COMUMGR.YTRADJU
            WHERE YTRADJU_USUA_ID = ky_json.campo(jsonObj, 'usua_id') AND YTRADJU_CODE = ky_json.campo(jsonObj, 'archivo');*/
          
            INSERT INTO COMUMGR.YTRAPAD
              (YTRAPAD_ADJU_CODE,
               YTRAPAD_APPL_CODE,
               YTRAPAD_APPL_REFERENCIA,
               YTRAPAD_FECHA_ACTIVIDAD,
               YTRAPAD_USUA_ID,
               YTRAPAD_IND_ESTADO,
               YTRAPAD_SEQ)
            VALUES
              (v_arch,
               V_CODEDOC || '-1-' || V_YTRREDO_CODE,
               'DOCDOC',
               sysdate,
               ky_json.campo(jsonObj, 'usua_id_reg'),
               'A',
               seq_ytrapad_seq.NEXTVAL);
          
            IF (SQL%ROWCOUNT > 0) THEN
            
              if noT V_YTRREDO_CODE is null then
              
                if 'DOCDOC' = 'DOCDOC' THEN
                
                  UPDATE COMUMGR.YTRREDO
                     SET YTRREDO_IND_ENV_USUA       = 'S',
                         YTRREDO_IND_ESTADO         = 'V',
                         YTRREDO_FECHA_ADJ_REQ_USUA = SYSDATE,
                         YTRREDO_USUA_ID            = ky_json.campo(jsonObj,
                                                                    'usua_id_reg')
                   WHERE YTRREDO_CODE = V_YTRREDO_CODE;
                
                  IF (SQL%ROWCOUNT > 0) THEN
                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                    --COMMIT;
                  ELSE
                    rollback;
                    V_MSG_GLOBAL := 'ERP-ERR Transacción no se pudo realizar';
                    RAISE exp_GLOBAL;
                  
                  END IF;
                ELSE
                  v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                END IF;
              
              ELSE
                v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
              end if;
            
            ELSE
              V_MSG_GLOBAL := 'ERP-ERR Transacción no se pudo realizar';
              RAISE exp_GLOBAL;
            END IF; --SQL%ROWCOUNT
          
          ELSE
            V_MSG_GLOBAL := 'ERP-ERR ::: FORMATO DE ARCHIVO INCORRECTO SOLO SE PERMITEN FORMATOS : ' ||
                            UPPER(V_ADJ_FORMATO) ||
                            ' ESTAS QUERIENDO SUBIR UN ' ||
                            UPPER(v_formato);
            --V_MSG_GLOBAL:='ERP-ERR DOCUMENTO AL MENOS DEBE TENER UN NIVEL DE APROBACI?N';
            RAISE exp_GLOBAL;
          END IF; -- (INSTR(V_ADJ_FORMATO,v_formato)>0)
        
        ELSE
          V_MSG_GLOBAL := 'ERP-ERR ::: NO SE PUEDE ADJUNTAR M?S DE ' ||
                          V_ADJ_NUM || ' ARCHIVO';
          RAISE exp_GLOBAL;
        END IF; --V_CANTIDAD_ADJUNTOS<V_ADJ_NUM
      ELSE
        V_MSG_GLOBAL := 'ERP-ERR Ya existe un archivo adjunto con esas caracteristicas';
        RAISE exp_GLOBAL;
      END IF;
    
      ---- EJECUTAR PROCEDURE PARA ENVIAR A EVALUACION LA IMAGEN
    
      COMUMGR.kyt_tramite_usuario.PYT_ACTUALIZAR_EST_DOCU_2(V_CODEDOC,
                                                            ky_json.campo(jsonObj,
                                                                          'usua_id_reg'),
                                                            'EV',
                                                            'IMAGEN ENVIADA AUTOMATICAMENTE POR EL ID : ' ||
                                                            ky_json.campo(jsonObj,
                                                                          'usua_id_reg'),
                                                            V_MSG);
    
      UPDATE YTDRETRA
         SET YTDRETRA_ATENDIDO = '1'
       WHERE YTDRETRA_ID_USUARIO =
             (SELECT YTBDOCU_USUA_ID
                FROM YTBDOCU
               WHERE YTBDOCU_CODE = V_CODEDOC)
         AND YTDRETRA_FK_YTRETRA = 1;
    
      IF V_MSG <> 'OK' THEN
        RAISE exp_GLOBAL;
      END IF;
    
      v_msg := V_CODEDOC ||
               'TRANSACCIÓN APLICADA Y GRABADA, SE ENVIÓ CORRECTAMENTE LA IMAGEN ' ||
               V_CODEDOC;
    
      -----------------------  ************************   FIN  ************************  ----------------------
    
    ELSIF (P_ACCION = 'ADI_IMAGEN') THEN
    
      V_PRUEBA := 10528;
    
      v_arch := ky_json.campo(jsonObj, 'archivo');
    
      --VALIDAR POLITICAS POR DOCUMENTO
    
      SELECT YTRPLAN_IND_HAB_POLI
        INTO V_YTRPLAN_IND_HAB_POLI
        FROM COMUMGR.YTRPLAN
       WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
         AND YTRPLAN_SEQ = v_PLAN_SEQ;
    
      IF V_YTRPLAN_IND_HAB_POLI = 'S' THEN
      
        --SELECT COUNT(*) INTO V_CANT FROM COMUMGR.YTACEPO WHERE YTACEPO_DOCU_CODE = P_DOCUMENTO;
      
        IF P_HAB_POLI <> 'S' THEN
        
          --V_VALIDAR_1 := 1;
        
          --V_MSG := 'ERP-ERR DOCUMENTO NO SE PUEDE ENVIAR A EVALUACI?N POR QUE NO ACEPT? LAS POLITICAS';
        
          V_MSG_GLOBAL := 'ERP-ERR DOCUMENTO NO SE PUEDE CREAR POR QUE NO ACEPT? LAS POLITICAS ';
          RAISE EXP_POLITICAS;
        
        END IF;
      
      END IF;
    
      --- FIN VALIDACION POLITICAS
    
      -- ********* VALIDAR SI TIENEE LA IMAGEN EN PROCESO *************----
    
      SELECT COUNT(*)
        INTO V_EXISTE
        FROM YTBDOCU
       WHERE YTBDOCU_USUA_ID = ky_json.campo(jsonObj, 'usua_id')
         AND YTBDOCU_PLAN_PROC_CODE = v_plan_proc_code
         AND YTBDOCU_PLAN_SEQ = v_PLAN_SEQ
         AND YTBDOCU_ESTA_CODE IN ('EV', 'TR', 'OB');
    
      IF V_EXISTE > 0 THEN
      
        V_MSG_GLOBAL := 'ERP-ERR USTED YA TIENE UNA IMAGEN EN PROCESO DE TRAMITE';
        RAISE exp_GLOBAL;
      
      END IF;
    
      -- ********* VALIDAR SI TIENEE LA IMAGEN EN PROCESO *************----
    
      V_CAMPOS := replace(replace(replace(ky_json.campo(jsonObj, 'data'),
                                          '¬',
                                          '{'),
                                  'µ',
                                  '}'),
                          '|',
                          '"');
      V_CAMPOS := REPLACE(V_CAMPOS, '?', '');
    
      V_BTN_MIN  := 0;
      V_BTN_MAXI := 0;
    
      IF NOT V_CAMPOS IS NULL THEN
        json_DATA := json(V_CAMPOS);
      
        /*INSERT INTO COMUMGR.YTLOG (YTLOG_CODE, YTLOG_VARIABLES)
        VALUES ( V_CODEDOC,V_CAMPOS);*/
      
        --REINICIAR NUMERO DE COPIAS A 0 SI HAY TIPOS BOTON
        OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH C_CAMPOS
            INTO C_CAMPOS_REC;
          EXIT WHEN C_CAMPOS%NOTFOUND;
        
          IF (C_CAMPOS_REC.CONTROL = 'BT') THEN
          
            IF (C_CAMPOS_REC.YTRCAME_AFECTA_PAGO = 'S') THEN
            
              V_NUM_COPIAS            := 0;
              V_BT_EXISTE_AFECTA_PAGO := 1;
            
            END IF;
          
          END IF;
        
        END LOOP;
        CLOSE C_CAMPOS;
      
        --INSERTAMOS NUEVO NUMERO DE COPIAS
        OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH C_CAMPOS
            INTO C_CAMPOS_REC;
          EXIT WHEN C_CAMPOS%NOTFOUND;
        
          IF (C_CAMPOS_REC.CONTROL = 'BT') THEN
          
            IF (C_CAMPOS_REC.YTRCAME_AFECTA_PAGO = 'S') THEN
            
              SELECT COUNT(*)
                INTO v_encontro
                FROM COMUMGR.YTRTEMP
               WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                 AND YTRTEMP_ESTADO = 'A'
                 AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                 AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                 AND YTRTEMP_PLAN_PROC_CODE = v_plan_proc_code
                 AND YTRTEMP_PLAN_SEQ = v_PLAN_SEQ
                 AND YTRTEMP_CARRERA = V_CARRERA_USUA
                 AND YTRTEMP_PROGRAMA = V_NIVEL_1
                 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
            
              IF v_encontro <> 0 THEN
              
                SELECT YTRTEMP_JSON_DATA_CLOB
                  INTO V_YTRTEMP_JSON_DATA_CLOB
                  FROM COMUMGR.YTRTEMP
                 WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                   AND YTRTEMP_ESTADO = 'A'
                   AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                   AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                   AND YTRTEMP_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRTEMP_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRTEMP_CARRERA = V_CARRERA_USUA
                   AND YTRTEMP_PROGRAMA = V_NIVEL_1
                   AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
              
                V_LISTVALUE_1 := json_list(V_YTRTEMP_JSON_DATA_CLOB);
              
                V_NUM_COPIAS := V_NUM_COPIAS + V_LISTVALUE_1.COUNT;
              
              END IF;
            
              V_BTN_MIN  := V_BTN_MIN + C_CAMPOS_REC.YTRCAME_ANCHO;
              V_BTN_MAXI := V_BTN_MAXI + C_CAMPOS_REC.YTRCAME_TAMANO;
            
            END IF;
          
          END IF;
        
        END LOOP;
        CLOSE C_CAMPOS;
      END IF;
    
      V_PRUEBA := 10615;
    
      /*V_MSG_GLOBAL := 'ERP-ERR NUMERO DE COPIAS INVALIDO, PARA ESTE DOCUMENTO EL NUMERO DE COPIAS DEBE SER ' || V_NUM_COPIAS;
      RAISE exp_GLOBAL;*/
    
      IF (V_BT_EXISTE_AFECTA_PAGO = 0) THEN
      
        SELECT YTRPLAN_IND_COPIAS
          INTO V_YTRPLA_IND_COPIAS
          FROM YTRPLAN
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_IND_ESTADO = 'A'
           AND YTRPLAN_SEQ = v_PLAN_SEQ;
      
        IF V_YTRPLA_IND_COPIAS < V_NUM_COPIAS THEN
          V_MSG_GLOBAL := 'ERP-ERR NUMERO DE COPIAS INVALIDO, PARA ESTE DOCUMENTO EL NUMERO DE COPIAS DEBE SER ' ||
                          V_YTRPLA_IND_COPIAS;
          RAISE exp_GLOBAL;
          --V_MSG:='Error al crear registro';
        
        END IF;
      
      END IF;
    
      IF (V_BT_EXISTE_AFECTA_PAGO = 1) THEN
      
        IF V_NUM_COPIAS < V_BTN_MIN OR V_NUM_COPIAS > V_BTN_MAXI THEN
        
          V_MSG_GLOBAL := 'ERP-ERR N?MERO DE DATOS SELECCIONADOS ESTA FUERA DEL RANGO PERMITIDO , PARA ESTE DOCUMENTO TIENE QUE SELECCIONAR COMO M?NIMO ' ||
                          V_BTN_MIN || ' Y COMO M?XIMO ' || V_BTN_MAXI;
          RAISE exp_GLOBAL;
        
        END IF;
      
      END IF;
    
      --IF(V_DEUDA=0) THEN
      --SI ES CERO NOS INDICA QUE NO HAY RESTRICCIONES
      IF (V_VALIDA_PC = '0') then
        V_MSG := 'Error al crear registro';
      
        -- v_plan_proc_code:=ky_json.campo(jsonObj, 'plan_proc_code');
        --v_PLAN_SEQ:=ky_json.campo(jsonObj, 'plan_seq');
      
        --OBTENER PIDM Y NOMBRES DE USUARIO
      
        IF (v_soli_code = 'US') THEN
        
          SELECT SPRIDEN_PIDM,
                 SPRIDEN_LAST_NAME,
                 SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
                 SPBPERS_SSN DNI,
                 SPBPERS_SEX SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM SPRIDEN@PROD.INT.UPAO.EDU.PE
            LEFT OUTER JOIN SPBPERS@PROD.INT.UPAO.EDU.PE
              ON SPRIDEN_PIDM = SPBPERS_PIDM
           WHERE SPRIDEN_ID = v_usua_id
             AND SPRIDEN_CHANGE_IND IS NULL;
        
          --SACANDO EL TIPO DE DOCUMENTO
          SELECT YTAPROC_TIDO_CODE,
                 YTAPROC_TIPO_CODE,
                 YTRPLAN_TIPO_ANTICIPO
            INTO V_TIPODOCUMENTO, V_TIPO_DOC, V_YTRPLAN_TIPO_ANTICIPO
            FROM YTRPLAN, YTAPROC
           WHERE YTRPLAN_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code')
             AND YTRPLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
             AND YTRPLAN_PROC_CODE = YTAPROC_CODE;
        
          IF (V_TIPO_DOC = '04') THEN
            --SACAR EL DATO DE LA ORGANIZACI?N DEL USUARIO SOLICTANTE ES PARA DOCUMENTOS ADMINISTRATIVOS
            V_ORG_USUA := FKYT_DOCU_DOCU_PP_DAME_ORGAN(v_usua_id);
            --SELECT RRRMPLA_COAS||'-'||RRRMPLA_ORGA_ASIG INTO V_ORG_USUA FROM RRHHMGR.RRRMPLA WHERE RRRMPLA_ID=v_usua_id;
            -- V_ORG_USUA:='826';
          
            IF (V_ORG_USUA = '0') THEN
              RAISE EXP_SORGA;
            END IF;
          ELSE
            V_ORG_USUA := '';
          END IF;
        
          --OBTENEMOS SI TIENE UN VINCULO ACADEMICO CON LA UNIVERSIDAD NO INCLUYE CENTRO DE IDIOMAS
          SELECT COUNT(*)
            INTO V_ES_ALUMNO
            FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
           WHERE SGBSTDN_PIDM = V_PIDM
          --AND NOT SGBSTDN_LEVL_CODE IN('UB')
          ;
        
          IF (V_ES_ALUMNO > 0) THEN
          
            /* SELECT DISTINCT AA.SGBSTDN_PIDM, AA.SGBSTDN_TERM_CODE_EFF,AA.SGBSTDN_CAMP_CODE,AA.SGBSTDN_MAJR_CODE_1 ,BB.SORLCUR_LMOD_CODE,BB.SORLCUR_TERM_CODE,BB.SORLCUR_LEVL_CODE,BB.SORLCUR_COLL_CODE,
            CC.SORLFOS_TERM_CODE,CC.SORLFOS_MAJR_CODE,CC.SORLFOS_TERM_CODE_CTLG
            FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
            WHERE SGBSTDN_PIDM=:PIDM
            AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE
            AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
            AND BB.SORLCUR_SEQNO=(SELECT MAX(SORLCUR_SEQNO) FROM SORLCUR@PROD.INT.UPAO.EDU.PE WHERE SORLCUR_PIDM=:PIDM AND  SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB')
            AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
            AND  SGBSTDN_PIDM=SORLFOS_PIDM
            AND SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO=  (Select MAX(SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO)
                                                            FROM SORLFOS@PROD.INT.UPAO.EDU.PE
                                                            where SORLFOS_pidm=:PIDM AND  SORLFOS_TERM_CODE=BB.SORLCUR_TERM_CODE AND SORLFOS_LFST_CODE='MAJOR') ;*/
          
            --NO SELECCIONO CARRERA Y SE VA ASIGNAR UNA CARRERA POR DEFECTO
            IF (V_CARRERA_USUA = '0' OR V_CARRERA_USUA = '-1') THEN
            
              /*SELECT DISTINCT   BB.SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=BB.SORLCUR_COLL_CODE)  FACULTAD_DES,
              CC.SORLFOS_MAJR_CODE, (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=CC.SORLFOS_MAJR_CODE) CARRERA_DESC,AA.SGBSTDN_CAMP_CODE,SORLCUR_LEVL_CODE
              INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE
              FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
              WHERE SGBSTDN_PIDM=V_PIDM
              AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE
              AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
              AND BB.SORLCUR_SEQNO=(SELECT MAX(SORLCUR_SEQNO) FROM SORLCUR@PROD.INT.UPAO.EDU.PE WHERE SORLCUR_PIDM=V_PIDM AND  SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB')
              AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
              AND  SGBSTDN_PIDM=SORLFOS_PIDM
              AND SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO=  (Select MAX(SORLFOS_LCUR_SEQNO||SORLFOS_SEQNO)
                                                              FROM SORLFOS@PROD.INT.UPAO.EDU.PE
                                                           where SORLFOS_pidm=V_PIDM AND  SORLFOS_TERM_CODE=BB.SORLCUR_TERM_CODE AND SORLFOS_LFST_CODE='MAJOR') ;
                */
            
              V_PRUEBA := 10732;
            
              SELECT count(*)
                into V_NO_CC
                FROM SORLCUR@prod.int.upao.edu.pe S,
                     SORLFOS@prod.int.upao.edu.pe
               WHERE S.SORLCUR_PIDM = V_PIDM
                    --AND  NOT S.SORLCUR_LEVL_CODE IN ('UB')
                 AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                 AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                 AND SORLCUR_TERM_CODE =
                     (select MAX(XX.SORLCUR_TERM_CODE)
                        from SORLCUR@prod.int.upao.edu.pe XX
                       where sorlcur_pidm = V_PIDM
                         AND SORLCUR_LMOD_CODE = 'LEARNER'
                         AND SORLCUR_CACT_CODE = 'ACTIVE'
                      --AND NOT XX.SORLCUR_LEVL_CODE  IN ('UB')
                      )
                    -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                 AND S.SORLCUR_PIDM = SORLFOS_PIDM
                 AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                 AND SORLFOS_CACT_CODE = 'ACTIVE'
                    -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                 AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
            
              IF V_NO_CC > 0 THEN
              
                /* SELECT SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=S.SORLCUR_COLL_CODE)  FACULTAD_DES,
                        O2.SORCMJR_MAJR_CODE AS SORLFOS_MAJR_CODE,    (SELECT STVMAJR_DESC FROM STVMAJR@prod.int.upao.edu.pe WHERE STVMAJR_CODE=O2.SORCMJR_MAJR_CODE)  AS CARRERA_DESC,
                        S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                       --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                         ,S.SORLCUR_PROGRAM AS PROGRAMA
                         INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE,V_PROGRAMA_CARR
                FROM SORLCUR@prod.int.upao.edu.pe S, SORCMJR@prod.int.upao.edu.pe O2, SORLFOS@prod.int.upao.edu.pe
                WHERE S.SORLCUR_PIDM =V_PIDM
                --   AND S.SORLCUR_LEVL_CODE = P_NIVEL
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND  SORLCUR_TERM_CODE= ( select MAX(XX.SORLCUR_TERM_CODE)
                                  from SORLCUR@prod.int.upao.edu.pe XX  where sorlcur_pidm=V_PIDM
                                      AND SORLCUR_LMOD_CODE = 'LEARNER'
                                    AND SORLCUR_CACT_CODE = 'ACTIVE' )
                   AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                   AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;*/
              
                SELECT DISTINCT SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                                SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                                S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                                S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                                --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                               ,
                                S.SORLCUR_PROGRAM AS PROGRAMA
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SORLCUR@prod.int.upao.edu.pe S,
                       SORLFOS@prod.int.upao.edu.pe
                 WHERE S.SORLCUR_PIDM = V_PIDM
                      --AND NOT S.SORLCUR_LEVL_CODE  IN ('UB')
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND S.SORLCUR_CAMP_CODE like V_CAMP_CODE_1
                   AND EXISTS
                 (SELECT 'Y'
                          FROM stvcamp@prod.int.upao.edu.pe
                         WHERE STVCAMP_CODE LIKE S.SORLCUR_CAMP_CODE
                           AND STVCAMP_SITE_CODE IS NOT NULL)
                      
                   AND SORLCUR_TERM_CODE || '-' || SORLCUR_SEQNO =
                       (select MAX(XX.SORLCUR_TERM_CODE || '-' ||
                                   SORLCUR_SEQNO)
                          from SORLCUR@prod.int.upao.edu.pe XX
                         where sorlcur_pidm = V_PIDM
                           AND SORLCUR_LMOD_CODE = 'LEARNER'
                           AND SORLCUR_CACT_CODE = 'ACTIVE'
                           AND XX.SORLCUR_CAMP_CODE like V_CAMP_CODE_1 --SE ADOICIONO PARA SOLUCIONAR PROBLEMA DE COSNULTA POR CAMPUS
                              --AND NOT XX.SORLCUR_LEVL_CODE  IN ('UB','PU','PC')
                           AND NOT XX.SORLCUR_LEVL_CODE IN ('PU', 'PC')
                           AND XX.SORLCUR_TERM_CODE = S.SORLCUR_TERM_CODE)
                      -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                      -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
              
              ELSE
                --NO TIENE CURRICULA CONCURRENTE SELECCIONARA DE SGBSTDN UNA CARRERA NO DISPONIBLE PARA CENTRO DE IDIOMAS
              
                SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                                SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                                SGBSTDN_CAMP_CODE,
                                SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                                SGBSTDN_PROGRAM_1 PROGRAMA
                
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SGBSTDN@prod.int.upao.edu.pe S
                 WHERE SGBSTDN_PIDM = V_PIDM
                      --AND ( NOT SGBSTDN_LEVL_CODE_2 IN('UB') OR SGBSTDN_LEVL_CODE_2 IS NULL)
                   AND SGBSTDN_LEVL_CODE_2 IS NULL
                   AND ROWNUM = 1;
              
              END IF;
            
              IF (LENGTH(V_CAMP_CODE) = 0) THEN
                V_CAMP_CODE := 'M'; --SETEAMOS POR DEFECTO A CAMPUS PRINCIPAL
              END IF;
            
              V_PARAMETRO := V_CARRERA;
            
            ELSE
              --USUARIO PROPORCIONA UNA CARRERA SELECCIONO CARRERA
            
              /*SELECT DISTINCT   BB.SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=BB.SORLCUR_COLL_CODE)  FACULTAD_DES,
              CC.SORLFOS_MAJR_CODE, (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=CC.SORLFOS_MAJR_CODE) CARRERA_DESC,AA.SGBSTDN_CAMP_CODE,SORLCUR_LEVL_CODE
              INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE
              FROM SGBSTDN@PROD.INT.UPAO.EDU.PE AA , SORLCUR@PROD.INT.UPAO.EDU.PE BB,SORLFOS@PROD.INT.UPAO.EDU.PE CC
              WHERE SGBSTDN_PIDM=V_PIDM
              AND AA.SGBSTDN_PIDM=BB.SORLCUR_PIDM
              AND SORLCUR_ROLL_IND='Y' AND SORLCUR_LEVL_CODE<>'UB'
              AND AA.SGBSTDN_TERM_CODE_EFF=BB.SORLCUR_TERM_CODE
              AND  SGBSTDN_PIDM=SORLFOS_PIDM
              AND SORLFOS_MAJR_CODE= V_CARRERA_USUA
              AND AA.SGBSTDN_TERM_CODE_EFF=CC.SORLFOS_TERM_CODE;*/
            
              /*SELECT DISTINCT SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=S.SORLCUR_COLL_CODE)  FACULTAD_DES,
              O2.SORCMJR_MAJR_CODE AS SORLFOS_MAJR_CODE,    (SELECT STVMAJR_DESC FROM STVMAJR@prod.int.upao.edu.pe WHERE STVMAJR_CODE=O2.SORCMJR_MAJR_CODE)  AS CARRERA_DESC,
               S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                          --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                            ,S.SORLCUR_PROGRAM AS PROGRAMA
              INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE,V_PROGRAMA_CARR
                   FROM SORLCUR@prod.int.upao.edu.pe S, SORCMJR@prod.int.upao.edu.pe O2, SORLFOS@prod.int.upao.edu.pe
                   WHERE S.SORLCUR_PIDM =V_PIDM
                   --   AND S.SORLCUR_LEVL_CODE = P_NIVEL
                      AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                      AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                     --AND  S.SORLCUR_LEVL_CODE=
                      AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                      ---
                      AND S.SORLCUR_PIDM = SORLFOS_PIDM
                      AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                      AND SORLFOS_CACT_CODE = 'ACTIVE'
                      AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                      AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO
                      AND  O2.SORCMJR_MAJR_CODE||'-'||S.SORLCUR_LEVL_CODE=V_CARRERA_USUA||'-'||V_NIVEL_1;*/
            
              V_PRUEBA := 10872;
              select count(*)
                into V_NO_CC
                FROM SORLCUR@prod.int.upao.edu.pe S,
                     SORLFOS@prod.int.upao.edu.pe
               WHERE S.SORLCUR_PIDM = V_PIDM
                 AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
                 AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                 AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                    
                 AND SORLCUR_TERM_CODE =
                     (select MAX(XX.SORLCUR_TERM_CODE)
                        from SORLCUR@prod.int.upao.edu.pe XX,
                             SORLFOS@prod.int.upao.edu.pe YY
                       where sorlcur_pidm = V_PIDM
                         AND XX.SORLCUR_PIDM = YY.SORLFOS_PIDM
                         AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                         AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                         AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                         AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                         AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                         AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                         AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                    -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                 AND S.SORLCUR_PIDM = SORLFOS_PIDM
                 AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                 AND SORLFOS_CACT_CODE = 'ACTIVE'
                 AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
                    -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                 AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
            
              IF V_NO_CC > 0 THEN
              
                /* SELECT SORLCUR_COLL_CODE, (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=S.SORLCUR_COLL_CODE)  FACULTAD_DES,
                        O2.SORCMJR_MAJR_CODE AS SORLFOS_MAJR_CODE,    (SELECT STVMAJR_DESC FROM STVMAJR@prod.int.upao.edu.pe WHERE STVMAJR_CODE=O2.SORCMJR_MAJR_CODE)  AS CARRERA_DESC,
                        S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                       --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                         ,S.SORLCUR_PROGRAM AS PROGRAMA
                         INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE,V_LEVL_CODE,V_PROGRAMA_CARR
                FROM SORLCUR@prod.int.upao.edu.pe S, SORCMJR@prod.int.upao.edu.pe O2, SORLFOS@prod.int.upao.edu.pe
                WHERE S.SORLCUR_PIDM =V_PIDM
                --   AND S.SORLCUR_LEVL_CODE = P_NIVEL
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND  SORLCUR_TERM_CODE= ( select MAX(XX.SORLCUR_TERM_CODE)
                                  from SORLCUR@prod.int.upao.edu.pe XX  where sorlcur_pidm=V_PIDM
                                      AND SORLCUR_LMOD_CODE = 'LEARNER'
                                    AND SORLCUR_CACT_CODE = 'ACTIVE' )
                   AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
                   AND SORLFOS_CACT_CODE = 'ACTIVE'
                   AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;*/ --
                --Y
                SELECT DISTINCT SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                                SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                                S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                                S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                                --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                               ,
                                S.SORLCUR_PROGRAM AS PROGRAMA
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SORLCUR@prod.int.upao.edu.pe S,
                       SORLFOS@prod.int.upao.edu.pe AA
                 WHERE S.SORLCUR_PIDM = V_PIDM
                   AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
                   AND S.SORLCUR_LMOD_CODE = 'LEARNER'
                   AND S.SORLCUR_CACT_CODE = 'ACTIVE'
                   AND S.SORLCUR_CAMP_CODE like V_CAMP_CODE_1
                   AND EXISTS
                 (SELECT 'Y'
                          FROM stvcamp@prod.int.upao.edu.pe
                         WHERE STVCAMP_CODE LIKE S.SORLCUR_CAMP_CODE
                           AND STVCAMP_SITE_CODE IS NOT NULL)
                   AND SORLCUR_TERM_CODE || '-' || SORLCUR_SEQNO =
                       (select MAX(XX.SORLCUR_TERM_CODE || '-' ||
                                   SORLCUR_SEQNO)
                          from SORLCUR@prod.int.upao.edu.pe XX,
                               SORLFOS@prod.int.upao.edu.pe YY
                         where sorlcur_pidm = V_PIDM
                           AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                           AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                           AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                           AND XX.SORLCUR_TERM_CODE = S.SORLCUR_TERM_CODE
                           AND XX.SORLCUR_CAMP_CODE like V_CAMP_CODE_1 --SE ADOICIONO PARA SOLUCIONAR PROBLEMA DE COSNULTA POR CAMPUS
                           AND XX.sorlcur_pidm = YY.SORLFOS_PIDM
                           AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                           AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                           AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                           AND XX.SORLCUR_PRIORITY_NO =
                               YY.SORLFOS_PRIORITY_NO)
                      
                      -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
                   AND S.SORLCUR_PIDM = AA.SORLFOS_PIDM
                   AND S.SORLCUR_SEQNO = AA.SORLFOS_LCUR_SEQNO
                   AND AA.SORLFOS_CACT_CODE = 'ACTIVE'
                   AND AA.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                      -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
                   AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO
                   AND ROWNUM = 1;
              
              ELSE
              
                SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                                (SELECT STVCOLL_DESC
                                   FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                                  WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                                SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                                (SELECT STVMAJR_DESC
                                   FROM STVMAJR@prod.int.upao.edu.pe
                                  WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                                SGBSTDN_CAMP_CODE,
                                SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                                SGBSTDN_PROGRAM_1 PROGRAMA
                
                  INTO V_FACULTAD,
                       V_FACULTAD_DESC,
                       V_CARRERA,
                       V_CARRERA_DESC,
                       V_CAMP_CODE,
                       V_LEVL_CODE,
                       V_PROGRAMA_CARR
                  FROM SGBSTDN@prod.int.upao.edu.pe S
                 WHERE SGBSTDN_PIDM = V_PIDM
                      --AND ( NOT SGBSTDN_LEVL_CODE_2 IN('UB') OR SGBSTDN_LEVL_CODE_2 IS NULL)
                   AND SGBSTDN_LEVL_CODE_2 IS NULL
                   AND SGBSTDN_MAJR_CODE_1 = V_CARRERA_USUA
                   AND SGBSTDN_LEVL_CODE = V_NIVEL_1
                   and SGBSTDN_camp_code <> 'IN';
              
              END IF;
            
              IF (LENGTH(V_CAMP_CODE) = 0) THEN
                V_CAMP_CODE := 'M'; --SETEAMOS POR DEFECTO A CAMPUS PRINCIPAL
              END IF;
            
              V_PARAMETRO := V_CARRERA_USUA;
            
            END IF;
          
          ELSE
            --NO ES ALUMNOS
            V_PRUEBA := 10989;
          
            V_FACULTAD      := '';
            V_FACULTAD_DESC := '';
            V_CARRERA       := '';
            V_CARRERA_DESC  := '';
            V_CAMP_CODE     := '';
            V_LEVL_CODE     := '';
          
          END IF;
        
        ELSIF (v_soli_code = 'IE') THEN
        
          SELECT '' PIDM,
                 '' APELLIDOS,
                 YTVINST_DESCRIPCION,
                 '' DNI,
                 '' SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM YTVINST
           WHERE YTVINST_CODE = v_usua_id;
          V_TIPODOCUMENTO := ky_json.campo(jsonObj, 'p_tipodoc');
        
        ELSIF (v_soli_code = 'DA') THEN
        
          SELECT '' PIDM,
                 '' APELLIDOS,
                 YTRUNID_DESCRIPCION,
                 '' DNI,
                 '' SEXO
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM YTRUNID
           WHERE YTRUNID_CODE =
                 (SELECT YTRUNID_PADRE
                    FROM YTRUNID
                   WHERE YTRUNID_CODE = v_usua_id);
        
          --SELECT YTRUNID_DESCRIPCION  FROM  YTRUNID WHERE        YTRUNID_CODE=         (SELECT YTRUNID_PADRE FROM  YTRUNID   WHERE YTRUNID_CODE='000181'  )
        
          V_TIPODOCUMENTO := ky_json.campo(jsonObj, 'p_tipodoc');
        
        ELSIF (v_soli_code = 'GE') THEN
          --USUARIOS GENERALES
        
          /* SELECT '' PIDM,'' APELLIDOS,YTRUNID_DESCRIPCION,'' DNI,'' SEXO INTO V_PIDM,V_APELLIDOS,V_NOMBRES,V_DNI,V_SEXO
          FROM YTRUNID WHERE YTRUNID_CODE=(SELECT YTRUNID_PADRE FROM  YTRUNID   WHERE YTRUNID_CODE=v_usua_id) ;*/
        
          SELECT SPRIDEN_PIDM,
                 REPLACE(SPRIDEN_LAST_NAME, '  ', ' '),
                 SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
                 SPBPERS_SSN,
                 SPBPERS_SEX
            INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
            FROM SPRIDEN@prod.int.upao.edu.pe,
                 SATURN.SPBPERS@prod.int.upao.edu.pe
           WHERE SPRIDEN_ID = v_usua_id
             AND SPRIDEN_CHANGE_IND IS NULL
             AND SPBPERS_PIDM = SPRIDEN_PIDM;
        
        END IF;
      
        V_PRUEBA := 11017;
      
        --NUMERACION DE DOCUMENTO SACAMOS UN NUMERO TEMPORAL SE ASIGNARA EL VARDADERO NUMERO AL ENTREGAR EL DOCUMENTO
        SELECT YTRNUDO_NUMERACION_TEMP + 1
          INTO V_NUMERO
          FROM YTRNUDO
         WHERE YTRNUDO_PROC_CODE = v_plan_proc_code;
        UPDATE YTRNUDO
           SET YTRNUDO_NUMERACION_TEMP = YTRNUDO_NUMERACION_TEMP + 1
         WHERE YTRNUDO_PROC_CODE = v_plan_proc_code;
      
        --VERIFICAR SI TIENE UN EXPEDIENTE GENERAL PARA ADICIONAR SI NO TIENE DEVUELVE CERO
        SELECT NVL(MAX(YTBEXPE_CODE), 0)
          INTO V_TEXPE
          FROM YTBEXPE
         WHERE YTBEXPE_USUA_ID = v_usua_id
           AND YTBEXPE_IND_GENERAL = 'S';
      
        IF V_TEXPE = '0' THEN
          SELECT TO_NUMBER(MAX(YTBEXPE_CODE)) + 1
            INTO V_TEXPE
            FROM YTBEXPE;
          V_CODEEXP := LPAD(V_TEXPE, 10, '0');
          --CREANDO EL EXPEDIENTE GENERAL PARA SUS DOCUMENTOS
          INSERT INTO COMUMGR.YTBEXPE
            (YTBEXPE_CODE,
             YTBEXPE_FECHA_ACTIVIDAD,
             YTBEXPE_IND_ESTADO,
             YTBEXPE_DESCRIPCION,
             YTBEXPE_USUA_ID,
             YTBEXPE_USUA_ID_CREO,
             YTBEXPE_IND_GENERAL)
          VALUES
            (V_CODEEXP,
             SYSDATE,
             'A',
             'Expediente General',
             v_usua_id,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'S');
        ELSE
          V_CODEEXP := V_TEXPE;
        END IF;
      
        V_PRUEBA := 11045;
      
        --OBTENER LA PLANTILLA Y EL TIPO DE DOCUMENTO PARA REGISTRAR EN EL DOCUMENTO
      
        SELECT YTRPLAN_PLANTILLA,
               YTRPLAN_TITULO,
               YTAPROC_TIPO_CODE,
               YTRPLAN_TIEMPO,
               YTRPLAN_IND_FORMA_ENTREGA,
               YTRPLAN_IND_FORMA_RECEPCION,
               YTRPLAN_IND_DERIVAR,
               YTAPROC_UNID_CODE,
               YTRPLAN_IND_CAUNA,
               YTRPLAN_IND_SOLI_APRO,
               ytrplan_dias_vigencia,
               YTRPLAN_GENERA_DOCSALIDA,
               YTRPLAN_REQ_EVALUACION,
               YTRPLAN_TIPO_ANTICIPO,
               YTRPLAN_VERSION_MAJOR,
               YTRPLAN_VERSION_MINOR
          INTO V_PLANTILLA,
               V_ASUNTO,
               V_TIPODOC,
               V_TIEMPO,
               V_ENTREGA,
               V_RECEPCION,
               V_DERIVAR,
               V_DUENO_PROCESO,
               V_IND_CAUNA,
               V_SOLI_APRO,
               V_DIAS_VIGENCIA,
               V_GENERA_DOCSALIDA,
               V_REQ_EVALUACION,
               V_YTRPLAN_TIPO_ANTICIPO,
               V_VERSION_MAJOR,
               V_VERSION_MINOR
          FROM YTRPLAN, YTAPROC
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_SEQ = v_PLAN_SEQ
           AND YTRPLAN_PROC_CODE = YTAPROC_CODE;
      
        V_PRUEBA := 11058;
      
        /*
        SELECT  DISTINCT SGBSTDN_COLL_CODE_1 FACULTAD,
        (SELECT STVCOLL_DESC FROM STVCOLL@PROD.INT.UPAO.EDU.PE WHERE STVCOLL_CODE=SGBSTDN_COLL_CODE_1)  FACULTAD_DESC,SGBSTDN_MAJR_CODE_1 CARRERA,
        (SELECT STVMAJR_DESC FROM STVMAJR@PROD.INT.UPAO.EDU.PE WHERE STVMAJR_CODE=SGBSTDN_MAJR_CODE_1) CARRERA_DESC,sgbstdn_camp_code
        INTO V_FACULTAD,V_FACULTAD_DESC,V_CARRERA,V_CARRERA_DESC,V_CAMP_CODE
        
           FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
           WHERE SGBSTDN_PIDM=V_PIDM
           AND SGBSTDN_MAJR_CODE_1=P_MAJR_CODE;
           */
      
        /* V_FACULTAD:='';
        V_FACULTAD_DESC:='';
        V_CARRERA:='';
        V_CARRERA_DESC:='';
        V_CAMP_CODE:='';*/
      
        --INSERTAR DOCUMENTO
        /*INSERT INTO COMUMGR.YTBDOCU (
           YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
           YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID, YTBDOCU_USUA_ID_REG,
           YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
           YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA,
           YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES,
           YTBDOCU_ASUNTO, YTBDOCU_NUMERO_FOLIOS, YTBDOCU_IND_VIRTUAL,
           YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
           YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES, YTBDOCU_PIDM,YTBDOCU_COLL_DESC,YTBDOCU_COLL_CODE_1,YTBDOCU_MAJR_DESC,YTBDOCU_PERS_DNI,YTBDOCU_PERS_SEXO,YTBDOCU_NUMERO)
        
        VALUES (V_CODEDOC,1, P_ESTA_CODE, V_CODEEXP, P_COLL_CODE, P_PLAN_PROC_CODE,P_PLAN_SEQ,P_USUA_ID, P_USUA_ID_REG, SYSDATE,P_FECHA_RECEPCION,P_FECHA_EMISION,
         P_LEIDO,V_CAMP_CODE,P_DATA,P_BUSCA,V_PLANTILLA,P_OBSERVACIONES,V_ASUNTO, P_NUMERO_FOLIOS,P_IND_VIRTUAL,
         V_CARRERA,P_LEVL_CODE,P_CONDICION,V_APELLIDOS,V_NOMBRES,V_PIDM,V_FACULTAD_DESC,V_FACULTAD,V_CARRERA_DESC,V_DNI,V_SEXO,-1*V_NUMERO);
         */
      
        IF V_TIPO_DOC <> '06' THEN
          --SI NO ES UN DOCUMENTO SIN FORMATO SE LE ASIGNA EL ASUNTO DEL PROCESO
          v_tasunto := '0000';
        
        END IF;
      
        select to_char(sysdate, 'YYYY') into v_vaan_code from dual;
      
        /*FALTA SACAR EL COSTO DE LA TABLA DE REQUISITOS DE PAGO*/
      
        IF V_TERM_CODE IS NULL THEN
          V_TERM_CODE := NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL('UG'), 0);
        END IF;
      
        V_PRUEBA := 11109;
      
        --///ADICIONADO PARA APROBACI?N DE CREDITOS ADICIONALES DONDE SE ENVIA EL MONTO A PAGAR
        IF ky_json.campo(jsonObj, 'p_monto1') IS NOT NULL THEN
        
          V_COSTO_ENVIADO := ky_json.campo(jsonObj, 'p_monto1');
          IF V_COSTO_ENVIADO = '0' THEN
            V_COSTO_ENVIADO := FKYT_DOCU_DOCU_PP_COSTO_RECIBO(V_PIDM,
                                                              ky_json.campo(jsonObj,
                                                                            'p_recibo1'));
            IF V_COSTO_ENVIADO = '0' THEN
              V_MENSAJE_GLOBAL := 'ERP-ERR NO SE PUEDE APLICAR COSTO CERO A ESTE PROCESO';
              RAISE exp_GLOBAL;
            END IF;
          END IF;
        ELSIF ky_json.campo(jsonObj, 'p_costo') IS NOT NULL THEN
          V_COSTO_ENVIADO := ky_json.campo(jsonObj, 'p_costo');
        ELSE
          V_COSTO_ENVIADO := 0;
        END IF;
      
        --NUMERO PARA DOCUMENTO
        --SELECT TO_NUMBER(MAX(YTBDOCU_CODE))+1  INTO V_CODE  FROM YTBDOCU;
        SELECT SEQ_YTBDOCU_CODE.NEXTVAL INTO V_CODE FROM DUAL;
        --IF V_CODE IS NULL THEN
        --   V_CODE := 1;
        -- END IF;
        V_CODEDOC := LPAD(V_CODE, 10, '0');
      
        SELECT NVL(TO_NUMBER(MAX(YTBDOCU_NUM_REG)), 1)
          INTO V_NUM_REG
          FROM COMUMGR.YTBDOCU
         WHERE YTBDOCU_VAAN_CODE = v_vaan_code;
      
        --VAMOS ASIGNAR UN CODIGO TEMPORAL PARA NO PERDER EL SECUENCIAL
        IF V_NUM_REG < 900000 THEN
          V_NUM_REG := 900000;
        ELSE
          V_NUM_REG := 900000 + 1;
        END IF;
        --FIN DE SECUENCIAL
      
        --V_NUM_REG := V_NUM_REG +1;
      
        select DBMS_RANDOM.STRING('X', 4)
          INTO V_YTBDOCU_TRANSCRIPT
          from dual;
        V_YTBDOCU_TRANSCRIPT := V_YTBDOCU_TRANSCRIPT || '-' || V_CODEDOC;
      
        --V_PRUEBA_TEXT :=  v_tasunto;  YTBDOCU_COSTO
        INSERT INTO COMUMGR.YTBDOCU
          (YTBDOCU_CODE,
           YTBDOCU_SEQ,
           YTBDOCU_ESTA_CODE,
           YTBDOCU_EXPE_CODE,
           YTBDOCU_COLL_CODE,
           YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ,
           YTBDOCU_USUA_ID,
           YTBDOCU_USUA_ID_REG,
           YTBDOCU_FECHA_ACTIVIDAD,
           YTBDOCU_FECHA_RECEPCION,
           YTBDOCU_FECHA_EMISION,
           YTBDOCU_LEIDO,
           YTBDOCU_CAMP_CODE,
           YTBDOCU_DATA,
           YTBDOCU_BUSCA,
           YTBDOCU_PLANTILLA,
           YTBDOCU_OBSERVACIONES,
           YTBDOCU_ASUNTO,
           YTBDOCU_NUMERO_FOLIOS,
           YTBDOCU_IND_VIRTUAL,
           YTBDOCU_MAJR_CODE,
           YTBDOCU_LEVL_CODE,
           YTBDOCU_CONDICION,
           YTBDOCU_APELLIDOS,
           YTBDOCU_NOMBRES,
           YTBDOCU_PIDM,
           YTBDOCU_MAJR_DESC,
           YTBDOCU_COLL_CODE_1,
           YTBDOCU_COLL_DESC,
           YTBDOCU_PERS_DNI,
           YTBDOCU_PERS_SEXO,
           YTBDOCU_FECHA_ENTREGA,
           YTBDOCU_ID_USUA_ENT,
           YTBDOCU_NUMERO,
           YTBDOCU_ID_USUA_VALIDO,
           YTBDOCU_FECHA_VALIDO,
           YTBDOCU_FECHA_COMPLETO,
           YTBDOCU_CODIGO_BARRAS,
           YTBDOCU_UNIDAD_ENTREGAR,
           YTBDOCU_ID_USUA_RECIBE,
           YTBDOCU_UNIDAD_ENTREGAR_COAS,
           YTBDOCU_TIPO_CODE,
           YTBDOCU_SOLI_CODE,
           YTBDOCU_TIDO_CODE,
           YTBDOCU_NUM_EXT,
           YTBDOCU_PRIO_CODE,
           YTBDOCU_VAAN_CODE,
           YTBDOCU_TIEMPO,
           YTBDOCU_COSTO,
           YTBDOCU_CARR_PROG,
           YTBDOCU_IND_ENTREGA,
           YTBDOCU_IND_RECEPCION,
           YTBDOCU_IND_DERIVAR,
           YTBDOCU_USUA_ORG,
           YTBDOCU_DOC_REFERENCIA,
           YTBDOCU_PADRE,
           YTBDOCU_NUM_COPIA,
           YTBDOCU_ASUN_CODE,
           YTBDOCU_IP,
           YTBDOCU_CAEX_CODE,
           YTBDOCU_IND_CAUNA,
           YTBDOCU_TERM_CODE,
           YTBDOCU_NUM_REG,
           YTBDOCU_dias_vigencia,
           YTBDOCU_GENERA_DOCSALIDA,
           YTBDOCU_REQ_EVALUACION,
           YTBDOCU_TRANSCRIPT,
           YTBDOCU_VERSION_MAJOR,
           YTBDOCU_VERSION_MINOR)
        VALUES
          (V_CODEDOC,
           1,
           ky_json.campo(jsonObj, 'esta_code'),
           V_CODEEXP,
           ky_json.campo(jsonObj, 'coll_code'),
           ky_json.campo(jsonObj, 'plan_proc_code'),
           ky_json.campo(jsonObj, 'plan_seq'),
           ky_json.campo(jsonObj, 'usua_id'),
           ky_json.campo(jsonObj, 'usua_id_reg'),
           sysdate,
           null,
           ky_json.campo(jsonObj, 'fecha_emision'),
           ky_json.campo(jsonObj, 'leido'),
           V_CAMP_CODE,
           V_CAMPOS,
           ky_json.campo(jsonObj, 'busca'),
           V_PLANTILLA,
           ky_json.campo(jsonObj, 'observaciones'),
           V_ASUNTO /* COMENTADO 16/08/2021 ky_json.campo(jsonObj, 'asunto')*/,
           ky_json.campo(jsonObj, 'numero_folios'),
           ky_json.campo(jsonObj, 'ind_virtual'),
           V_CARRERA,
           V_LEVL_CODE,
           COMUMGR.KYG_UTILIDADES.FYG_CONDICION_USUARIO(P_DATA),
           V_APELLIDOS,
           V_NOMBRES,
           V_PIDM,
           V_CARRERA_DESC,
           V_FACULTAD,
           V_FACULTAD_DESC,
           V_DNI,
           V_SEXO,
           null,
           null,
           -1 * V_NUMERO,
           null,
           null,
           null,
           ky_json.campo(jsonObj, 'codigo_barras'),
           '',
           ky_json.campo(jsonObj, 'id_usua_recibe'),
           ky_json.campo(jsonObj, 'unidad_entrega_coas'),
           V_TIPODOC,
           v_soli_code,
           V_TIPODOCUMENTO,
           ky_json.campo(jsonObj, 'p_num_ext'),
           ky_json.campo(jsonObj, 'prioridad'),
           v_vaan_code,
           V_TIEMPO,
           V_COSTO_ENVIADO,
           V_PROGRAMA_CARR,
           V_ENTREGA,
           V_RECEPCION,
           V_DERIVAR,
           V_ORG_USUA,
           ky_json.campo(jsonObj, 'p_referencia'),
           ky_json.campo(jsonObj, 'p_padre'),
           V_NUM_COPIAS,
           v_tasunto,
           ky_json.campo(jsonObj, 'p_ip'),
           V_CARPETA,
           V_IND_CAUNA,
           V_TERM_CODE,
           V_NUM_REG,
           V_DIAS_VIGENCIA,
           V_GENERA_DOCSALIDA,
           V_REQ_EVALUACION,
           V_YTBDOCU_TRANSCRIPT,
           V_VERSION_MAJOR,
           V_VERSION_MINOR);
      
        V_PRUEBA := 11183;
      
        --QUITAMOS LA ky_json.campo(jsonObj, 'condicion') POR KYG_UTILIDADES.CONDICION_USUARIO  07/08/2020
        --*************NUEVO PARA AGRUPAR DOCUMENTO EN CARPETA AL CREARLO SE BRINDA EL CODIGO DE CARPETA....
        IF ky_json.campo(jsonObj, 'p_carpeta456') IS NOT NULL THEN
          -- V_JSON_CARP:='{"p_carpeta":"'||ky_json.campo(jsonObj, 'p_carpeta456')||'","p_documento":"'||V_CODEDOC||'-1'||'","usua_id":"'||ky_json.campo(jsonObj, 'usua_id_reg')||'","p_commit":"NO"}';
          -- KYT_DOCU_DOCU_PP_YTRDOCA_AUD('ADI',V_JSON_CARP,V_MSG_GLOBAL);
          SELECT COUNT(*)
            INTO V_APERTURADO
            FROM YTBCAEX
           WHERE YTBCAEX_CODE = ky_json.campo(jsonObj, 'p_carpeta456')
             AND YTBCAEX_IND_ESTADO = 'A';
          IF V_APERTURADO > 0 THEN
            --///////////////// QUITAMOS DOCUMENTO DE LA CARPETA A APROBAR
            DELETE COMUMGR.YTRDOCA
             WHERE YTRDOCA_DOCU_CODE || '-' || YTRDOCA_DOCU_SEQ =
                   V_CODEDOC || '-1';
            SELECT (COUNT(*) + 1)
              INTO V_SEQ1
              FROM COMUMGR.YTRDOCA
             WHERE YTRDOCA_CAEX_CODE =
                   ky_json.campo(jsonObj, 'p_carpeta456');
            INSERT INTO COMUMGR.YTRDOCA
              (YTRDOCA_DOCU_CODE,
               YTRDOCA_DOCU_SEQ,
               YTRDOCA_CAEX_CODE,
               YTRDOCA_SEQ,
               YTRDOCA_USUA_ID,
               YTRDOCA_FECHA_ACTIVIDAD,
               YTRDOCA_IND_ESTADO,
               YTRDOCA_COMENTARIO)
            VALUES
              (V_CODEDOC,
               1,
               ky_json.campo(jsonObj, 'p_carpeta456'),
               V_SEQ1,
               ky_json.campo(jsonObj, 'usua_id_reg'),
               sysdate,
               'A',
               'Adicionado desde otro modulo');
          ELSE
            V_MSG_GLOBAL := 'ERP-ERR CARPETA NO ESTA HABILITADA PARA EJECUTAR LA ACCI?N SOLICITADA';
            RAISE exp_GLOBAL;
          END IF;
        END IF;
        --************FIN DE INSERTAR DOCUMENTO EN CARPETA
      
        V_SEQ1 := 0;
      
        --************+ SI ES DOCUMENTO INTERNO(ENTRE UNIDADES ADMINISTRATIVAS) SE ACTUALIZA LA NUMERACI?N POR TIPO DE DOCUMENTO
        IF V_TIPODOC in ('05', '03') THEN
          -- DOCSA sea adiciona para generar numeraci?n de documentos salients
          V_EXISTE_NUM_DOC := 0;
        
          V_YEAR := TO_CHAR(SYSDATE, 'YYYY');
          --***********VERIFICAR CONSULTA PARA NO PERMITIR NUMEROS REPETIDOS POR UNIDAD
          SELECT COUNT(*)
            INTO V_EXISTE_NUM_DOC
            FROM COMUMGR.YTBDOCU
           WHERE YTBDOCU_USUA_ID = ky_json.campo(jsonObj, 'usua_id')
             AND YTBDOCU_TIDO_CODE = TRIM(V_TIPODOCUMENTO)
             AND YTBDOCU_NUM_EXT = ky_json.campo(jsonObj, 'p_num_ext')
             AND YTBDOCU_VAAN_CODE = TRIM(V_YEAR);
        
          V_EXISTE_NUM_DOC := 0;
          --***********VERIFICAR QUE NUMERO DE DOCUMENTO NO EXISTA
          IF V_EXISTE_NUM_DOC > 0 THEN
            V_MSG_GLOBAL := 'ERP-ERR YA EXISTE UN DOCUMENTO PARA EL USUARIO CON ESE NUMERO ' ||
                            V_EXISTE_NUM_DOC ||
                            ky_json.campo(jsonObj, 'usua_id') ||
                            V_TIPODOCUMENTO ||
                            ky_json.campo(jsonObj, 'p_num_ext');
            RAISE exp_GLOBAL;
          END IF;
        
          UPDATE COMUMGR.YTRNDUN
             SET YTRNDUN_NUM_ACT = YTRNDUN_NUM_ACT + 1
           WHERE YTRNDUN_UNID_CODE =
                 trim(ky_json.campo(jsonObj, 'usua_id'))
             AND YTRNDUN_TIDO_CODE = V_TIPODOCUMENTO
             AND YTRNDUN_IND_ESTADO = 'A'
             AND YTRNDUN_VAAN_CODE = V_YEAR;
        
          IF NOT (SQL%ROWCOUNT > 0) THEN
            V_MSG_GLOBAL := 'ERP-ERR NO HAY NUMERACI?N ASIGNADA PARA ESTE TIPO DE DOCUMENTO';
            RAISE exp_GLOBAL;
          END IF;
          --*********PON SIGLAS
          SELECT YTRUNID_SIGLA ||
                 DECODE(YTRUNID_SEDE, '0', '', '-' || YTRUNID_SEDE)
            INTO V_SIGLA
            FROM COMUMGR.YTRUNID
           WHERE YTRUNID_CODE = trim(ky_json.campo(jsonObj, 'usua_id'));
          --*************COLOCAMOS LAS SIGLAS EN EL DOCUMENTO
          UPDATE COMUMGR.YTBDOCU
             SET YTBDOCU_SIGLA_UNI = V_SIGLA
           WHERE YTBDOCU_CODE = V_CODEDOC;
        END IF;
      
        --VERIFICAMOS SI TIENE ADJUNTOS TEMPORALES
        IF (ky_json.campo(jsonObj, 'p_adju') = 'SI') THEN
          UPDATE COMUMGR.YTRAPAD
             SET YTRAPAD_APPL_CODE       = V_CODEDOC || '-1',
                 YTRAPAD_APPL_REFERENCIA = 'DOCDOC'
           WHERE YTRAPAD_USUA_ID = ky_json.campo(jsonObj, 'usua_id_reg')
             AND YTRAPAD_IND_ESTADO = 'A'
             AND YTRAPAD_APPL_REFERENCIA = 'DOCTEMP';
        
        END IF;
      
        --AGREGAMOS LA NUMERACION TEMPORAL QUE SE ACTUALIZARA AL MOMENTO DE ENTREGAR EL DOCUMENTO
      
        --ESTADO INICIAL
      
        IF ky_json.campo(jsonObj, 'esta_code') = 'EV' THEN
          --SI SE QUIERE ENVIAR DIRECTO A EVALUACI?N
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'NU',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
        END IF;
      
        ---- REGISTRAMOS ESTADOS X DEFECTO DE TRAMITE -- BORRADOR Y EVALUACION
        ---------------------------------------------
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_CODEDOC,
           1,
           YTRESDO_SEQ_SEQ.nextval,
           'NU',
           SYSDATE,
           ky_json.campo(jsonObj, 'usua_id_reg'),
           'SYS(autom?tico)');
      
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_CODEDOC,
           1,
           YTRESDO_SEQ_SEQ.nextval,
           'EV',
           SYSDATE,
           ky_json.campo(jsonObj, 'usua_id_reg'),
           'SYS(autom?tico)');
        -------------------------------------------------
      
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_CODEDOC,
           1,
           YTRESDO_SEQ_SEQ.nextval,
           ky_json.campo(jsonObj, 'esta_code'),
           SYSDATE,
           ky_json.campo(jsonObj, 'usua_id_reg'),
           'SYS');
      
        --YTRESDO_SEQ_SEQ.nextval
      
        IF V_RECEPCION = 'R' THEN
          --R=RECEPCION PRESENCIAL,
        
          --ACTUALIZAMOS EL ESTADO DEL DOCUMENTO A EVALUACI?N
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE       = 'EV',
                 YTBDOCU_FECHA_RECEPCION = SYSDATE
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_CODEDOC || '-' || '1';
          --REGISTRAMOS EL HISTORIAL DE ESTADOS DE DOCUMENTO
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'EV',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
        END IF;
      
        --DOCUMENTOS ENTRANTES or DOCUMENTOS ENTRE UNIDADES
        IF (V_TIPODOC = '02' OR V_TIPODOC = '05' OR V_TIPODOC = '03') THEN
          --DOCSA  DOCUMENTOS SALIENTES
        
          V_IND_DERIVADO := 'S';
        
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'TR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS');
          -- SELECT YTBDOCU_PLAN_PROC_CODE INTO V_PLAN_CODE FROM YTBDOCU  WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_CODE_DOC;
          SELECT YTRNUDO_NUMERACION_ACT + 1
            INTO V_NUMERO
            FROM YTRNUDO
           WHERE YTRNUDO_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code');
          UPDATE YTRNUDO
             SET YTRNUDO_NUMERACION_ACT = YTRNUDO_NUMERACION_ACT + 1
           WHERE YTRNUDO_PROC_CODE =
                 ky_json.campo(jsonObj, 'plan_proc_code');
        
          UPDATE YTBDOCU
             SET YTBDOCU_NUMERO = V_NUMERO, YTBDOCU_ESTA_CODE = 'TR'
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_CODEDOC || '-' || '1'
             AND YTBDOCU_NUMERO < 0
             AND YTBDOCU_FECHA_COMPLETO IS NULL; --PARA CREAR NUMERACI?N SOLO UNA VEZ
        
        END IF;
      
        --/////CAMPOS ADICIONALES   05/07/2016
        /* INGRESA EN EL FORMATO   {"000481_CURSO":"HUMA-2222"}*/
        --V_PRUEBA := -1;
        V_PRUEBA_TEXT := V_CAMPOS;
        IF NOT V_CAMPOS IS NULL THEN
          json_DATA := json(V_CAMPOS);
        
          /*INSERT INTO COMUMGR.YTLOG (YTLOG_CODE, YTLOG_VARIABLES)
          VALUES ( V_CODEDOC,V_CAMPOS);*/
        
          OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
          LOOP
            FETCH C_CAMPOS
              INTO C_CAMPOS_REC;
            EXIT WHEN C_CAMPOS%NOTFOUND;
          
            IF (C_CAMPOS_REC.CONTROL <> 'OC') THEN
              --/////////////SI CAMPO NO ES OCULTO
            
              IF (C_CAMPOS_REC.CONTROL = 'BT') THEN
              
                SELECT COUNT(*)
                  INTO v_encontro
                  FROM COMUMGR.YTRTEMP
                 WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                   AND YTRTEMP_ESTADO = 'A'
                   AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                   AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                   AND YTRTEMP_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRTEMP_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRTEMP_CARRERA = V_CARRERA_USUA
                   AND YTRTEMP_PROGRAMA = V_NIVEL_1
                   AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
              
                IF v_encontro <> 0 THEN
                
                  SELECT YTRTEMP_JSON_DATA_CLOB
                    INTO V_YTRTEMP_JSON_DATA_CLOB
                    FROM COMUMGR.YTRTEMP
                   WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                     AND YTRTEMP_ESTADO = 'A'
                     AND YTRTEMP_USUARIO =
                         ky_json.campo(jsonObj, 'usua_id')
                     AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                     AND YTRTEMP_PLAN_PROC_CODE =
                         ky_json.campo(jsonObj, 'plan_proc_code')
                     AND YTRTEMP_PLAN_SEQ =
                         ky_json.campo(jsonObj, 'plan_seq')
                     AND YTRTEMP_CARRERA = V_CARRERA_USUA
                     AND YTRTEMP_PROGRAMA = V_NIVEL_1
                     AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                
                  SELECT YTRTEMP_JSON_CAMPOS_DINAMICOS
                    INTO V_YTRTEMP_JSON_CAMPOS_DINA
                    FROM COMUMGR.YTRTEMP
                   WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                     AND YTRTEMP_ESTADO = 'A'
                     AND YTRTEMP_USUARIO =
                         ky_json.campo(jsonObj, 'usua_id')
                     AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                     AND YTRTEMP_PLAN_PROC_CODE =
                         ky_json.campo(jsonObj, 'plan_proc_code')
                     AND YTRTEMP_PLAN_SEQ =
                         ky_json.campo(jsonObj, 'plan_seq')
                     AND YTRTEMP_CARRERA = V_CARRERA_USUA
                     AND YTRTEMP_PROGRAMA = V_NIVEL_1
                     AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                
                ELSE
                
                  V_YTRTEMP_JSON_DATA_CLOB := empty_clob();
                
                END IF;
              
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR,
                   YTRVAMD_VALOR_JSON,
                   YTRVAMD_VALOR_DEFECTO)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR,
                   V_YTRTEMP_JSON_DATA_CLOB,
                   REPLACE(REPLACE(C_CAMPOS_REC.VALOR_DEFECTO, '<p>', ''),
                           '</p>',
                           ''));
              
                /*IF V_YTRTEMP_JSON_CAMPOS_DINA = empty_clob() THEN
                
                    UPDATE COMUMGR.YTRTEMP SET YTRTEMP_FECHA_REG_DOCUMENTO = SYSDATE, YTRTEMP_OBSERVACIONES = 'REGISTRO DOCUMENTO' , YTRTEMP_ESTADO = 'E'
                    WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                    AND YTRTEMP_PLAN_PROC_CODE = ky_json.campo(jsonObj, 'plan_proc_code') AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
                    AND YTRTEMP_CARRERA = V_CARRERA_USUA AND YTRTEMP_PROGRAMA = V_NIVEL_1 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1 ;
                
                END IF; */
              
              ELSE
                v_encontro := 0;
                --IF C_CAMPOS_REC.CONTROL <> 'TA' THEN
                v_encontro := INSTR(ky_json.campo(json_DATA,
                                                  C_CAMPOS_REC.CODE),
                                    '>');
                --END IF;
              
                --INSERT INTO COMUMGR.YTLOG (YTLOG_CODE, YTLOG_VARIABLES)
                --VALUES ( V_CODEDOC,v_encontro ||'->'|| C_CAMPOS_REC.CODE ||'-->json'|| ky_json.campo(json_DATA, C_CAMPOS_REC.CODE));
              
                IF (v_encontro = 0) THEN
                
                  --IF NOT ky_json.campo(json_DATA, C_CAMPOS_REC.CODE) IS NULL THEN
                
                  INSERT INTO COMUMGR.YTRVAMD
                    (YTRVAMD_DOCU_CODE,
                     YTRVAMD_DOCU_SEQ,
                     YTRVAMD_CAME_CODE,
                     YTRVAMD_NOM_CAMPO,
                     YTRVAMD_FECHA_ACTIVIDAD,
                     YTRVAMD_USUA_ID,
                     YTRVAMD_VALOR,
                     YTRVAMD_CAME_ID_CAMPO,
                     YTRVAMD_CODE,
                     YTRVAMD_PLCA_SEQ,
                     YTRVAMD_ORDEN,
                     YTRVAMD_CONTROL,
                     YTRVAMD_REQUERIDO,
                     YTRVAMD_TIPO_CAMPO,
                     YTRVAMD_IND_VALOR)
                  VALUES
                    (V_CODEDOC,
                     1,
                     C_CAMPOS_REC.CAME_CODE,
                     C_CAMPOS_REC.NOM_CAMPO,
                     SYSDATE,
                     ky_json.campo(jsonObj, 'usua_id'),
                     ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                     C_CAMPOS_REC.ID_CAMPO,
                     C_CAMPOS_REC.CODE,
                     C_CAMPOS_REC.SEQ,
                     C_CAMPOS_REC.ORDEN,
                     C_CAMPOS_REC.CONTROL,
                     C_CAMPOS_REC.REQUERIDO,
                     C_CAMPOS_REC.TIPO_CAMPO,
                     C_CAMPOS_REC.YTRCAME_IND_VALOR);
                
                  --YTRCAME_CONTROL CONTROL,YTRCAME_REQUERIDO REQUERIDO,YTRPLCA_ORDEN ORDEN,YTRCAME_TIPO_CAMPO TIPO_CAMPO
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),json_DATA);
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),v_encontro);
                
                  --END IF;
                ELSE
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.CODE);
                
                  --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.YTRCAME_MODAL);
                
                  --VERIFICAR SI EL CONTROL ESTA EN LA MODAL
                  IF (C_CAMPOS_REC.YTRCAME_MODAL = 'S') THEN
                  
                    SELECT COUNT(*)
                      INTO v_encontro
                      FROM COMUMGR.YTRTEMP
                     WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                       AND YTRTEMP_ESTADO = 'A'
                       AND YTRTEMP_USUARIO =
                           ky_json.campo(jsonObj, 'usua_id')
                       AND YTRTEMP_PLAN_PROC_CODE =
                           ky_json.campo(jsonObj, 'plan_proc_code')
                       AND YTRTEMP_PLAN_SEQ =
                           ky_json.campo(jsonObj, 'plan_seq')
                       AND YTRTEMP_CARRERA = V_CARRERA_USUA
                       AND YTRTEMP_PROGRAMA = V_NIVEL_1
                       AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                  
                    IF v_encontro <> 0 THEN
                    
                      SELECT YTRTEMP_JSON_CAMPOS_DINAMICOS
                        INTO V_YTRTEMP_JSON_CAMPOS_DINA
                        FROM COMUMGR.YTRTEMP
                       WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO
                         AND YTRTEMP_ESTADO = 'A'
                         AND YTRTEMP_USUARIO =
                             ky_json.campo(jsonObj, 'usua_id')
                         AND YTRTEMP_PLAN_PROC_CODE =
                             ky_json.campo(jsonObj, 'plan_proc_code')
                         AND YTRTEMP_PLAN_SEQ =
                             ky_json.campo(jsonObj, 'plan_seq')
                         AND YTRTEMP_CARRERA = V_CARRERA_USUA
                         AND YTRTEMP_PROGRAMA = V_NIVEL_1
                         AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
                    
                    ELSE
                    
                      V_YTRTEMP_JSON_CAMPOS_DINA := empty_clob();
                    
                    END IF;
                    /*
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.VALOR_DEFECTO);
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(jsonObj, 'usua_id') );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),C_CAMPOS_REC.CAME_CODE );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(jsonObj, 'plan_proc_code') );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(jsonObj, 'plan_seq') );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_CARRERA_USUA );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_NIVEL_1 );
                    INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_CAMP_CODE_1 );*/
                  
                    IF V_YTRTEMP_JSON_CAMPOS_DINA <> empty_clob() THEN
                    
                      V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                            '[',
                                                            '');
                      V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                            ']',
                                                            '');
                    
                      json_DATA_DINAM := json(V_YTRTEMP_JSON_CAMPOS_DINA);
                    
                      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(V_YTRTEMP_JSON_CAMPOS_DINA, C_CAMPOS_REC.CODE));
                    
                      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_YTRTEMP_JSON_CAMPOS_DINA);
                    
                      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(json_DATA_DINAM, C_CAMPOS_REC.CODE));
                    
                      v_encontro := INSTR(ky_json.campo(json_DATA_DINAM,
                                                        C_CAMPOS_REC.CODE),
                                          '>');
                    
                      V_VALOR3 := '';
                      select substr(ky_json.campo(json_DATA_DINAM,
                                                  C_CAMPOS_REC.CODE),
                                    1,
                                    v_encontro - 1),
                             substr(ky_json.campo(json_DATA_DINAM,
                                                  C_CAMPOS_REC.CODE),
                                    v_encontro + 1)
                        INTO V_VALOR1, v_valor2
                        from dual;
                    
                      INSERT INTO COMUMGR.YTRVAMD
                        (YTRVAMD_DOCU_CODE,
                         YTRVAMD_DOCU_SEQ,
                         YTRVAMD_CAME_CODE,
                         YTRVAMD_NOM_CAMPO,
                         YTRVAMD_FECHA_ACTIVIDAD,
                         YTRVAMD_USUA_ID,
                         YTRVAMD_VALOR,
                         YTRVAMD_CAME_ID_CAMPO,
                         YTRVAMD_CODE,
                         YTRVAMD_PLCA_SEQ,
                         YTRVAMD_VALOR1,
                         YTRVAMD_ORDEN,
                         YTRVAMD_CONTROL,
                         YTRVAMD_REQUERIDO,
                         YTRVAMD_TIPO_CAMPO,
                         YTRVAMD_IND_VALOR,
                         YTRVAMD_EN_MODAL)
                      VALUES
                        (V_CODEDOC,
                         1,
                         C_CAMPOS_REC.CAME_CODE,
                         C_CAMPOS_REC.NOM_CAMPO,
                         SYSDATE,
                         ky_json.campo(jsonObj, 'usua_id'),
                         V_VALOR1,
                         C_CAMPOS_REC.ID_CAMPO,
                         C_CAMPOS_REC.CODE,
                         C_CAMPOS_REC.SEQ,
                         V_VALOR2,
                         C_CAMPOS_REC.ORDEN,
                         C_CAMPOS_REC.CONTROL,
                         C_CAMPOS_REC.REQUERIDO,
                         C_CAMPOS_REC.TIPO_CAMPO,
                         C_CAMPOS_REC.YTRCAME_IND_VALOR,
                         'S');
                    
                      /*
                      UPDATE COMUMGR.YTRTEMP SET YTRTEMP_FECHA_REG_DOCUMENTO = SYSDATE, YTRTEMP_OBSERVACIONES = 'REGISTRO DOCUMENTO' , YTRTEMP_ESTADO = 'E'
                         WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                         AND YTRTEMP_PLAN_PROC_CODE = ky_json.campo(jsonObj, 'plan_proc_code') AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
                         AND YTRTEMP_CARRERA = V_CARRERA_USUA AND YTRTEMP_PROGRAMA = V_NIVEL_1 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1 ;*/
                    
                    END IF;
                  
                  ELSE
                  
                    V_VALOR3 := '';
                  
                    select substr(ky_json.campo(json_DATA,
                                                C_CAMPOS_REC.CODE),
                                  1,
                                  v_encontro - 1),
                           substr(ky_json.campo(json_DATA,
                                                C_CAMPOS_REC.CODE),
                                  v_encontro + 1)
                      INTO V_VALOR1, v_valor2
                      from dual;
                  
                    if C_CAMPOS_REC.YTRCAME_IND_VALOR = 'S' THEN
                    
                      SELECT YTRVACA_VALOR
                        INTO V_VALOR3
                        FROM COMUMGR.YTRVACA
                       WHERE YTRVACA_CODE = V_VALOR1;
                    
                    END IF;
                  
                    INSERT INTO COMUMGR.YTRVAMD
                      (YTRVAMD_DOCU_CODE,
                       YTRVAMD_DOCU_SEQ,
                       YTRVAMD_CAME_CODE,
                       YTRVAMD_NOM_CAMPO,
                       YTRVAMD_FECHA_ACTIVIDAD,
                       YTRVAMD_USUA_ID,
                       YTRVAMD_VALOR,
                       YTRVAMD_CAME_ID_CAMPO,
                       YTRVAMD_CODE,
                       YTRVAMD_PLCA_SEQ,
                       YTRVAMD_VALOR1,
                       YTRVAMD_ORDEN,
                       YTRVAMD_CONTROL,
                       YTRVAMD_REQUERIDO,
                       YTRVAMD_TIPO_CAMPO,
                       YTRVAMD_IND_VALOR,
                       YTRVAMD_VALOR_DEFECTO)
                    VALUES
                      (V_CODEDOC,
                       1,
                       C_CAMPOS_REC.CAME_CODE,
                       C_CAMPOS_REC.NOM_CAMPO,
                       SYSDATE,
                       ky_json.campo(jsonObj, 'usua_id'),
                       V_VALOR1,
                       C_CAMPOS_REC.ID_CAMPO,
                       C_CAMPOS_REC.CODE,
                       C_CAMPOS_REC.SEQ,
                       V_VALOR2,
                       C_CAMPOS_REC.ORDEN,
                       C_CAMPOS_REC.CONTROL,
                       C_CAMPOS_REC.REQUERIDO,
                       C_CAMPOS_REC.TIPO_CAMPO,
                       C_CAMPOS_REC.YTRCAME_IND_VALOR,
                       V_VALOR3);
                  
                  END IF;
                
                END IF;
              
              END IF;
            
            ELSE
              --SI ES OCULTO    INSERTAMOS EL VALOR POR DEFECTO
              V_VALOR2 := '';
              --/// VAMOS A VERIFICAR SI ES CALCULADO
              IF (C_CAMPOS_REC.TIPO_CAMPO = 'A') THEN
                --//SI ES UN CAMPO CALCULADO
              
                V_JSON_CAMPO_CALCULADO := '{"p_carrera":"' ||
                                          V_CARRERA_USUA || '","usua_id":"' ||
                                          v_usua_id || '"}';
              
                V_CAMPO_CALCULADO := kyt_ejecutor.EJECUTOR(C_CAMPOS_REC.VALOR_DEFECTO,
                                                           P_DATA);
              
                IF V_CAMPO_CALCULADO = 'ERR' THEN
                
                  --LO QUITAMOS DE LA FUNCION MERITO PORUQE OCASIONABA QUE NO ENTRE EL ERRROR
                  --comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('ORDEN-MERI','EC','TD','DO','KYG_UTILIDADES.FYG_MERITO', P_DATA || SQLERRM ,V_USUA_ID,'');
                
                  V_MSG_GLOBAL := 'ERP-ERR AL GENERAR INFORMACION ADICIONAL ( ADI )' ||
                                  P_DATA;
                  RAISE exp_CAMPO_CALCULADO;
                END IF;
              
                IF V_CAMPO_CALCULADO = 'Ninguno' THEN
                
                  --LO QUITAMOS DE LA FUNCION MERITO PORUQE OCASIONABA QUE NO ENTRE EL ERRROR
                  --comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('ORDEN-MERI','EC','TD','DO','KYG_UTILIDADES.FYG_MERITO', P_DATA || SQLERRM ,V_USUA_ID,'');
                
                  V_MSG_GLOBAL := 'ERP-ERR AL GENERAR INFORMACION ADICIONAL - NINGUNO ( ADI )' ||
                                  P_DATA;
                  RAISE exp_CAMPO_CALCULADO;
                END IF;
              
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   V_CAMPO_CALCULADO,
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   V_VALOR2,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR);
              
              ELSE
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   C_CAMPOS_REC.VALOR_DEFECTO,
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   V_VALOR2,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR);
              END IF;
            
            END IF;
          
          END LOOP;
          CLOSE C_CAMPOS;
        END IF;
      
        --V_PRUEBA := -2;
        --REQUISITOS
      
        V_PRUEBA := 4;
      
        OPEN DT(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH DT
            INTO DT_ROW;
          EXIT WHEN DT%NOTFOUND;
        
          V_DETAIL_CODE    := NULL;
          V_PAGO_DESC      := NULL;
          V_PAGO_MONTO     := NULL;
          V_PAGO_LEVL_CODE := NULL;
          V_PAGO_BANCO     := '';
        
          SELECT TO_NUMBER(MAX(YTRREDO_CODE)) + 1
            INTO V_CODEREQ
            FROM YTRREDO;
        
          IF V_CODEREQ IS NULL THEN
            V_CODEREQ := 1;
          END IF;
        
          SELECT LPAD(V_CODEREQ, 8, '0') INTO V_CODEREQ_1 FROM DUAL;
        
          IF (DT_ROW.TIRE_CODE = 'POS') THEN
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO,
               YTRREDO_IND_OPCIONAL)
            VALUES
              (V_CODEREQ_1,
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Sera ejecutado autom?ticamente al aprobar el documento(sistema)',
               'V',
               sysdate,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO,
               DT_ROW.IND_OPCIONAL);
          
            --V_VALIDA_PC='0'  ===> INDICA QUE NO TIENE RESTRICCIONES
            --VALIDA LOS REQUISITOS DE PRECONDICION SI YA FUERON VALIDADOS
            --
          
          ELSIF (DT_ROW.TIRE_CODE = 'CON' AND V_VALIDA_PC = '0') THEN
            INSERT INTO YTRREDO
              (YTRREDO_CODE,
               YTBDOCU_CODE,
               YTBDOCU_SEQ,
               YTRREDO_REQU_CODE,
               YTRREDO_DESCRIPCION,
               YTRREDO_USUA_ID,
               YTRREDO_FECHA_ACTIVIDAD,
               YTRREDO_IND_ADJ_VIRTUAL,
               YTRREDO_COMENTARIO,
               YTRREDO_IND_ESTADO,
               YTRREDO_FECHA_ACEPTADO,
               YTRREDO_TIRE_CODE,
               YTRREDO_ORDEN,
               YTRREDO_METODO,
               YTRREDO_AYUDA,
               YTRREDO_CONCEPTO_PAGO,
               YTRREDO_IND_OPCIONAL)
            VALUES
              (V_CODEREQ_1,
               V_CODEDOC,
               1,
               DT_ROW.CODE,
               DT_ROW.DESCRIPCION,
               ky_json.campo(jsonObj, 'usua_id'),
               SYSDATE,
               DT_ROW.ADJUNTAR,
               'Aprobaci?n automatica(sistema)',
               'V',
               sysdate,
               DT_ROW.TIRE_CODE,
               DT_ROW.ORDEN,
               DT_ROW.FUNCION,
               DT_ROW.AYUDA,
               DT_ROW.CONCEPTO_PAGO,
               DT_ROW.IND_OPCIONAL);
          
          ELSE
          
            IF (DT_ROW.COMO_GMONTO = 'EM' AND DT_ROW.TIRE_CODE = 'REC') THEN
              IF LENGTH(ky_json.campo(jsonObj, 'p_monto1')) = 0 OR
                 ky_json.campo(jsonObj, 'p_monto1') IS NULL THEN
                V_MSG_GLOBAL := 'ERP-ERR NO SE ENVIO EL MONTO DEL REQUISITO';
                RAISE EXP_GLOBAL;
              END IF;
            
              V_MONTO_REQ := ky_json.campo(jsonObj, 'p_monto1');
            ELSIF (DT_ROW.COMO_GMONTO = 'CM' AND DT_ROW.TIRE_CODE = 'REC') THEN
              V_MONTO_REQ := KYG_UTILIDADES.FYG_MONTO_POR_CONCEPTO(DT_ROW.CONCEPTO_PAGO) *
                             V_NUM_COPIAS;
            END IF;
          
            --*******ADICIONAR FUNCIONALIDAD CAMPOS ADICIONALES
            IF ((DT_ROW.TIRE_CODE = 'ADJ' OR DT_ROW.TIRE_CODE = 'GEN') AND
               (LENGTH(NVL(DT_ROW.FUNCION, '0')) <= 1 AND
               LENGTH(NVL(DT_ROW.CAME_CODE, '0')) > 1 AND
               LENGTH(NVL(DT_ROW.CAME_VALOR, '0')) > 1)) THEN
              --************VAMOS A VERIFICAR QUE CAMPO CONDICIONAL SELECCIONO EL USUARIO
              SELECT COUNT(*)
                INTO CAMPOA
                FROM COMUMGR.YTRVAMD
               where YTRVAMD_DOCU_CODE = V_CODEDOC
                 AND YTRVAMD_DOCU_SEQ = 1
                 AND YTRVAMD_CAME_CODE = DT_ROW.CAME_CODE
                 AND YTRVAMD_VALOR = DT_ROW.CAME_VALOR;
            
              IF (CAMPOA > 0) THEN
              
                INSERT INTO YTRREDO
                  (YTRREDO_CODE,
                   YTBDOCU_CODE,
                   YTBDOCU_SEQ,
                   YTRREDO_REQU_CODE,
                   YTRREDO_DESCRIPCION,
                   YTRREDO_USUA_ID,
                   YTRREDO_FECHA_ACTIVIDAD,
                   YTRREDO_IND_ADJ_VIRTUAL,
                   YTRREDO_COMENTARIO,
                   YTRREDO_IND_ESTADO,
                   YTRREDO_FECHA_ACEPTADO,
                   YTRREDO_TIRE_CODE,
                   YTRREDO_ORDEN,
                   YTRREDO_METODO,
                   YTRREDO_AYUDA,
                   YTRREDO_CONCEPTO_PAGO,
                   YTRREDO_ADJ_NUMBER,
                   YTRREDO_ADJ_FORMATO,
                   YTRREDO_PROC_CODE,
                   YTRREDO_CM,
                   YTRREDO_IND_FVALIDA,
                   YTRREDO_MONTO,
                   YTRREDO_IND_OPCIONAL)
                VALUES
                  (V_CODEREQ_1,
                   V_CODEDOC,
                   1,
                   DT_ROW.CODE,
                   DT_ROW.DESCRIPCION,
                   ky_json.campo(jsonObj, 'usua_id'),
                   SYSDATE,
                   DT_ROW.ADJUNTAR,
                   'Pendiente',
                   'P',
                   null,
                   DT_ROW.TIRE_CODE,
                   DT_ROW.ORDEN,
                   DT_ROW.FUNCION,
                   DT_ROW.AYUDA,
                   DT_ROW.CONCEPTO_PAGO,
                   DT_ROW.ADJ_NUM,
                   DT_ROW.ADJ_FORMATO,
                   DT_ROW.PROC_CODE,
                   DT_ROW.YTVREQU_CM,
                   DT_ROW.YTVREQU_IND_FVALIDA,
                   V_MONTO_REQ,
                   DT_ROW.IND_OPCIONAL);
              END IF;
            ELSE
              --**** SI SON DE TIPO ADJUNTO Y HAY FUNCION
              IF ((DT_ROW.TIRE_CODE = 'ADJ' OR DT_ROW.TIRE_CODE = 'GEN') AND
                 LENGTH(NVL(DT_ROW.FUNCION, '0')) > 1) THEN
              
                V_DATA_JSON := '{"p_carrera":"' || V_CARRERA_USUA ||
                               '","p_campo":"' || dt_row.CAME_CODE || '"}';
                IF kyt_ejecutor.EJECUTOR(DT_ROW.FUNCION, V_DATA_JSON) = '1' THEN
                
                  INSERT INTO YTRREDO
                    (YTRREDO_CODE,
                     YTBDOCU_CODE,
                     YTBDOCU_SEQ,
                     YTRREDO_REQU_CODE,
                     YTRREDO_DESCRIPCION,
                     YTRREDO_USUA_ID,
                     YTRREDO_FECHA_ACTIVIDAD,
                     YTRREDO_IND_ADJ_VIRTUAL,
                     YTRREDO_COMENTARIO,
                     YTRREDO_IND_ESTADO,
                     YTRREDO_FECHA_ACEPTADO,
                     YTRREDO_TIRE_CODE,
                     YTRREDO_ORDEN,
                     YTRREDO_METODO,
                     YTRREDO_AYUDA,
                     YTRREDO_CONCEPTO_PAGO,
                     YTRREDO_ADJ_NUMBER,
                     YTRREDO_ADJ_FORMATO,
                     YTRREDO_PROC_CODE,
                     YTRREDO_CM,
                     YTRREDO_IND_FVALIDA,
                     YTRREDO_MONTO,
                     YTRREDO_IND_OPCIONAL)
                  VALUES
                    (V_CODEREQ_1,
                     V_CODEDOC,
                     1,
                     DT_ROW.CODE,
                     DT_ROW.DESCRIPCION,
                     ky_json.campo(jsonObj, 'usua_id'),
                     SYSDATE,
                     DT_ROW.ADJUNTAR,
                     'Pendiente',
                     'P',
                     null,
                     DT_ROW.TIRE_CODE,
                     DT_ROW.ORDEN,
                     DT_ROW.FUNCION,
                     DT_ROW.AYUDA,
                     DT_ROW.CONCEPTO_PAGO,
                     DT_ROW.ADJ_NUM,
                     DT_ROW.ADJ_FORMATO,
                     DT_ROW.PROC_CODE,
                     DT_ROW.YTVREQU_CM,
                     DT_ROW.YTVREQU_IND_FVALIDA,
                     V_MONTO_REQ,
                     DT_ROW.IND_OPCIONAL);
                END IF;
              ELSE
                INSERT INTO YTRREDO
                  (YTRREDO_CODE,
                   YTBDOCU_CODE,
                   YTBDOCU_SEQ,
                   YTRREDO_REQU_CODE,
                   YTRREDO_DESCRIPCION,
                   YTRREDO_USUA_ID,
                   YTRREDO_FECHA_ACTIVIDAD,
                   YTRREDO_IND_ADJ_VIRTUAL,
                   YTRREDO_COMENTARIO,
                   YTRREDO_IND_ESTADO,
                   YTRREDO_FECHA_ACEPTADO,
                   YTRREDO_TIRE_CODE,
                   YTRREDO_ORDEN,
                   YTRREDO_METODO,
                   YTRREDO_AYUDA,
                   YTRREDO_CONCEPTO_PAGO,
                   YTRREDO_ADJ_NUMBER,
                   YTRREDO_ADJ_FORMATO,
                   YTRREDO_PROC_CODE,
                   YTRREDO_CM,
                   YTRREDO_IND_FVALIDA,
                   YTRREDO_MONTO,
                   YTRREDO_IND_OPCIONAL)
                VALUES
                  (V_CODEREQ_1,
                   V_CODEDOC,
                   1,
                   DT_ROW.CODE,
                   DT_ROW.DESCRIPCION,
                   ky_json.campo(jsonObj, 'usua_id'),
                   SYSDATE,
                   DT_ROW.ADJUNTAR,
                   'Pendiente',
                   'P',
                   null,
                   DT_ROW.TIRE_CODE,
                   DT_ROW.ORDEN,
                   DT_ROW.FUNCION,
                   DT_ROW.AYUDA,
                   DT_ROW.CONCEPTO_PAGO,
                   DT_ROW.ADJ_NUM,
                   DT_ROW.ADJ_FORMATO,
                   DT_ROW.PROC_CODE,
                   DT_ROW.YTVREQU_CM,
                   DT_ROW.YTVREQU_IND_FVALIDA,
                   V_MONTO_REQ,
                   DT_ROW.IND_OPCIONAL);
              END IF;
            END IF;
          
            --************FIN CAMPOS ADICIONALES
          END IF;
        
          --//////////////////SI ES RECIBO DE PAGO Y ES NECESARIO ADJUNATR EL PAGO PARA SOLICITAR EL PROCESO
        
          IF DT_ROW.IND_SOLIC_ACD = '1' AND DT_ROW.TIRE_CODE = 'REC' THEN
            V_RECIBO_PAGO := ky_json.campo(jsonObj, 'p_recibo1');
            IF LENGTH(V_RECIBO_PAGO) = 0 OR V_RECIBO_PAGO IS NULL THEN
              V_MSG_GLOBAL := 'ERP-ERR DEBES ADJUNTAR EL RECIBO PARA ' ||
                              DT_ROW.DESCRIPCION || ' RECIBO ' ||
                              V_RECIBO_PAGO;
              RAISE EXP_GLOBAL;
            
            ELSE
              --///////VAMOS A VERIFICAR SI EL RECIBO ESTA DISPONIBLE Y ES EL CORRECTO PARA EL REQUISITO
            
              --///VERIFICAMOS SI TIENE QUE ESTAR PAGADO
              IF (DT_ROW.IND_PD = 1) THEN
                --TIENE QUE ESTAR PAGADO
                KYT_DOCU_DOCU_PP_PAGO_REQ(V_CODEDOC,
                                          '1',
                                          V_CODEREQ_1,
                                          'REQU',
                                          ky_json.campo(jsonObj,
                                                        'p_recibo1'),
                                          ky_json.campo(jsonObj, 'usua_id'),
                                          'ADJUNTADO DESDE AULA',
                                          DT_ROW.IND_AUTOA,
                                          V_MSG_GLOBAL);
              ELSE
                --SE ACEPTA Y SOLO DEBE ESTAR SEMBRADO COMO DEUDA
                KYT_DOCU_DOCU_PP_PAGO_REQ_D(V_CODEDOC,
                                            '1',
                                            V_CODEREQ_1,
                                            'REQU',
                                            ky_json.campo(jsonObj,
                                                          'p_recibo1'),
                                            ky_json.campo(jsonObj,
                                                          'usua_id'),
                                            'ADJUNTADO DESDE AULA',
                                            DT_ROW.IND_AUTOA,
                                            V_MSG_GLOBAL);
              END IF;
              IF V_MSG_GLOBAL != 'OK' THEN
                V_MSG_GLOBAL := V_MSG_GLOBAL;
                RAISE EXP_GLOBAL;
              END IF;
            
            END IF;
          END IF;
        
          --///////////////////////////////////////////////////////////////////////////////////////
          --///////////////NUEVO PARA ADJUNTAR PLANTILLA DE CONSTANCIA
          --INSERTA EN APAD EL REQUERIMIENTO DE DOCUMENTOS ADJUNTOS SI ES TIPO CONSTANCIA
        
          IF DT_ROW.TIRE_CODE = 'CNS' THEN
            SELECT YTRPLAN_PLANTILLA, YTRPLAN_TITULO
              INTO V_CONS_PLANTILLA, V_CONS_NOM
              FROM COMUMGR.YTRPLAN
             WHERE YTRPLAN_PROC_CODE || '-' || YTRPLAN_SEQ =
                   DT_ROW.PROC_CODE;
          
            /*V_CONS_NOM VARCHAR2(300);
            V_CONS_PLANTILLA CLOB;
            V_APAD_MAX INT;*/
            SELECT NVL(MAX(YTRAPAD_SEQ), 0)
              INTO V_APAD_MAX
              FROM COMUMGR.YTRAPAD
             WHERE YTRAPAD_ADJU_CODE = '1'; --1 NOS INDICA QUE VA UTILIZAR DOC COMO REFERENCIA
          
            INSERT INTO COMUMGR.YTRAPAD
              (YTRAPAD_ADJU_CODE,
               YTRAPAD_APPL_CODE,
               YTRAPAD_APPL_REFERENCIA,
               YTRAPAD_FECHA_ACTIVIDAD,
               YTRAPAD_USUA_ID,
               YTRAPAD_IND_ESTADO,
               YTRAPAD_CONTENIDO,
               YTRAPAD_URL,
               YTRAPAD_SEQ,
               YTRAPAD_NOMBRE)
            VALUES
              (1,
               V_CODEDOC || '-1-' || V_CODEREQ_1,
               'DOCDOC',
               SYSDATE,
               ky_json.campo(jsonObj, 'usua_id'),
               'A',
               V_CONS_PLANTILLA,
               '',
               V_APAD_MAX + 1,
               V_CONS_NOM);
          
          END IF;
        
          --,YTVREQU_ADJ_NUM ADJ_NUM,YTVREQU_ADJ_FORMATO ADJ_FORMATO
        
          --INSERTAMOS EL PAGO EN LA TABLA TEMPORAL
        
          /*   IF(DT_ROW.TIRE_CODE='REC' AND DT_ROW.CONCEPTO_PAGO IS NOT NULL) THEN
          
                            --SELECT YTBPABA_SEQ INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
                            SELECT NVL(MAX(YTBPABA_SEQ),0)+1 INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
          
                            --V_NUM_COPIAS  NUMERO DE COPIAS HAY QUE MULTIPLICAR POR EL COSTO PARA
                            --V_CAMP_CODE EL CAMPUS PARA SACAR EL CONCEPTO DE PAGO
                            select TBBDETC_DESC,TBBDETC_AMOUNT,TBBDETC_DCAT_CODE,TBBDETC_LEVL_CODE INTO V_PAGO_DESC,V_PAGO_MONTO,V_PAGO_CATE,V_PAGO_LEVL_CODE
                            from tbbdetc@PROD.INT.UPAO.EDU.PE
                            where tbbdetc_detail_code = DT_ROW.CONCEPTO_PAGO;
          
          
                            V_PERIODO_PAGO:=KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_PAGO_LEVL_CODE);
          
                            IF V_PERIODO_PAGO=0 THEN
                                RAISE EXP_PER_PAGO;
                            END IF;
          
          
                            INSERT INTO COMUMGR.YTBPABA (
                               YTBPABA_DOCU_CODE, YTBPABA_DOCU_SEQ, YTBPABA_SEQ,
                               YTBPABA_FECHA_ACTIVIDAD, YTBPABA_MONTO, YTBPABA_CAMPUS,
                               YTBPABA_CODE_DETALLE, YTBPABA_IND_ESTADO, YTBPABA_FECHA_PAGO,
                               YTBPABA_USUA_ID, YTBPABA_USUA_PIDM, YTBPABA_CODE_DETALLE_DESC,YTBPABA_CODE_DETALLE_CATE,YTBPABA_TERM_CODE, YTBPABA_FECHA_INI,
                               YTBPABA_FECHA_FIN, YTBPABA_NUM_DOC_QPAGO, YTBPABA_SEM_ANNO)
                            VALUES ( V_CODEDOC, 1, V_SEQ_PABA, SYSDATE, V_PAGO_MONTO, V_CAMP_CODE, DT_ROW.CONCEPTO_PAGO, 'P', NULL,
                             v_usua_id, V_PIDM, V_PAGO_DESC,V_PAGO_CATE,V_PERIODO_PAGO,SYSDATE,SYSDATE+20,NULL,TO_CHAR(SYSDATE,'WW')||TO_CHAR(SYSDATE,'YY'));
          
          END IF;*/
        
          --PARA PAGOS EN BANCO
          IF (DT_ROW.TIRE_CODE = 'REC' AND V_TIPODOC <> '06' AND
             DT_ROW.IND_SOLIC_ACD = '0' AND DT_ROW.DONDE_VALIDA = '0') THEN
            --06 ::> DOCUMENTOS SIN FORMATO NO ENVIARPAGO AL BANCO
          
            --SELECT YTBPABA_SEQ INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
            ---SELECT NVL(MAX(YTBPABA_SEQ),0)+1 INTO V_SEQ_PABA FROM YTBPABA WHERE YTBPABA_DOCU_CODE=V_CODEDOC AND YTBPABA_DOCU_SEQ=1;
          
            --V_NUM_COPIAS  NUMERO DE COPIAS HAY QUE MULTIPLICAR POR EL COSTO PARA
            --V_CAMP_CODE EL CAMPUS PARA SACAR EL CONCEPTO DE PAGO
          
            /* select TBBDETC_DESC,TBBDETC_AMOUNT,TBBDETC_DCAT_CODE,TBBDETC_LEVL_CODE INTO V_PAGO_DESC,V_PAGO_MONTO,V_PAGO_CATE,V_PAGO_LEVL_CODE
            from tbbdetc@PROD.INT.UPAO.EDU.PE
            where tbbdetc_detail_code = DT_ROW.CONCEPTO_PAGO;*/
          
            OPEN C_CP(DT_ROW.CODE, V_CAMP_CODE);
            FETCH C_CP
              INTO V_DETAIL_CODE,
                   V_PAGO_DESC,
                   V_PAGO_MONTO,
                   V_PAGO_LEVL_CODE;
            CLOSE C_CP;
          
            IF V_DETAIL_CODE IS NULL THEN
              --//CONCEPTOS DE PAGO NO FUERON CONFIGURADOS
              RAISE EXP_CP;
            END IF;
          
            IF V_PAGO_LEVL_CODE = '0' THEN
              V_PAGO_LEVL_CODE := 'UG';
            END IF;
            V_PERIODO_PAGO := NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_LEVL_CODE),
                                  0);
          
            IF V_PERIODO_PAGO = 0 THEN
              RAISE EXP_PER_PAGO;
            END IF;
          
            /*INSERT INTO COMUMGR.YTBPABA (
               YTBPABA_DOCU_CODE, YTBPABA_DOCU_SEQ, YTBPABA_SEQ,
               YTBPABA_FECHA_ACTIVIDAD, YTBPABA_MONTO, YTBPABA_CAMPUS,
               YTBPABA_CODE_DETALLE, YTBPABA_IND_ESTADO, YTBPABA_FECHA_PAGO,
               YTBPABA_USUA_ID, YTBPABA_USUA_PIDM, YTBPABA_CODE_DETALLE_DESC,YTBPABA_CODE_DETALLE_CATE,YTBPABA_TERM_CODE, YTBPABA_FECHA_INI,
               YTBPABA_FECHA_FIN, YTBPABA_NUM_DOC_QPAGO, YTBPABA_SEM_ANNO)
            VALUES ( V_CODEDOC, 1, V_SEQ_PABA, SYSDATE, V_PAGO_MONTO, V_CAMP_CODE, DT_ROW.CONCEPTO_PAGO, 'P', NULL,
             v_usua_id, V_PIDM, V_PAGO_DESC,V_PAGO_CATE,V_PERIODO_PAGO,SYSDATE,SYSDATE+20,NULL,TO_CHAR(SYSDATE,'WW')||TO_CHAR(SYSDATE,'YY'));
             */
          
            /*INSERTAR EN TABLA DE PAGOS A BANCO*/
            --TZRPADH_TIPO=3 TRAMITE DOCUMENTARIO
          
            --SELECT NVL(MAX(TZRPADH_CODE),1) INTO V_SEQ_TZRPADH FROM  TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE;
          
            /*procedure PYG_CARGO_TRAMITE(P_CODE IN OUT NUMBER,P_TIPO IN NUMBER,P_PIDM  IN NUMBER , P_DETAIL_CODE IN VARCHAR2  ,
            P_INI_DATE  IN DATE ,P_FIN_DATE IN DATE,P_VIG_DATE IN DATE      ,
            P_TERM_CODE IN VARCHAR2, P_CAMP_CODE IN VARCHAR2, P_LEVL_CODE IN VARCHAR2,P_USER IN VARCHAR2,P_REDO_CODE IN VARCHAR2,P_NUM_COPIA IN INTEGER,
            P_DOCU_CODE VARCHAR2,P_DOCU_SEQ INTEGER,V_MSG OUT varchar2)*/
          
            --el usuario cuenta con 5 dias para realizar pago de lo contario el documento debera ser archivado
          
            --////////////////SACANDO VALOR DE PAGO EN DIAS EN BANCO
            V_VPARAMETRO := KYG_UTILIDADES.FYS_DAME_PARAMETRO('T04');
          
            IF (V_VPARAMETRO = 'SPXXX') THEN
              --///INDICA QUE PARAMETRO NO ESTA CONFIGURADO APLICARA 5 DIAS POR DEFECTO
              V_VPARAMETRO := 5;
            END IF;
          
            BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_TRAMITE@PROD.INT.UPAO.EDU.PE(V_PAGO_BANCO,
                                                                                    V_YTRPLAN_TIPO_ANTICIPO,
                                                                                    V_PIDM,
                                                                                    V_DETAIL_CODE,
                                                                                    TO_DATE(KYG_UTILIDADES.FYS_DAME_PARAMETRO('T07'),
                                                                                            'DD/MM/YYYY'),
                                                                                    TO_DATE(TO_CHAR(SYSDATE +
                                                                                                    V_VPARAMETRO,
                                                                                                    'DD/MM/YYYY')),
                                                                                    TO_DATE(TO_CHAR(SYSDATE +
                                                                                                    V_VPARAMETRO,
                                                                                                    'DD/MM/YYYY')),
                                                                                    V_PERIODO_PAGO,
                                                                                    V_CAMP_CODE,
                                                                                    V_LEVL_CODE,
                                                                                    v_usua_id,
                                                                                    V_CODEREQ_1,
                                                                                    V_NUM_COPIAS,
                                                                                    V_CODEDOC,
                                                                                    1,
                                                                                    V_MONTO_REQ,
                                                                                    'REQ',
                                                                                    V_MSG_BANCO);
          
            -- IF V_MSG_BANCO='OK' THEN
            --//////////////////////////////////////////////
            -- INSERTAR DETALLE DE PAGO DE TR?MITE
          
            -- ELSE
            --      RAISE EXP_PAGO_BANCO;
            -- END IF;
          
            IF V_MSG_BANCO <> 'OK' THEN
              RAISE EXP_PAGO_BANCO;
            ELSE
              --/// SE ACTUALIZA EL REQUERIMIENTO CON EL CODIGO DE PAGO DEL BANCO
              UPDATE COMUMGR.YTRREDO
                 SET YTRREDO_PADH_CODE = V_PAGO_BANCO
               WHERE YTRREDO_CODE = V_CODEREQ_1;
            END IF;
          
            /*INSERT INTO TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE (
               TZRPADH_CODE, TZRPADH_TIPO, TZRPADH_PIDM,
               TZRPADH_DETAIL_CODE, TZRPADH_INI_DATE, TZRPADH_FIN_DATE,
               TZRPADH_VIG_DATE, TZRPADH_TERM_CODE, TZRPADH_CAMP_CODE,
               TZRPADH_LEVL_CODE, TZRPADH_ACTIVITY_DATE, TZRPADH_USER,
               TZRPADH_STATUS, TZRPADH_RECEIPT_NUMBER)
            VALUES (BANINST1.SEQ_TZRPADH_CODE, 3, V_PIDM , V_DETAIL_CODE, SYSDATE, SYSDATE+20,
             SYSDATE+21, V_PERIODO_PAGO,V_CAMP_CODE, V_PAGO_LEVL_CODE, SYSDATE, v_usua_id,1, NULL);*/
          
          END IF;
        
          --FIN DE REGISTRO DE PAGO
        
        END LOOP;
        CLOSE DT;
      
        V_PRUEBA := 11926;
      
        --PARA DOCUMENTOS SIN FORMATO:::> VERIFICAR SU REQUISITO DE PAGO
      
        IF V_TIPODOC = '06' THEN
        
          V_DETAIL_CODE    := NULL;
          V_PAGO_DESC      := NULL;
          V_PAGO_MONTO     := NULL;
          V_PAGO_LEVL_CODE := NULL;
        
          V_MONTO_TOT_PAG := NULL;
        
          IF v_tasunto <> '0000' THEN
          
            SELECT TO_NUMBER(MAX(YTRREDO_CODE)) + 1
              INTO V_CODEREQ
              FROM YTRREDO;
          
            IF V_CODEREQ IS NULL THEN
              V_CODEREQ := 1;
            END IF;
          
            SELECT LPAD(V_CODEREQ, 8, '0') INTO V_CODEREQ_1 FROM DUAL;
          
            --V_CODE_REQ:=v_tasunto;
          
            -- C_CP_MONTO(v_tasunto) V_MONTO_TOT_PAG
          
            SELECT NVL(YTRASUN_REQU_CODE, -2)
              INTO V_CODE_RP
              FROM YTRASUN
             WHERE YTRASUN_CODE = v_tasunto;
          
            OPEN C_CP_MONTO(V_CODE_RP, V_CAMP_CODE);
            FETCH C_CP_MONTO
              INTO V_MONTO_TOT_PAG;
            CLOSE C_CP_MONTO;
          
            IF V_MONTO_TOT_PAG IS NULL THEN
              RAISE EXP_CP_SF;
            ELSE
              UPDATE YTBDOCU
                 SET YTBDOCU_COSTO = V_MONTO_TOT_PAG
               WHERE YTBDOCU_CODE = V_CODEDOC;
            END IF;
          
            OPEN DT_REQ(V_CODE_RP);
            LOOP
              FETCH DT_REQ
                INTO DT_REQ_ROW;
              EXIT WHEN DT_REQ%NOTFOUND;
              INSERT INTO YTRREDO
                (YTRREDO_CODE,
                 YTBDOCU_CODE,
                 YTBDOCU_SEQ,
                 YTRREDO_REQU_CODE,
                 YTRREDO_DESCRIPCION,
                 YTRREDO_USUA_ID,
                 YTRREDO_FECHA_ACTIVIDAD,
                 YTRREDO_IND_ADJ_VIRTUAL,
                 YTRREDO_COMENTARIO,
                 YTRREDO_IND_ESTADO,
                 YTRREDO_FECHA_ACEPTADO,
                 YTRREDO_TIRE_CODE,
                 YTRREDO_ORDEN,
                 YTRREDO_METODO,
                 YTRREDO_AYUDA,
                 YTRREDO_CONCEPTO_PAGO,
                 YTRREDO_ADJ_NUMBER,
                 YTRREDO_ADJ_FORMATO,
                 YTRREDO_PROC_CODE,
                 YTRREDO_IND_OPCIONAL)
              VALUES
                (V_CODEREQ_1,
                 V_CODEDOC,
                 1,
                 DT_REQ_ROW.CODE,
                 DT_REQ_ROW.DESCRIPCION,
                 ky_json.campo(jsonObj, 'usua_id'),
                 SYSDATE,
                 DT_REQ_ROW.ADJUNTAR,
                 'Pendiente',
                 'P',
                 null,
                 DT_REQ_ROW.TIRE_CODE,
                 (SELECT NVL(MAX(YTRREDO_ORDEN) + 1, 1)
                    FROM COMUMGR.YTRREDO
                   WHERE YTBDOCU_CODE = V_CODEDOC),
                 DT_REQ_ROW.FUNCION,
                 DT_REQ_ROW.AYUDA,
                 DT_REQ_ROW.CONCEPTO_PAGO,
                 DT_REQ_ROW.ADJ_NUM,
                 DT_REQ_ROW.ADJ_FORMATO,
                 DT_REQ_ROW.PROC_CODE,
                 DT_ROW.IND_OPCIONAL);
            END LOOP;
            CLOSE DT_REQ;
          
            --YTVREQU_ADJ_NUM ADJ_NUM,YTVREQU_ADJ_FORMATO ADJ_FORMATO
            /*
            
            --PARA PAGOS EN BANCO
                       --  IF(DT_ROW.TIRE_CODE='REC' AND V_TIPODOC <>'06') THEN  --06 ::> DOCUMENTOS SIN FORMATO NO ENVIARPAGO AL BANCO
            
                                                OPEN  C_CP(DT_ROW.CODE, V_CAMP_CODE);
                                                 FETCH C_CP INTO V_DETAIL_CODE,V_PAGO_DESC,V_PAGO_MONTO,V_PAGO_LEVL_CODE;
                                                 CLOSE C_CP;
            
                                                 IF V_DETAIL_CODE IS NULL THEN
                                                   --//CONCEPTOS DE PAGO NO FUERON CONFIGURADOS
                                                   RAISE EXP_CP;
                                                 END IF;
            
            
                                             V_PERIODO_PAGO:=NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_LEVL_CODE),0);
            
                                             IF V_PERIODO_PAGO=0 THEN
                                             RAISE EXP_PER_PAGO;
                                             END IF;
            
                                          BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_TRAMITE@PROD.INT.UPAO.EDU.PE(V_PAGO_BANCO,3,V_PIDM,V_DETAIL_CODE,
                                           TO_CHAR(SYSDATE,'DD/MM/YYY'), SYSDATE+20,
                                          SYSDATE+21,V_PERIODO_PAGO,V_CAMP_CODE,V_LEVL_CODE,v_usua_id,V_CODEREQ_1,V_NUM_COPIAS,V_CODEDOC,1,V_MSG_BANCO);
                                           -- IF V_MSG_BANCO='OK' THEN
                                             --//////////////////////////////////////////////
                                             -- INSERTAR DETA LLE DE PAGO DE TR?MITE
                                           -- ELSE
                                           --      RAISE EXP_PAGO_BANCO;
                                           -- END IF;
                                           IF V_MSG_BANCO<>'OK' THEN
                                             RAISE EXP_PAGO_BANCO;
                                           ELSE
                                             --/// SE ACTUALIZA EL REQUERIMIENTO CON EL CODIGO DE PAGO DEL BANCO
                                              UPDATE COMUMGR.YTRREDO SET YTRREDO_PADH_CODE=V_PAGO_BANCO
                                              WHERE YTRREDO_CODE=V_CODEREQ_1;
                                           END IF;
            
                       --   END IF;
                       */
          END IF;
        
          --FIN DE REGISTRO DE PAGO
        
        END IF;
      
        --/////////////VERIFICAR SI YA NO HAY REQUSITOS PENDIENTES
        --////////////LO ENVIAMOS DIRECTO A TR?MITE
      
        SELECT COUNT(*)
          INTO V_FALTA_APROB
          FROM COMUMGR.YTRREDO
         WHERE YTBDOCU_CODE = V_CODEDOC
           AND YTRREDO_IND_ENV_USUA = 'N'
           AND YTRREDO_IND_FVALIDA = 0
           AND NOT YTRREDO_TIRE_CODE in
                (SELECT YTVTIRE_CODE
                      FROM COMUMGR.YTVTIRE
                     WHERE YTVTIRE_RESPONSABLE = 'UP'
                       AND YTVTIRE_IND_ESTADO = 'A');
        IF V_FALTA_APROB = 0 THEN
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE       = 'TR',
                 YTBDOCU_FECHA_RECEPCION = SYSDATE
           WHERE YTBDOCU_CODE = V_CODEDOC
             AND YTBDOCU_ESTA_CODE <> 'TR';
          -- AND YTBDOCU_USUA_ID=P_USUA_ID;
          --/////////PRIMERO INSERTAMOS EL ESTADO DE EVALUACI?N PARA SEGUIR LA REGLA DE ESTADOS
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'EV',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS(autom?tico)');
        
          --//////////ENVIAMOS A TRAMITE
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_CODEDOC,
             1,
             YTRESDO_SEQ_SEQ.nextval,
             'TR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'SYS(autom?tico)');
        
          --////////INSERTAMOS EL COMENTARIO
          INSERT INTO COMUMGR.YTRCOME
            (YTRCOME_CODE,
             YTRCOME_DOCU_CODE,
             YTRCOME_DOCU_SEQ,
             YTRCOME_FECHA_ACTIVIDAD,
             YTRCOME_USUA_ID,
             YTRCOME_TICO_CODE,
             YTRCOME_MENSAJE,
             YTRCOME_NOTI_CORREO,
             YTRCOME_USUA_NOMBRE)
          VALUES
            (SEQ_YTRCOME_CODE.NEXTVAL,
             V_CODEDOC,
             1,
             sysdate,
             ky_json.campo(jsonObj, 'usua_id_reg'),
             'USUA',
             '<span style="color:blue; font-weight:bold;">Documento fue enviado a Evaluaci?n de la unidad respectiva</span>',
             0,
             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                        'usua_id_reg')),
                                                           'X'));
        END IF;
      
        --/////////////////////////////////////////////GENERAR COLA DE APROBACIONES PARA DOCUMENTO.////////////////////////////////////////////////////
      
        /*CURSOR DT1(P_PROC_CODE VARCHAR2,P_SEQ VARCHAR2) IS
        SELECT  YTRPRCO_COLA_CODE ,YTRCODE_CODE,YTRCODE_ORGN_CODE ORGN,YTRCODE_COAS_CODE COAS,YTRCODE_DESCRIPCION DESCRIPCION,YTRCODE_SUBDENOMINACION SUBDENOMINACION,YTRCODE_NIVEL NIVEL
        FROM YTRPRCO ,YTRCODE
        WHERE  YTRPRCO_PLAN_PROC_CODE=P_PROC_CODE AND  YTRPRCO_PLAN_SEQ=P_SEQ
        AND YTRPRCO_COLA_CODE=YTRCODE_COLA_CODE AND YTRCODE_IND_ESTADO='A';*/
      
        V_FACTOR := 0;
        --V_VALOR_COLA ;
        V_VUELTA_COLA := 1;
      
        V_PRUEBA := 12088;
      
        OPEN DT1(v_PLAN_PROC_CODE, v_PLAN_SEQ);
        LOOP
          FETCH DT1
            INTO DT1_ROW;
          EXIT WHEN DT1%NOTFOUND;
        
          IF V_VUELTA_COLA <> 1 THEN
          
            IF V_VALOR_COLA = DT1_ROW.YTRPRCO_COLA_CODE THEN
              V_FACTOR := V_FACTOR + (DT1_ROW.NIVEL - 1);
            END IF;
            V_VALOR_COLA := DT1_ROW.YTRPRCO_COLA_CODE;
          ELSE
            V_VALOR_COLA := DT1_ROW.YTRPRCO_COLA_CODE;
          END IF;
          V_VUELTA_COLA := V_VUELTA_COLA + 1;
          --YTRPRCO_COLA_CODE ,YTRCODE_CODE
        
          IF (DT1_ROW.CONTENEDORA = 'N') THEN
            --ES UNA FIJA
          
            SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
              INTO V_CODEAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
               AND YTRAPDO_DOCU_SEQ = 1;
          
            IF V_CODEAPROB IS NULL THEN
              V_CODEAPROB := 1;
            END IF;
          
            V_PRUEBA := 14674;
          
            SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
              INTO V_PROVEIDO, V_PROVEIDO_DESC
              FROM YTVPRVE
             WHERE YTVPRVE_CODE = DT1_ROW.PRVE_CODE;
          
            V_PRUEBA := 14678;
          
            IF (V_VUELTA_DINAMICA > 0) THEN
              V_SUMA := V_VUELTA_DINAMICA - 1;
            ELSE
              V_SUMA := 0;
            END IF;
          
            V_METODO_APR := '';
            OPEN C_CACAP(v_plan_proc_code || '-' || v_PLAN_SEQ,
                         DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE);
            FETCH C_CACAP
              INTO V_METODO_APR;
            CLOSE C_CACAP;
          
            IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
            
              IF (V_TIPODOC = '02' OR V_TIPODOC = '05') THEN
              
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN,
                   YTRAPDO_FECHA_DERIVACION,
                   YTRAPDO_METODO,
                   YTRAPDO_IND_SALIDA,
                   YTRAPDO_CANTIDAD,
                   YTRAPDO_FORMATO,
                   YTRAPDO_CONTENEDORA,
                   YTRAPDO_COLA_CODE_PADRE,
                   YTRAPDO_NIVEL_COLA)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                   v_usua_reg,
                   DT1_ROW.ORGN,
                   DT1_ROW.COAS,
                   DT1_ROW.DESCRIPCION,
                   DT1_ROW.SUBDENOMINACION,
                   DT1_ROW.NIVEL + V_SUMA,
                   'A',
                   DT1_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   sysdate,
                   'aprobaci?n automatica',
                   SYSDATE,
                   DT1_ROW.ESTA_CODE_PASARA,
                   DT1_ROW.ESTA_CODE_REGRESA,
                   DT1_ROW.YTRCODE_TIAP_CODE,
                   DT1_ROW.UNID_CODE,
                   DT1_ROW.TIEMPO,
                   DT1_ROW.IND_ADJUNTO,
                   DT1_ROW.POSN,
                   SYSDATE,
                   V_METODO_APR,
                   DT1_ROW.SALIDA,
                   DT1_ROW.CANTIDAD,
                   DT1_ROW.FORMATO,
                   DT1_ROW.CONTENEDORA,
                   DT1_ROW.YTRPRCO_COLA_CODE,
                   DT1_ROW.NIVEL_COLA);
              
              ELSE
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN,
                   YTRAPDO_METODO,
                   YTRAPDO_IND_SALIDA,
                   YTRAPDO_CANTIDAD,
                   YTRAPDO_FORMATO,
                   YTRAPDO_CONTENEDORA,
                   YTRAPDO_COLA_CODE_PADRE,
                   YTRAPDO_NIVEL_COLA)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                   v_usua_reg,
                   DT1_ROW.ORGN,
                   DT1_ROW.COAS,
                   DT1_ROW.DESCRIPCION,
                   DT1_ROW.SUBDENOMINACION,
                   DT1_ROW.NIVEL + V_SUMA,
                   'A',
                   DT1_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   sysdate,
                   'aprobaci?n automatica',
                   SYSDATE,
                   DT1_ROW.ESTA_CODE_PASARA,
                   DT1_ROW.ESTA_CODE_REGRESA,
                   DT1_ROW.YTRCODE_TIAP_CODE,
                   DT1_ROW.UNID_CODE,
                   DT1_ROW.TIEMPO,
                   DT1_ROW.IND_ADJUNTO,
                   DT1_ROW.POSN,
                   V_METODO_APR,
                   DT1_ROW.SALIDA,
                   DT1_ROW.CANTIDAD,
                   DT1_ROW.FORMATO,
                   DT1_ROW.CONTENEDORA,
                   DT1_ROW.YTRPRCO_COLA_CODE,
                   DT1_ROW.NIVEL_COLA);
              
              END IF;
            
            ELSE
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_TIEMPO,
                 YTRAPDO_IND_ADJUNTO,
                 YTRAPDO_POSN_POSN,
                 YTRAPDO_METODO,
                 YTRAPDO_IND_SALIDA,
                 YTRAPDO_CANTIDAD,
                 YTRAPDO_FORMATO,
                 YTRAPDO_CONTENEDORA,
                 YTRAPDO_COLA_CODE_PADRE,
                 YTRAPDO_NIVEL_COLA)
              VALUES
                (V_CODEAPROB,
                 V_CODEDOC,
                 1,
                 DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                 NULL,
                 DT1_ROW.ORGN,
                 DT1_ROW.COAS,
                 DT1_ROW.DESCRIPCION,
                 DT1_ROW.SUBDENOMINACION,
                 DT1_ROW.NIVEL + V_SUMA,
                 'P',
                 DT1_ROW.PRVE_CODE,
                 V_PROVEIDO_DESC,
                 NULL,
                 'POR APROBAR',
                 SYSDATE,
                 DT1_ROW.ESTA_CODE_PASARA,
                 DT1_ROW.ESTA_CODE_REGRESA,
                 DT1_ROW.YTRCODE_TIAP_CODE,
                 DT1_ROW.UNID_CODE,
                 DT1_ROW.TIEMPO,
                 DT1_ROW.IND_ADJUNTO,
                 DT1_ROW.POSN,
                 V_METODO_APR,
                 DT1_ROW.SALIDA,
                 DT1_ROW.CANTIDAD,
                 DT1_ROW.FORMATO,
                 DT1_ROW.CONTENEDORA,
                 DT1_ROW.YTRPRCO_COLA_CODE,
                 DT1_ROW.NIVEL_COLA);
            END IF;
          
          ELSE
            --ES UNA COLA CONTENEDORA DINAMICA
          
            SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
              INTO V_CODEAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
               AND YTRAPDO_DOCU_SEQ = 1;
          
            V_PRUEBA := 14739;
          
            IF V_CODEAPROB IS NULL THEN
              V_CODEAPROB := 1;
            END IF;
          
            V_PRUEBA := 14745;
          
            --CONSULTAMOS SI TIENE CODIGO DE DERIVACION LO QUE SIGNIFICA QUE LA COLA NO SE CREARA A PARTIR DEL CENTROS DE ESTUDIOS SELECCIONADO EN LA PAGINA PRINCIPAL SINO DESDE
            --EL COMPONENTE SELECCIONADO EN LA PLANTILLA CAMPO DERIVAR
            SELECT YTRPLAN_DERIVAR
              INTO V_YTRPLAN_DERIVAR
              FROM YTRPLAN
             WHERE YTRPLAN_PROC_CODE =
                   ky_json.campo(jsonObj, 'plan_proc_code')
               AND YTRPLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq');
          
            --POR DEFECTO TODAS LAS PLANTILLAS ESTAN INICIALIZADAS CON -1 LAS QUE SON DIFERENTE DE -1 SE PROCEDE A REALIZAR LA SIGUIENTE LOGICA
            IF V_YTRPLAN_DERIVAR <> '-1' THEN
            
              SELECT COUNT(*)
                INTO v_encontro
                FROM COMUMGR.YTRTEMP
               WHERE YTRTEMP_ESTADO = 'A'
                 AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                 AND YTRTEMP_PLAN_PROC_CODE =
                     ky_json.campo(jsonObj, 'plan_proc_code')
                 AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
                 AND YTRTEMP_CARRERA = V_CARRERA_USUA
                 AND YTRTEMP_PROGRAMA = V_NIVEL_1
                 AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
            
              IF v_encontro <> 0 THEN
              
                SELECT YTRTEMP_JSON_CAMPOS_DINAMICOS
                  INTO V_YTRTEMP_JSON_CAMPOS_DINA
                  FROM COMUMGR.YTRTEMP
                 WHERE YTRTEMP_ESTADO = 'A'
                   AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id')
                   AND YTRTEMP_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRTEMP_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRTEMP_CARRERA = V_CARRERA_USUA
                   AND YTRTEMP_PROGRAMA = V_NIVEL_1
                   AND YTRTEMP_CAMPUS = V_CAMP_CODE_1;
              
              ELSE
              
                V_YTRTEMP_JSON_CAMPOS_DINA := empty_clob();
              
              END IF;
            
              IF V_YTRTEMP_JSON_CAMPOS_DINA <> empty_clob() THEN
              
                V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                      '[',
                                                      '');
                V_YTRTEMP_JSON_CAMPOS_DINA := replace(V_YTRTEMP_JSON_CAMPOS_DINA,
                                                      ']',
                                                      '');
              
                json_DATA_DINAM := json(V_YTRTEMP_JSON_CAMPOS_DINA);
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(V_YTRTEMP_JSON_CAMPOS_DINA, C_CAMPOS_REC.CODE));
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_YTRTEMP_JSON_CAMPOS_DINA);
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),ky_json.campo(json_DATA_DINAM, C_CAMPOS_REC.CODE));
              
                SELECT YTRPLCA_CAME_CODE || YTRPLCA_SEQ || '_' ||
                       YTRCAME_ID_CAMPO CODE
                  INTO V_CODIGO_CAME_CODE
                  FROM COMUMGR.YTRPLCA, COMUMGR.YTRCAME
                 WHERE YTRPLCA_PLAN_PROC_CODE =
                       ky_json.campo(jsonObj, 'plan_proc_code')
                   AND YTRPLCA_PLAN_SEQ =
                       ky_json.campo(jsonObj, 'plan_seq')
                   AND YTRPLCA_IND_ESTADO = 'A'
                   AND YTRPLCA_CAME_CODE = V_YTRPLAN_DERIVAR
                   AND YTRPLCA_CAME_CODE = YTRCAME_CODE
                 ORDER BY YTRPLCA_ORDEN;
              
                v_encontro := INSTR(ky_json.campo(json_DATA_DINAM,
                                                  V_CODIGO_CAME_CODE),
                                    '>');
              
                select substr(ky_json.campo(json_DATA_DINAM,
                                            V_CODIGO_CAME_CODE),
                              1,
                              v_encontro - 1),
                       substr(ky_json.campo(json_DATA_DINAM,
                                            V_CODIGO_CAME_CODE),
                              v_encontro + 1)
                  INTO V_VALOR1, v_valor2
                  from dual;
              
                V_PARAMETRO := V_VALOR1;
              
                --OBTENER LA FACULTAD
                select distinct stvcoll_code
                  INTO V_FACULTAD
                  from smrprle@prod.int.upao.edu.pe,
                       sobcurr@prod.int.upao.edu.pe,
                       sorcmjr@prod.int.upao.edu.pe,
                       stvmajr@prod.int.upao.edu.pe,
                       stvcoll@prod.int.upao.edu.pe
                 where smrprle_program = sobcurr_program
                   and sobcurr_curr_rule = sorcmjr_curr_rule
                   and sorcmjr_majr_code = stvmajr_code
                   and sobcurr_coll_code = stvcoll_code
                   and sobcurr_levl_code = V_NIVEL_1
                   AND stvmajr_code = V_PARAMETRO
                --and stvcoll_code=p_cod_facul
                 order by stvmajr_desc;
              
              END IF;
            
            ELSE
            
              IF (LENGTH(V_ORG_USUA) > 0) THEN
                -- NOS INDICA QUE ES UN DOCUMENTO NETAMENTE ADMINISTRATIVO Y HAY QUE COGER LA COLA VARIABLE ADMINISTRATIVA
                V_PARAMETRO := V_ORG_USUA;
              END IF;
            
            END IF;
          
            --COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,P_PARAMETRO VARCHAR2,P_NIVEL INT)
            --VAMOS A BUSCAR LA COLA DINAMICA QUE SE ASIGNARA DE ACUERDO A LA ESCUELA
          
            /* OPEN DT1(v_PLAN_PROC_CODE,v_PLAN_SEQ);
            LOOP
             FETCH DT1 INTO DT1_ROW;
             EXIT WHEN DT1%NOTFOUND;
             */
          
            -- OPEN COLA_DINAMICA(DT1_ROW.PADRE,V_PARAMETRO,DT1_ROW.NIVEL);
          
            /*INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_PARAMETRO));
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_FACULTAD));
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), DT1_ROW.NIVEL);*/
          
            /*INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_PARAMETRO));
            
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), TRIM(V_FACULTAD));
            
            INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), DT1_ROW.NIVEL);   */
          
            OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,
                               TRIM(V_PARAMETRO),
                               TRIM(V_FACULTAD),
                               DT1_ROW.NIVEL);
            -- OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,'ICSI',DT1_ROW.NIVEL);
            V_VUELTA_DINAMICA := 0;
            LOOP
              FETCH COLA_DINAMICA
                INTO COLA_DINAMICA_ROW;
              EXIT WHEN COLA_DINAMICA%NOTFOUND;
            
              SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                INTO V_PROVEIDO, V_PROVEIDO_DESC
                FROM YTVPRVE
               WHERE YTVPRVE_CODE = COLA_DINAMICA_ROW.PRVE_CODE;
            
              IF (V_VUELTA_DINAMICA = 0 AND V_ORGN_DINA IS NULL) THEN
                -- SACAMOS LA ORGANIZACI?N DE LA COLA DINAMICA PARA PODER GENERAR EL RECEPTOR PRINCIPAL
                V_ORGN_DINA := COLA_DINAMICA_ROW.COAS ||
                               COLA_DINAMICA_ROW.ORGN;
                V_PARA_DINA := COLA_DINAMICA_ROW.PARAMETRO;
              END IF;
            
              V_METODO_APR := '';
            
              OPEN C_CACAP(v_plan_proc_code || '-' || v_PLAN_SEQ,
                           COLA_DINAMICA_ROW.YTRCODE_CODE ||
                           COLA_DINAMICA_ROW.YTACOLA_CODE);
              FETCH C_CACAP
                INTO V_METODO_APR;
              CLOSE C_CACAP;
            
              IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                IF (V_TIPODOC = '02' OR V_TIPODOC = '05') THEN
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO,
                     YTRAPDO_POSN_POSN,
                     YTRAPDO_FECHA_DERIVACION,
                     YTRAPDO_METODO,
                     YTRAPDO_IND_SALIDA,
                     YTRAPDO_CANTIDAD,
                     YTRAPDO_FORMATO,
                     YTRAPDO_CONTENEDORA,
                     YTRAPDO_COLA_CODE_PADRE,
                     YTRAPDO_COLA_CODE_HIJO,
                     YTRAPDO_NIVEL_COLA)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     COLA_DINAMICA_ROW.YTRCODE_CODE ||
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     v_usua_reg,
                     COLA_DINAMICA_ROW.ORGN,
                     COLA_DINAMICA_ROW.COAS,
                     COLA_DINAMICA_ROW.DESCRIPCION,
                     COLA_DINAMICA_ROW.SUBDENOMINACION,
                     COLA_DINAMICA_ROW.NIVEL,
                     'A',
                     COLA_DINAMICA_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     sysdate,
                     'aprobaci?n automatica',
                     SYSDATE,
                     COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                     COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                     COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                     COLA_DINAMICA_ROW.UNID_CODE,
                     COLA_DINAMICA_ROW.TIEMPO,
                     COLA_DINAMICA_ROW.IND_ADJUNTO,
                     COLA_DINAMICA_ROW.POSN,
                     SYSDATE,
                     V_METODO_APR,
                     COLA_DINAMICA_ROW.SALIDA,
                     COLA_DINAMICA_ROW.CANTIDAD,
                     COLA_DINAMICA_ROW.FORMATO,
                     DT1_ROW.CONTENEDORA,
                     DT1_ROW.YTRPRCO_COLA_CODE,
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     COLA_DINAMICA_ROW.NIVEL_COLA);
                ELSE
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO,
                     YTRAPDO_POSN_POSN,
                     YTRAPDO_METODO,
                     YTRAPDO_IND_SALIDA,
                     YTRAPDO_CANTIDAD,
                     YTRAPDO_FORMATO,
                     YTRAPDO_CONTENEDORA,
                     YTRAPDO_COLA_CODE_PADRE,
                     YTRAPDO_COLA_CODE_HIJO,
                     YTRAPDO_NIVEL_COLA)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     COLA_DINAMICA_ROW.YTRCODE_CODE ||
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     v_usua_reg,
                     COLA_DINAMICA_ROW.ORGN,
                     COLA_DINAMICA_ROW.COAS,
                     COLA_DINAMICA_ROW.DESCRIPCION,
                     COLA_DINAMICA_ROW.SUBDENOMINACION,
                     COLA_DINAMICA_ROW.NIVEL,
                     'A',
                     COLA_DINAMICA_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     sysdate,
                     'aprobaci?n automatica',
                     SYSDATE,
                     COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                     COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                     COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                     COLA_DINAMICA_ROW.UNID_CODE,
                     COLA_DINAMICA_ROW.TIEMPO,
                     COLA_DINAMICA_ROW.IND_ADJUNTO,
                     COLA_DINAMICA_ROW.POSN,
                     V_METODO_APR,
                     COLA_DINAMICA_ROW.SALIDA,
                     COLA_DINAMICA_ROW.CANTIDAD,
                     COLA_DINAMICA_ROW.FORMATO,
                     DT1_ROW.CONTENEDORA,
                     DT1_ROW.YTRPRCO_COLA_CODE,
                     COLA_DINAMICA_ROW.YTACOLA_CODE,
                     COLA_DINAMICA_ROW.NIVEL_COLA);
                END IF;
              ELSE
                --/////no inicia con una cola dinamica
                select max(nvl(YTRAPDO_nivel, 0)) + 1
                  into V_NIVEL_DIM
                  from YTRAPDO
                 where YTRAPDO_DOCU_CODE = V_CODEDOC
                   and YTRAPDO_DOCU_SEQ = 1; --scamos en siguiente nivel
              
                IF V_NIVEL_DIM IS NULL THEN
                  V_NIVEL_DIM := 1;
                END IF;
              
                INSERT INTO COMUMGR.YTRAPDO
                  (YTRAPDO_SEQ,
                   YTRAPDO_DOCU_CODE,
                   YTRAPDO_DOCU_SEQ,
                   YTRAPDO_CODE_CODE,
                   YTRAPDO_ID_USUA_APROB,
                   YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_SUBDENOMINACION,
                   YTRAPDO_NIVEL,
                   YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE,
                   YTRAPDO_PRVE_DESC,
                   YTRAPDO_FECHA_APROBACION,
                   YTRAPDO_COMENTARIO,
                   YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,
                   YTRAPDO_ESTA_CODE_REGRESA,
                   YTRAPDO_TIAP_CODE,
                   YTRAPDO_UNID_CODE,
                   YTRAPDO_TIEMPO,
                   YTRAPDO_IND_ADJUNTO,
                   YTRAPDO_POSN_POSN,
                   YTRAPDO_METODO,
                   YTRAPDO_IND_SALIDA,
                   YTRAPDO_CANTIDAD,
                   YTRAPDO_FORMATO,
                   YTRAPDO_CONTENEDORA,
                   YTRAPDO_COLA_CODE_PADRE,
                   YTRAPDO_COLA_CODE_HIJO,
                   YTRAPDO_NIVEL_COLA)
                VALUES
                  (V_CODEAPROB,
                   V_CODEDOC,
                   1,
                   COLA_DINAMICA_ROW.YTRCODE_CODE ||
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   NULL,
                   COLA_DINAMICA_ROW.ORGN,
                   COLA_DINAMICA_ROW.COAS,
                   COLA_DINAMICA_ROW.DESCRIPCION,
                   COLA_DINAMICA_ROW.SUBDENOMINACION,
                   V_NIVEL_DIM,
                   'P',
                   COLA_DINAMICA_ROW.PRVE_CODE,
                   V_PROVEIDO_DESC,
                   NULL,
                   'POR APROBAR' || v_plan_proc_code || '-' || v_PLAN_SEQ || '/' ||
                   COLA_DINAMICA_ROW.YTRCODE_CODE ||
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   SYSDATE,
                   COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                   COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                   COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                   COLA_DINAMICA_ROW.UNID_CODE,
                   COLA_DINAMICA_ROW.TIEMPO,
                   COLA_DINAMICA_ROW.IND_ADJUNTO,
                   COLA_DINAMICA_ROW.POSN,
                   V_METODO_APR,
                   COLA_DINAMICA_ROW.SALIDA,
                   COLA_DINAMICA_ROW.CANTIDAD,
                   COLA_DINAMICA_ROW.FORMATO,
                   DT1_ROW.CONTENEDORA,
                   DT1_ROW.YTRPRCO_COLA_CODE,
                   COLA_DINAMICA_ROW.YTACOLA_CODE,
                   COLA_DINAMICA_ROW.NIVEL_COLA);
              
                /* INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_TIEMPO,
                YTRAPDO_IND_ADJUNTO,YTRAPDO_POSN_POSN,YTRAPDO_METODO)
                VALUES (V_CODEAPROB, V_CODEDOC, 1, COLA_DINAMICA_ROW.YTRCODE_CODE||COLA_DINAMICA_ROW.YTACOLA_CODE,NULL, COLA_DINAMICA_ROW.ORGN, COLA_DINAMICA_ROW.COAS, COLA_DINAMICA_ROW.DESCRIPCION,
                COLA_DINAMICA_ROW.SUBDENOMINACION, COLA_DINAMICA_ROW.NIVEL+V_FACTOR,'P',COLA_DINAMICA_ROW.PRVE_CODE,
                V_PROVEIDO_DESC,NULL,'POR APROBAR'|| v_plan_proc_code||'-'||v_PLAN_SEQ||'/'||COLA_DINAMICA_ROW.YTRCODE_CODE||COLA_DINAMICA_ROW.YTACOLA_CODE,SYSDATE,COLA_DINAMICA_ROW.ESTA_CODE_PASARA,COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,COLA_DINAMICA_ROW.UNID_CODE,COLA_DINAMICA_ROW.TIEMPO,
                COLA_DINAMICA_ROW.IND_ADJUNTO,COLA_DINAMICA_ROW.POSN,V_METODO_APR);*/
              END IF;
              V_CODEAPROB       := V_CODEAPROB + 1;
              V_VUELTA_DINAMICA := V_VUELTA_DINAMICA + 1;
            END LOOP;
            CLOSE COLA_DINAMICA;
          
          END IF;
          /*VERIFICAR SI ES NECESARIO REGISTRAR EL DETALLE DE APROBADORES DE LO CONTRARIO SOLO NOS IMPORTA LA PERSONA QUE APROBO*/
        
        END LOOP;
        CLOSE DT1;
      
        --////////VERIFICAMOS SI EL DOC QUIERE APROBACI?N
        IF V_SOLI_APRO >= 1 THEN
        
          SELECT COUNT(*)
            INTO V_NUM_APRO
            FROM COMUMGR.YTRAPDO
           WHERE YTRAPDO_DOCU_CODE = V_CODEDOC;
          IF (V_NUM_APRO = 0) THEN
            V_MSG_GLOBAL := 'ERP-ERR DOCUMENTO AL MENOS DEBE TENER UN NIVEL DE APROBACI?N';
            RAISE exp_GLOBAL;
          END IF;
        
        END IF;
      
        --NUEVO PARA DOSUMENTOS CON PLANTILLA DEFINIDA ENTRE ALUMNO UNIVERSIDAD
        IF (V_TIPODOC = '01') THEN
        
          -- SELECT YTRUNID_CODE,YTRUNID_RUTA INTO V_PARA_CODE,V_PARA_DESC
          -- YTRUNID WHERE YTRUNID_PADRE=V_DUENO_PROCESO AND YTRUNID_IND_PRINCIPAL='S' AND ROWNUM=1;
        
          OPEN C_UNID_P(V_DUENO_PROCESO);
          FETCH C_UNID_P
            INTO V_PARA_CODE, V_PARA_DESC;
          CLOSE C_UNID_P;
        
          --EXP_NUP
          --ACTUALIZANDO LA UNIDAD RECEPTORA PRINCIPAL
        
          IF V_PARA_CODE IS NULL THEN
            --PODEMOS VERIFICAR SI ES UNA COLA CONTENEDORA
          
            IF V_ORGN_DINA IS NULL THEN
              -- ETO NOS INDICA QUE NO HAY DATOS DE COLA DINAMICA Y SE LANZA LA EXCEPCI?N
              RAISE EXP_NUP;
            
            ELSE
              --INDICA QUE SI HAY UNA COLA DINAMICA DE LA CUAL SE SACARA LA ORGANIZACI?N PRINCIPAL
            
              OPEN C_UNID_DUENA(V_ORGN_DINA, V_PARA_DINA);
              FETCH C_UNID_DUENA
                INTO V_PARA_CODE, V_PARA_DESC;
              CLOSE C_UNID_DUENA;
            
            END IF;
          
          END IF;
        
          UPDATE YTRAPDO
             SET YTRAPDO_IND_PARA = 'P'
           WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
             AND YTRAPDO_DOCU_SEQ = 1
             AND YTRAPDO_UNID_CODE = V_PARA_CODE;
        END IF;
      
        --ADICIONAR QUIEN RECEPCIONARA LOS DOCUMENTOS
      
        V_PRUEBA := 15012;
      
        --v_coas:=ky_json.campo(jsonObj, 'coas');
        --v_unidad:=ky_json.campo(jsonObj, 'unidad_entrega');
        --v_nom_unidad:=ky_json.campo(jsonObj, 'nomunidad');
        v_unidad      := ky_json.campo(jsonObj, 'p_dependencia_code');
        v_DEPENDENCIA := ky_json.campo(jsonObj, 'p_dependencia_code');
        v_nom_unidad  := ky_json.campo(jsonObj, 'p_dependencia_desc');
        V_QUEHACER    := ky_json.campo(jsonObj, 'p_quehacer');
        V_OTRO        := ky_json.campo(jsonObj, 'p_otro');
      
        --INGRESA CUANDO  ES UN DOCUMENTO ENTRANTE Y SE LE BRINDA LAS UNIDADES
        IF (length(v_unidad) > 0) THEN
        
          --OBTENEMOS EL ULTIMO NIVEL DE APROBACION
        
          --OBTENEMOS EL PROVEIDO
          SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
            INTO V_PROVEIDO, V_PROVEIDO_DESC
            FROM YTVPRVE
           WHERE YTVPRVE_CODE =
                 (SELECT YGVPPAR_VALOR_PREDETERMINADO
                    FROM COMUMGR.YGVPPAR
                   WHERE YGVPPAR_CODI = 'T02');
          SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
            INTO V_PROVEIDO_1, V_PROVEIDO_DESC_1
            FROM YTVPRVE
           WHERE YTVPRVE_CODE =
                 (SELECT YGVPPAR_VALOR_PREDETERMINADO
                    FROM COMUMGR.YGVPPAR
                   WHERE YGVPPAR_CODI = 'T03');
        
          --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
          --////////// SI NO HEREDA COLA DE CARPETA SACA NOMBRES DE UNIDAD///////////////////////////////////////////////////
        
          IF (V_CARPETA IS NULL) THEN
          
            IF V_SOLI_CODE = 'DA' THEN
              -- DOCUMENTOS ENTRE UNIDADES SOLICITA LA UNIDAD PADRE
              /*SELECT SUBSTR(TA.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TA.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA
              WHERE TA.YTRUNID_CODE=v_DEPENDENCIA;
              V_CODEAPROB:=v_DEPENDENCIA;*/
              IF V_TIPODOC <> '03' THEN
                --- DOCSA-05/03/2019
                SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                       SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
                  INTO V_COAS, v_orgn_code
                  FROM YTRUNID TA, YTRUNID TB
                 WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
                   AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
                --V_CODEAPROB:=v_DEPENDENCIA;
                --ELSE
                -- v_orgn_code:=v_DEPENDENCIA;
              END IF;
              --V_CODEAPROB:=v_DEPENDENCIA;
              V_CODEAPROB := 1;
              V_NIVEL     := 1;
            ELSE
            
              --SELECT NVL(TO_NUMBER(MAX(YTRAPDO_SEQ))+1,1)  INTO V_CODEAPROB  FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE=V_CODEDOC AND YTRAPDO_DOCU_SEQ=1;
              --SELECT NVL(TO_NUMBER(MAX(YTRAPDO_NIVEL))+1,1)  INTO V_NIVEL  FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE=V_CODEDOC AND YTRAPDO_DOCU_SEQ=1;
            
              SELECT NVL(TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1, 1)
                INTO V_CODEAPROB
                FROM YTRAPDO
               WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                 AND YTRAPDO_DOCU_SEQ = 1;
              SELECT NVL(TO_NUMBER(MAX(YTRAPDO_NIVEL)) + 1, 1)
                INTO V_NIVEL
                FROM YTRAPDO
               WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                 AND YTRAPDO_DOCU_SEQ = 1;
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
                INTO V_COAS, v_orgn_code
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            END IF;
          ELSE
            V_CODEAPROB := 1;
            V_NIVEL     := 1;
          
            --//////////////////////SI SE ADJUNTA CARPETA HAY QUE BLOQUEAR LA CARPETA PARA QUE YA NO SE ADJUNTE A OTRO DOCUMENTO/////////////
            UPDATE YTBCAEX
               SET YTBCAEX_IND_ADJUNTO = 'S'
             WHERE YTBCAEX_CODE = V_CARPETA;
          END IF;
        
          --se comento la conSULTA ANTERIOR PORQUR AHORA SOLO ENVIA A UNIDADES PADRE
        
          /*   SELECT SUBSTR(Ta.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(Ta.YTRUNID_ORGN_UPAO,2,10) CODE  INTO V_COAS,v_orgn_code
          FROM YTRUNID TA
          WHERE TA.YTRUNID_CODE=v_DEPENDENCIA;     */
        
          --NOS INDICA QUE SON DOCUMENTOS ENTRE UNIDADES ADMINISTRATIVAS---------------
          IF V_SOLI_CODE = 'DA' OR V_TIPODOC = '06' THEN
          
            IF (V_TIPODOC <> '06') THEN
              --SACANDO PROVEIDOS POR DEFECTO PARA REGISTRAR ENVIO DE DOCUMENTOS ENTRANTES
              SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                INTO V_PROVEIDO_0, V_PROVEIDO_DESC_0
                FROM YTVPRVE
               WHERE YTVPRVE_CODE =
                     (SELECT YGVPPAR_VALOR_PREDETERMINADO
                        FROM COMUMGR.YGVPPAR
                       WHERE YGVPPAR_CODI = 'T01');
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
                INTO V_COAS_55, v_orgn_code_55
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = ky_json.campo(jsonObj, 'usua_id')
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            
              --SEMBRANDO LA APROBACI?N DEL CREADOR DEL DOCUMENTO
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_tiempo,
                 YTRAPDO_IND_ESTADO_1,
                 YTRAPDO_IND_COPIA,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB,
                 V_CODEDOC,
                 1,
                 1,
                 NULL,
                 v_orgn_code_55,
                 v_coas_55,
                 V_NOMBRES,
                 NULL,
                 V_NIVEL,
                 'A',
                 V_PROVEIDO_0,
                 V_PROVEIDO_DESC_0,
                 NULL,
                 'USUARIO QUE ENVIO EL DOCUMENTO',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 v_DEPENDENCIA,
                 'N',
                 0,
                 'E',
                 'I',
                 'S');
            
              V_NIVEL := V_NIVEL + 1;
            
              --YTRAPDO_IND_COPIA: I=INFORMATIVO,
            END IF;
          
            IF LENGTH(V_OTRO) > 0 THEN
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_tiempo,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB + 1,
                 V_CODEDOC,
                 1,
                 2,
                 NULL,
                 v_orgn_code,
                 v_coas,
                 v_nom_unidad,
                 NULL,
                 V_NIVEL,
                 'P',
                 V_QUEHACER,
                 V_OTRO,
                 NULL,
                 'POR RECEPCIONAR',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 v_DEPENDENCIA,
                 V_IND_DERIVADO,
                 ky_json.campo(jsonObj, 'p_tiempo'),
                 'P');
            
            ELSE
            
              --///////////////VERIFICAR SI TIENE UNA CARPETA ADJUNTA
              --*************** NOS INDICA QUE DEBEMOS CLONAR LA COLA DE LA CARPETA
              IF (LENGTH(V_CARPETA) > 0) THEN
              
                --////////////////OBTENEMOS LA MAYOR SECUENCIA DE LA COLA DE APROBACI?N//////////////////////////
                --V_NIVEL_CARPETA
                SELECT MAX(YTRAPDO_SEQ) + 1
                  INTO V_SEQ_APROB
                  FROM COMUMGR.YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                   AND YTRAPDO_DOCU_SEQ = 1;
              
                --    V_NIVEL:=V_NIVEL+1;
              
                OPEN DT_CCARPETA(V_CARPETA, v_usua_id);
                LOOP
                  FETCH DT_CCARPETA
                    INTO DT_CCARPETA_ROW;
                  EXIT WHEN DT_CCARPETA%NOTFOUND;
                
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_DERIVADO,
                     YTRAPDO_IND_COPIA,
                     YTRAPDO_IND_PARA,
                     YTRAPDO_IND_ADJUNTO,
                     YTRAPDO_SEQ_DCA)
                  
                  VALUES
                    (V_SEQ_APROB,
                     V_CODEDOC,
                     1,
                     DT_CCARPETA_ROW.COLA_CODE,
                     NULL,
                     DT_CCARPETA_ROW.ORGN,
                     DT_CCARPETA_ROW.COAS,
                     DT_CCARPETA_ROW.DESCRIPCION,
                     DT_CCARPETA_ROW.SUBDENOMINACION,
                     V_NIVEL,
                     'P',
                     DT_CCARPETA_ROW.PRVE_CODE,
                     DT_CCARPETA_ROW.PRVE_DESC,
                     NULL,
                     'POR RECEPCIONAR',
                     SYSDATE,
                     DT_CCARPETA_ROW.ESTA_CODE_PASARA,
                     DT_CCARPETA_ROW.ESTA_CODE_REGRESA,
                     DT_CCARPETA_ROW.YTRAPDO_TIAP_CODE,
                     DT_CCARPETA_ROW.UNID_CODE,
                     DT_CCARPETA_ROW.TIEMPO,
                     '',
                     'N',
                     'N',
                     DT_CCARPETA_ROW.IND_ADJUNTO,
                     DT_CCARPETA_ROW.YTRAPDO_SEQ);
                
                  V_SEQ_APROB   := V_SEQ_APROB + 1;
                  V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
                  V_NIVEL       := V_NIVEL + 1;
                
                  /* SELECT YTRAPDO_CODE_CODE COLA_CODE,YTRAPDO_ORGN_CODE ORGN,YTRAPDO_COAS_CODE COAS,YTRAPDO_DESCRIPCION DESCRIPCION,YTRAPDO_SUBDENOMINACION SUBDENOMINACION,YTRAPDO_NIVEL NIVEL,
                  YTRAPDO_PRVE_CODE PRVE_CODE ,YTRAPDO_PRVE_DESC PRVE_DESC,YTRAPDO_ESTA_CODE_PASARA ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,
                  YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE UNID_CODE,YTRAPDO_TIEMPO TIEMPO,YTRAPDO_IND_ADJUNTO IND_ADJUNTO,YTRAPDO_POSN_POSN POSN*/
                
                END LOOP;
                CLOSE DT_CCARPETA;
              
                --///////////SI NO ES CARPETA COLOCA AL DESTINARIO DEL COMBOBOX
              ELSE
                SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                  INTO V_PROVEIDO, V_PROVEIDO_DESC
                  FROM YTVPRVE
                 WHERE YTVPRVE_CODE = V_QUEHACER;
              
                --////ADICIONAR LOGICA PARA DAR PEMISOS DE APROBAR AL USUARIO QUE CREO EL DOCUMENTO EN EL CASO DE DOCUMENTOS SALIENTES
                IF V_TIPODOC <> '03' THEN
                  --DOCSA
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_IND_DERIVADO,
                     YTRAPDO_tiempo,
                     YTRAPDO_IND_PARA)
                  VALUES
                    (V_CODEAPROB + 1,
                     V_CODEDOC,
                     1,
                     2,
                     NULL,
                     v_orgn_code,
                     v_coas,
                     v_nom_unidad,
                     NULL,
                     V_NIVEL,
                     'P',
                     V_PROVEIDO,
                     V_PROVEIDO_DESC,
                     NULL,
                     'POR RECEPCIONAR',
                     SYSDATE,
                     NULL,
                     'OB',
                     'DOC',
                     v_DEPENDENCIA,
                     V_IND_DERIVADO,
                     ky_json.campo(jsonObj, 'p_tiempo'),
                     'P');
                ELSE
                  --///SI ES O3 ENTONCES ASIGNAMOS LA UNIDAD QUE CREO EL DOCUMENTO
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_IND_DERIVADO,
                     YTRAPDO_tiempo,
                     YTRAPDO_IND_PARA)
                  VALUES
                    (V_CODEAPROB + 1,
                     V_CODEDOC,
                     1,
                     2,
                     NULL,
                     v_orgn_code_55,
                     v_coas_55,
                     v_nom_unidad,
                     NULL,
                     V_NIVEL,
                     'P',
                     V_PROVEIDO,
                     V_PROVEIDO_DESC,
                     NULL,
                     'POR RECEPCIONAR',
                     SYSDATE,
                     NULL,
                     'OB',
                     'DOC',
                     v_DEPENDENCIA,
                     V_IND_DERIVADO,
                     ky_json.campo(jsonObj, 'p_tiempo'),
                     'P');
                END IF;
              END IF;
            
              --//////////////FIN DE SEMBRAR COLA DE CARPETA
            
            END IF;
          
            V_SEQ_APROB   := 2;
            V_SEQ_APROB_1 := 3;
            OPEN COPIAS(ky_json.campo(jsonObj, 'p_copiar_a'));
            LOOP
              FETCH COPIAS
                INTO COPIAS_ROW;
              EXIT WHEN COPIAS%NOTFOUND;
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE,
                     TB.YTRUNID_DESCRIPCION
                INTO V_COAS, v_orgn_code, V_ORG_DESC_1
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = COPIAS_ROW.ORG_CODE
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_IND_COPIA,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB + V_SEQ_APROB,
                 V_CODEDOC,
                 1,
                 V_SEQ_APROB_1,
                 NULL,
                 v_orgn_code,
                 v_coas,
                 V_ORG_DESC_1,
                 NULL,
                 V_NIVEL,
                 'P',
                 V_PROVEIDO_1,
                 V_PROVEIDO_DESC_1,
                 NULL,
                 'POR RECEPCIONAR',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 COPIAS_ROW.ORG_CODE,
                 'N',
                 'S',
                 'C');
            
              V_SEQ_APROB   := V_SEQ_APROB + 1;
              V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
            
            END LOOP;
            CLOSE COPIAS;
          
            /*
            
            IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_1'))>5) THEN
            
                       SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                       WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_1')
                       AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
            
            
                       INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                       VALUES (V_CODEAPROB + 2, V_CODEDOC, 1, 3,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_1'), NULL, V_NIVEL+1,'P',
                               V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_1'),'N','S');
            
                END IF;
            
                 IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_2'))>5) THEN
            
                           SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                           WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_2')
                           AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
            
            
                       INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                       VALUES (V_CODEAPROB + 3, V_CODEDOC, 1, 4,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_2'), NULL, V_NIVEL+1,'P',
                               V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_2'),'N','S');
            
                END IF;
            
                */
          
          ELSE
            --CUANDO SON DOCUMENTOS ENTRANTES DE OTRAS EMPRESAS
          
            INSERT INTO COMUMGR.YTRAPDO
              (YTRAPDO_SEQ,
               YTRAPDO_DOCU_CODE,
               YTRAPDO_DOCU_SEQ,
               YTRAPDO_CODE_CODE,
               YTRAPDO_ID_USUA_APROB,
               YTRAPDO_ORGN_CODE,
               YTRAPDO_COAS_CODE,
               YTRAPDO_DESCRIPCION,
               YTRAPDO_SUBDENOMINACION,
               YTRAPDO_NIVEL,
               YTRAPDO_IND_ESTADO,
               YTRAPDO_PRVE_CODE,
               YTRAPDO_PRVE_DESC,
               YTRAPDO_FECHA_APROBACION,
               YTRAPDO_COMENTARIO,
               YTRAPDO_FECHA_ACTIVIDAD,
               YTRAPDO_ESTA_CODE_PASARA,
               YTRAPDO_ESTA_CODE_REGRESA,
               YTRAPDO_TIAP_CODE,
               YTRAPDO_UNID_CODE,
               YTRAPDO_IND_DERIVADO,
               YTRAPDO_IND_PARA)
            VALUES
              (V_CODEAPROB,
               V_CODEDOC,
               1,
               1,
               NULL,
               v_orgn_code,
               v_coas,
               v_nom_unidad,
               NULL,
               V_NIVEL,
               'P',
               V_PROVEIDO,
               V_PROVEIDO_DESC,
               NULL,
               'POR RECEPCIONAR',
               SYSDATE,
               NULL,
               'OB',
               'DOC',
               v_DEPENDENCIA,
               V_IND_DERIVADO,
               'P');
          
            V_SEQ_APROB   := 1;
            V_SEQ_APROB_1 := 2;
            OPEN COPIAS(ky_json.campo(jsonObj, 'p_copiar_a'));
            LOOP
              FETCH COPIAS
                INTO COPIAS_ROW;
              EXIT WHEN COPIAS%NOTFOUND;
            
              SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
                     SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE,
                     TB.YTRUNID_DESCRIPCION
                INTO V_COAS, v_orgn_code, V_ORG_DESC_1
                FROM YTRUNID TA, YTRUNID TB
               WHERE TA.YTRUNID_CODE = COPIAS_ROW.ORG_CODE
                 AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
            
              INSERT INTO COMUMGR.YTRAPDO
                (YTRAPDO_SEQ,
                 YTRAPDO_DOCU_CODE,
                 YTRAPDO_DOCU_SEQ,
                 YTRAPDO_CODE_CODE,
                 YTRAPDO_ID_USUA_APROB,
                 YTRAPDO_ORGN_CODE,
                 YTRAPDO_COAS_CODE,
                 YTRAPDO_DESCRIPCION,
                 YTRAPDO_SUBDENOMINACION,
                 YTRAPDO_NIVEL,
                 YTRAPDO_IND_ESTADO,
                 YTRAPDO_PRVE_CODE,
                 YTRAPDO_PRVE_DESC,
                 YTRAPDO_FECHA_APROBACION,
                 YTRAPDO_COMENTARIO,
                 YTRAPDO_FECHA_ACTIVIDAD,
                 YTRAPDO_ESTA_CODE_PASARA,
                 YTRAPDO_ESTA_CODE_REGRESA,
                 YTRAPDO_TIAP_CODE,
                 YTRAPDO_UNID_CODE,
                 YTRAPDO_IND_DERIVADO,
                 YTRAPDO_IND_COPIA,
                 YTRAPDO_IND_PARA)
              VALUES
                (V_CODEAPROB + V_SEQ_APROB,
                 V_CODEDOC,
                 1,
                 V_SEQ_APROB_1,
                 NULL,
                 v_orgn_code,
                 v_coas,
                 V_ORG_DESC_1,
                 NULL,
                 V_NIVEL,
                 'P',
                 V_PROVEIDO_1,
                 V_PROVEIDO_DESC_1,
                 NULL,
                 'POR RECEPCIONAR',
                 SYSDATE,
                 NULL,
                 'OB',
                 'DOC',
                 COPIAS_ROW.ORG_CODE,
                 V_IND_DERIVADO,
                 'S',
                 'C');
            
              V_SEQ_APROB   := V_SEQ_APROB + 1;
              V_SEQ_APROB_1 := V_SEQ_APROB_1 + 1;
            
            END LOOP;
            CLOSE COPIAS;
            /*  IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_1'))>5) THEN
            
                   SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                   WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_1')
                   AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
                   INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                   VALUES (V_CODEAPROB + 1, V_CODEDOC, 1, 2,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_1'), NULL, V_NIVEL,'P',
                           V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_1'),V_IND_DERIVADO,'S');
            
            END IF;
            
             IF(LENGTH(ky_json.campo(jsonObj, 'p_dependencia_code_2'))>5) THEN
            
                       SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,v_orgn_code FROM YTRUNID TA, YTRUNID TB
                       WHERE TA.YTRUNID_CODE=ky_json.campo(jsonObj, 'p_dependencia_code_2')
                       AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;
            
            
                   INSERT INTO COMUMGR.YTRAPDO (YTRAPDO_SEQ, YTRAPDO_DOCU_CODE, YTRAPDO_DOCU_SEQ,   YTRAPDO_CODE_CODE, YTRAPDO_ID_USUA_APROB, YTRAPDO_ORGN_CODE,
                   YTRAPDO_COAS_CODE, YTRAPDO_DESCRIPCION, YTRAPDO_SUBDENOMINACION,   YTRAPDO_NIVEL, YTRAPDO_IND_ESTADO,
                   YTRAPDO_PRVE_CODE, YTRAPDO_PRVE_DESC, YTRAPDO_FECHA_APROBACION, YTRAPDO_COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD,
                   YTRAPDO_ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE,YTRAPDO_UNID_CODE,YTRAPDO_IND_DERIVADO,YTRAPDO_IND_COPIA)
                   VALUES (V_CODEAPROB + 2, V_CODEDOC, 1, 3,NULL, v_orgn_code, v_coas, ky_json.campo(jsonObj, 'p_dependencia_desc_2'), NULL, V_NIVEL,'P',
                           V_PROVEIDO_1,V_PROVEIDO_DESC_1,NULL,'POR RECEPCIONAR',SYSDATE,NULL,'OB','DOC',ky_json.campo(jsonObj, 'p_dependencia_code_2'),V_IND_DERIVADO,'S');
            
            END IF;*/
          
          END IF;
        
          --comumgr.kyt_tramite_comunicacion.FYT_ENVIAR_CORREO('rvarasr@upao.edu.pe','Recepci?n de Documento', 'Saludos,','Se te envio un documento para su aprobaci?n y recepci?n');
        
        END IF;
      
        --CAMPOS DE FORMULARIO
      
        --ELIMINAR DATOS DE LA TABLA TEMPORAL DE LOS CAMPOS DINAMICOS ESPECIALMENTE DE LA VENTANA MODAL X JR
        DELETE FROM COMUMGR.YTRTEMP
         WHERE YTRTEMP_PLAN_PROC_CODE =
               ky_json.campo(jsonObj, 'plan_proc_code')
           AND YTRTEMP_PLAN_SEQ = ky_json.campo(jsonObj, 'plan_seq')
           AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id');
      
        --INSERTAMOS POLITICAS DE ACEPTACION EN CASO LAS TENGA
        SELECT YTRPLAN_IND_HAB_POLI
          INTO V_YTRPLAN_IND_HAB_POLI
          FROM COMUMGR.YTRPLAN
         WHERE YTRPLAN_PROC_CODE = v_plan_proc_code
           AND YTRPLAN_SEQ = v_PLAN_SEQ;
      
        IF V_YTRPLAN_IND_HAB_POLI = 'S' THEN
        
          --SELECT COUNT(*) INTO V_CANT FROM COMUMGR.YTACEPO WHERE YTACEPO_DOCU_CODE = P_DOCUMENTO;
        
          IF P_HAB_POLI = 'S' THEN
          
            --V_VALIDAR_1 := 1;
          
            --V_MSG := 'ERP-ERR DOCUMENTO NO SE PUEDE ENVIAR A EVALUACI?N POR QUE NO ACEPT? LAS POLITICAS';
          
            -- INSERTAR
            SELECT YTPLAPO_TXT_DESC
              INTO V_YTACEPO_DESCRIP_POLI
              FROM COMUMGR.YTPLAPO
             WHERE YTPLAPO_PROCE_CODE = v_plan_proc_code
               AND YTPLAPO_SEQ = v_PLAN_SEQ;
            --SELECT YTRPLAN_TXT_POLITICAS INTO V_YTACEPO_DESCRIP_POLI FROM COMUMGR.YTRPLAN WHERE YTRPLAN_PROC_CODE = V_YTBDOCU_PLAN_PROC_CODE AND YTRPLAN_SEQ = V_YTBDOCU_PLAN_SEQ;
          
            INSERT INTO COMUMGR.YTACEPO
              (YTACEPO_CODE,
               YTACEPO_DOCU_CODE,
               YTACEPO_ACEPT_POLI,
               YTACEPO_FECHA_REGISTRO,
               YTACEPO_USUARIO_ID,
               YTACEPO_DESCRIP_POLI)
            VALUES
              (SEQ_YTACEPO_CODE.NEXTVAL,
               V_CODEDOC,
               'S',
               SYSDATE,
               ky_json.campo(jsonObj, 'usua_id'),
               V_YTACEPO_DESCRIP_POLI);
          
            --V_MSG_GLOBAL := 'ERP-ERR DOCUMENTO NO SE PUEDE CREAR POR QUE NO ACEPT? LAS POLITICAS ';
            --RAISE EXP_POLITICAS;
          
            UPDATE COMUMGR.YTBDOCU
               SET YTBDOCU_ACEP_POLITICA = 'S'
             WHERE YTBDOCU_CODE = V_CODEDOC;
          
          END IF;
        
        END IF;
      
        V_PRUEBA := 15387;
      
        -----------------------   LOGICA PARA ADJUNTAR IMAGEN AL REQUISITO DEL DOCUMENTO CREADO ----------------------
        SELECT YTRREDO_CODE
          INTO V_YTRREDO_CODE
          FROM COMUMGR.YTRREDO
         WHERE YTBDOCU_CODE = V_CODEDOC
           AND ROWNUM = 1;
      
        SELECT COUNT(*)
          INTO V_EXISTE
          FROM YTRAPAD
         WHERE YTRAPAD_ADJU_CODE = v_arch
           AND YTRAPAD_APPL_CODE = V_CODEDOC || '-1-' || V_YTRREDO_CODE
           AND YTRAPAD_IND_ESTADO <> 'E';
      
        IF V_EXISTE = 0 THEN
        
          SELECT COUNT(*)
            INTO V_CANTIDAD_ADJUNTOS
            FROM YTRAPAD
           WHERE YTRAPAD_APPL_CODE = V_CODEDOC || '-1-' || V_YTRREDO_CODE
             AND YTRAPAD_IND_ESTADO <> 'E';
        
          --************************************
          --VERIFICAR SI NO SUPERAS EL NUMERO DE ADJUNTOS
          SELECT YTRREDO_ADJ_NUMBER, LOWER(YTRREDO_ADJ_FORMATO)
            INTO V_ADJ_NUM, V_ADJ_FORMATO
            FROM COMUMGR.YTRREDO
           WHERE TRIM(YTBDOCU_CODE || '-' || YTBDOCU_SEQ || '-' ||
                      YTRREDO_CODE) = V_CODEDOC || '-1-' || V_YTRREDO_CODE
             AND ROWNUM = 1;
        
          V_PRUEBA := 15412;
        
          IF V_CANTIDAD_ADJUNTOS < V_ADJ_NUM THEN
          
            V_PRUEBA := 15417;
          
            select lower(ytradju_formato)
              into v_formato
              from comumgr.ytradju
             where ytradju_code = v_arch;
          
            V_PRUEBA := 15419;
          
            IF (INSTR(V_ADJ_FORMATO, v_formato) > 0) THEN
            
              /* SELECT YTRADJU_VALIDADOR INTO V_VALIDADOR FROM  COMUMGR.YTRADJU
              WHERE YTRADJU_USUA_ID = ky_json.campo(jsonObj, 'usua_id') AND YTRADJU_CODE = ky_json.campo(jsonObj, 'archivo');*/
            
              INSERT INTO COMUMGR.YTRAPAD
                (YTRAPAD_ADJU_CODE,
                 YTRAPAD_APPL_CODE,
                 YTRAPAD_APPL_REFERENCIA,
                 YTRAPAD_FECHA_ACTIVIDAD,
                 YTRAPAD_USUA_ID,
                 YTRAPAD_IND_ESTADO,
                 YTRAPAD_SEQ)
              VALUES
                (v_arch,
                 V_CODEDOC || '-1-' || V_YTRREDO_CODE,
                 'DOCDOC',
                 sysdate,
                 ky_json.campo(jsonObj, 'usua_id_reg'),
                 'A',
                 seq_ytrapad_seq.NEXTVAL);
            
              IF (SQL%ROWCOUNT > 0) THEN
              
                if noT V_YTRREDO_CODE is null then
                
                  if 'DOCDOC' = 'DOCDOC' THEN
                  
                    UPDATE COMUMGR.YTRREDO
                       SET YTRREDO_IND_ENV_USUA       = 'S',
                           YTRREDO_IND_ESTADO         = 'V',
                           YTRREDO_FECHA_ADJ_REQ_USUA = SYSDATE,
                           YTRREDO_USUA_ID            = ky_json.campo(jsonObj,
                                                                      'usua_id_reg')
                     WHERE YTRREDO_CODE = V_YTRREDO_CODE;
                  
                    IF (SQL%ROWCOUNT > 0) THEN
                      v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                      --COMMIT;
                    ELSE
                      rollback;
                      V_MSG_GLOBAL := 'ERP-ERR Transacción no se pudo realizar';
                      RAISE exp_GLOBAL;
                    
                    END IF;
                  ELSE
                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                  END IF;
                
                ELSE
                  v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                end if;
              
              ELSE
                V_MSG_GLOBAL := 'ERP-ERR Transacción no se pudo realizar';
                RAISE exp_GLOBAL;
              END IF; --SQL%ROWCOUNT
            
            ELSE
              V_MSG_GLOBAL := 'ERP-ERR ::: FORMATO DE ARCHIVO INCORRECTO SOLO SE PERMITEN FORMATOS : ' ||
                              UPPER(V_ADJ_FORMATO) ||
                              ' ESTAS QUERIENDO SUBIR UN ' ||
                              UPPER(v_formato);
              --V_MSG_GLOBAL:='ERP-ERR DOCUMENTO AL MENOS DEBE TENER UN NIVEL DE APROBACI?N';
              RAISE exp_GLOBAL;
            END IF; -- (INSTR(V_ADJ_FORMATO,v_formato)>0)
          
          ELSE
            V_MSG_GLOBAL := 'ERP-ERR ::: NO SE PUEDE ADJUNTAR M?S DE ' ||
                            V_ADJ_NUM || ' ARCHIVO';
            RAISE exp_GLOBAL;
          END IF; --V_CANTIDAD_ADJUNTOS<V_ADJ_NUM
        ELSE
          V_MSG_GLOBAL := 'ERP-ERR Ya existe un archivo adjunto con esas caracteristicas';
          RAISE exp_GLOBAL;
        END IF;
      
        UPDATE YTDRETRA
           SET YTDRETRA_ATENDIDO = '1'
         WHERE YTDRETRA_ID_USUARIO =
               (SELECT YTBDOCU_USUA_ID
                  FROM YTBDOCU
                 WHERE YTBDOCU_CODE = V_CODEDOC)
           AND YTDRETRA_FK_YTRETRA = 1;
      
        -----------------------  ************************   FIN  ************************  ----------------------
      
        SELECT NVL(TO_NUMBER(MAX(YTBDOCU_NUM_REG)) + 1, 1)
          INTO V_NUM_REG
          FROM COMUMGR.YTBDOCU
         WHERE YTBDOCU_VAAN_CODE = v_vaan_code
           AND TO_NUMBER(YTBDOCU_NUM_REG) < 900000;
        /* IF V_NUM_REG<999000 THEN
           V_NUM_REG:=999000;
        ELSE
           V_NUM_REG:=V_NUM_REG+1;
        END IF;*/
        --GRABAMOS EL CODIGO DEFINITIVO DEL DOCUMENTO
        UPDATE COMUMGR.YTBDOCU
           SET YTBDOCU_NUM_REG = LPAD(V_NUM_REG, 6, '0')
         WHERE YTBDOCU_CODE = V_CODEDOC;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := V_CODEDOC ||
                   'TRANSACCIÓN APLICADA Y GRABADA, SE CREÓ EL DOCUMENTO NÚMERO ' ||
                   V_CODEDOC;
        ELSE
          ROLLBACK;
          v_msg := 'ERP-ERR ERROR AL GRABAR DOCUMENTO ' || V_CODEDOC;
        END IF;
      
      ELSE
        -- v_msg :='ERP-ERR Tienes una deuda de ' || V_DEUDA || ' soles,  para poder realizar el tr?mite debes estar al dia en tus pagos...';
      
        v_msg := V_VALIDA_PC;
      END IF;
    
    ELSIF (P_ACCION = 'EXT') THEN
    
      -- usua_id    v_usua_id
      --observaciones  v_observaciones
      --ytbdocu_pk  V_CODEDOC
    
      SELECT COUNT(*)
        INTO V_NUMERO
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-' || '1'
         AND YTBDOCU_ESTA_CODE = 'EX';
    
      IF V_NUMERO = 0 THEN
        --////////////////////////////////////////////////////////////////////////////////
        -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
        UPDATE YTBDOCU
           SET YTBDOCU_ESTA_CODE     = 'EX',
               YTBDOCU_ID_USUA_ENT   = v_usua_id,
               YTBDOCU_FECHA_ENTREGA = SYSDATE
         WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-' || '1';
      
        --/////////////////////////////////////////////////////
        --EXTORNAR PAGO
      
        UPDATE YTRREPA
           SET YTRREPA_IND_ESTADO  = 'E',
               YTRREPA_FECHA_MODIF = SYSDATE,
               YTRREPA_COMENTARIO  = v_observaciones
         WHERE YTRREPA_CODE_APP IN
               (SELECT YTRREDO_CODE
                  FROM YTRREDO
                 WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                       V_CODEDOC || '-' || '1'
                   AND YTRREDO_TIRE_CODE = 'REC');
      
        --//////////////////////////////////////////////////////////////////////////////
        --REGISTRAMOS EL ESTADO DEL DOCUMENTO
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_CODEDOC,
           1,
           YTRESDO_SEQ_SEQ.nextval,
           'EX',
           SYSDATE,
           v_usua_id,
           '<span style="background-color:red;color:#fff; font-weight:bold;">Documento fue extornado: por usuario: ' ||
           v_usua_id || '... </span><br>' || v_observaciones);
      
        --//////////////////////////////////////////////////////////////////////////////
        --inserta comentario al tracking
      
        INSERT INTO COMUMGR.YTRCOME
          (YTRCOME_CODE,
           YTRCOME_DOCU_CODE,
           YTRCOME_DOCU_SEQ,
           YTRCOME_FECHA_ACTIVIDAD,
           YTRCOME_USUA_ID,
           YTRCOME_TICO_CODE,
           YTRCOME_MENSAJE,
           YTRCOME_NOTI_CORREO,
           YTRCOME_USUA_NOMBRE)
        VALUES
          (SEQ_YTRCOME_CODE.NEXTVAL,
           V_CODEDOC,
           1,
           sysdate,
           v_usua_id,
           'AUTO',
           '<span style="background-color:red;color:#fff; font-weight:bold;">Documento fue extornado: por usuario: ' ||
           v_usua_id || '... </span><br>' || v_observaciones,
           0,
           baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(v_usua_id),
                                                         'X'));
      
        v_msg := 'OK';
      
        COMMIT;
      
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE EXTORNAR UN DOCUMENTO YA EXTORNADO';
      END IF;
    
    ELSIF (P_ACCION = 'ACT') THEN
    
      /*VALUES (V_CODEDOC, 1, ky_json.campo(jsonObj, 'esta_code'), V_CODEEXP, ky_json.campo(jsonObj, 'coll_code'), ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq'),
      ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'usua_id_reg'), sysdate, sysdate, ky_json.campo(jsonObj, 'fecha_emision'), ky_json.campo(jsonObj, 'leido'), ky_json.campo(jsonObj, 'camp_code'),
      ky_json.campo(jsonObj, 'data'), ky_json.campo(jsonObj, 'busca'), V_PLANTILLA, ky_json.campo(jsonObj, 'observaciones'), ky_json.campo(jsonObj, 'asunto'), ky_json.campo(jsonObj, 'numero_folios'), ky_json.campo(jsonObj, 'ind_virtual'),
      V_CARRERA, ky_json.campo(jsonObj, 'levl_code'), ky_json.campo(jsonObj, 'condicion'), V_APELLIDOS, V_NOMBRES, V_PIDM, V_CARRERA_DESC,
      V_FACULTAD, V_FACULTAD_DESC, V_DNI, V_SEXO, null, null,
      -1*V_NUMERO, null, null, null, ky_json.campo(jsonObj, 'codigo_barras'),
      ky_json.campo(jsonObj, 'unidad_entrega'), ky_json.campo(jsonObj, 'id_usua_recibe'), ky_json.campo(jsonObj, 'unidad_entrega_coas'),V_TIPODOC,v_soli_code,ky_json.campo(jsonObj, 'p_tipodoc')
      ,ky_json.campo(jsonObj, 'p_num_ext'),ky_json.campo(jsonObj, 'prioridad'));*/
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      --v_soli_code:='IE';
    
      IF (v_soli_code = 'US') THEN
        SELECT SPRIDEN_PIDM,
               SPRIDEN_LAST_NAME,
               SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
               SPBPERS_SSN DNI,
               SPBPERS_SEX SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM SPRIDEN@PROD.INT.UPAO.EDU.PE, SPBPERS@PROD.INT.UPAO.EDU.PE
         WHERE SPRIDEN_ID = v_usua_id
           AND SPRIDEN_CHANGE_IND IS NULL
           AND SPRIDEN_PIDM = SPBPERS_PIDM;
      
      ELSIF (v_soli_code = 'IE') THEN
        SELECT '' PIDM, '' APELLIDOS, YTVINST_DESCRIPCION, '' DNI, '' SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM YTVINST
         WHERE YTVINST_CODE = v_usua_id;
      END IF;
    
      SELECT YTBDOCU_ESTA_CODE
        INTO V_ESTA_ACTUAL
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'ytbdocu_pk') || '-' || '1';
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
      
        V_CAMPOS := replace(replace(replace(ky_json.campo(jsonObj, 'data'),
                                            '¬',
                                            '{'),
                                    'µ',
                                    '}'),
                            '|',
                            '"');
        V_CAMPOS := REPLACE(V_CAMPOS, '?', '');
      
        UPDATE COMUMGR.YTBDOCU
           SET YTBDOCU_USUA_ID_REG = ky_json.campo(jsonObj, 'usua_id_reg'),
               YTBDOCU_USUA_ID     = v_usua_id,
               YTBDOCU_NOMBRES     = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
               YTBDOCU_ASUNTO        = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               YTBDOCU_NUMERO_FOLIOS = ky_json.campo(jsonObj,
                                                     'numero_folios'),
               YTBDOCU_TIDO_CODE     = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA          = V_CAMPOS,
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               --YTBDOCU_MAJR_CODE            = :YTBDOCU_MAJR_CODE,
               -- YTBDOCU_LEVL_CODE            = :YTBDOCU_LEVL_CODE,
               -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
               -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
               --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
               YTBDOCU_CODIGO_BARRAS = ky_json.campo(jsonObj,
                                                     'codigo_barras'),
               --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
               -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
               --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
               YTBDOCU_NUM_EXT        = ky_json.campo(jsonObj, 'p_num_ext'),
               YTBDOCU_PRIO_CODE      = ky_json.campo(jsonObj, 'prioridad'),
               YTBDOCU_DOC_REFERENCIA = ky_json.campo(jsonObj,
                                                      'p_referencia')
        
         WHERE YTBDOCU_CODE = ky_json.campo(jsonObj, 'ytbdocu_pk')
           AND YTBDOCU_SEQ = 1;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCIÓN APLICADA';
        ELSE
          v_msg := 'ERP-ERR TRANSACCIÓN APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
    ELSIF (P_ACCION = 'ACTUU') THEN
    
      /*VALUES (V_CODEDOC, 1, ky_json.campo(jsonObj, 'esta_code'), V_CODEEXP, ky_json.campo(jsonObj, 'coll_code'), ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq'),
      ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'usua_id_reg'), sysdate, sysdate, ky_json.campo(jsonObj, 'fecha_emision'), ky_json.campo(jsonObj, 'leido'), ky_json.campo(jsonObj, 'camp_code'),
      ky_json.campo(jsonObj, 'data'), ky_json.campo(jsonObj, 'busca'), V_PLANTILLA, ky_json.campo(jsonObj, 'observaciones'), ky_json.campo(jsonObj, 'asunto'), ky_json.campo(jsonObj, 'numero_folios'), ky_json.campo(jsonObj, 'ind_virtual'),
      V_CARRERA, ky_json.campo(jsonObj, 'levl_code'), ky_json.campo(jsonObj, 'condicion'), V_APELLIDOS, V_NOMBRES, V_PIDM, V_CARRERA_DESC,
      V_FACULTAD, V_FACULTAD_DESC, V_DNI, V_SEXO, null, null,
      -1*V_NUMERO, null, null, null, ky_json.campo(jsonObj, 'codigo_barras'),
      ky_json.campo(jsonObj, 'unidad_entrega'), ky_json.campo(jsonObj, 'id_usua_recibe'), ky_json.campo(jsonObj, 'unidad_entrega_coas'),V_TIPODOC,v_soli_code,ky_json.campo(jsonObj, 'p_tipodoc')
      ,ky_json.campo(jsonObj, 'p_num_ext'),ky_json.campo(jsonObj, 'prioridad'));*/
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      --v_soli_code:='IE';
    
      /*
      IF(v_soli_code='US') THEN
       SELECT SPRIDEN_PIDM ,SPRIDEN_LAST_NAME,SPRIDEN_FIRST_NAME||' '||SPRIDEN_MI,SPBPERS_SSN DNI,SPBPERS_SEX SEXO  INTO V_PIDM,V_APELLIDOS,V_NOMBRES,V_DNI,V_SEXO
       FROM SPRIDEN@PROD.INT.UPAO.EDU.PE,SPBPERS@PROD.INT.UPAO.EDU.PE
       WHERE SPRIDEN_ID=v_usua_id AND SPRIDEN_CHANGE_IND IS NULL
       AND SPRIDEN_PIDM=SPBPERS_PIDM;
      
       ELSIF(v_soli_code='IE') THEN
       SELECT '' PIDM,'' APELLIDOS,YTVINST_DESCRIPCION,'' DNI,'' SEXO INTO V_PIDM,V_APELLIDOS,V_NOMBRES,V_DNI,V_SEXO FROM YTVINST WHERE YTVINST_CODE=v_usua_id;
      END IF;
      */
      SELECT YTBDOCU_ESTA_CODE
        INTO V_ESTA_ACTUAL
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'ytbdocu_pk') || '-' || '1';
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
      
        V_CAMPOS := replace(replace(replace(ky_json.campo(jsonObj, 'data'),
                                            '¬',
                                            '{'),
                                    'µ',
                                    '}'),
                            '|',
                            '"');
        V_CAMPOS := REPLACE(V_CAMPOS, '?', '');
        UPDATE COMUMGR.YTBDOCU
           SET --YTBDOCU_USUA_ID_REG      = ky_json.campo(jsonObj, 'usua_id_reg'),
               -- YTBDOCU_USUA_ID          = v_usua_id,
               -- YTBDOCU_NOMBRES          = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
                       YTBDOCU_ASUNTO = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               YTBDOCU_NUMERO_FOLIOS = ky_json.campo(jsonObj,
                                                     'numero_folios'),
               -- YTBDOCU_TIDO_CODE        = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA = V_CAMPOS,
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               --YTBDOCU_MAJR_CODE            = :YTBDOCU_MAJR_CODE,
               -- YTBDOCU_LEVL_CODE            = :YTBDOCU_LEVL_CODE,
               -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
               -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
               --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
               YTBDOCU_CODIGO_BARRAS = ky_json.campo(jsonObj,
                                                     'codigo_barras'),
               --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
               -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
               --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
               YTBDOCU_NUM_EXT        = ky_json.campo(jsonObj, 'p_num_ext'),
               YTBDOCU_PRIO_CODE      = ky_json.campo(jsonObj, 'prioridad'),
               YTBDOCU_DOC_REFERENCIA = ky_json.campo(jsonObj, 'referencia')
         WHERE YTBDOCU_CODE = ky_json.campo(jsonObj, 'ytbdocu_pk')
           AND YTBDOCU_SEQ = 1;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCIÓN APLICADA';
        ELSE
          v_msg := 'ERP-ERR TRANSACCIÓN APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
    ELSIF (P_ACCION = 'ACU') THEN
    
      /*VALUES (V_CODEDOC, 1, ky_json.campo(jsonObj, 'esta_code'), V_CODEEXP, ky_json.campo(jsonObj, 'coll_code'), ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq'),
      ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'usua_id_reg'), sysdate, sysdate, ky_json.campo(jsonObj, 'fecha_emision'), ky_json.campo(jsonObj, 'leido'), ky_json.campo(jsonObj, 'camp_code'),
      ky_json.campo(jsonObj, 'data'), ky_json.campo(jsonObj, 'busca'), V_PLANTILLA, ky_json.campo(jsonObj, 'observaciones'), ky_json.campo(jsonObj, 'asunto'), ky_json.campo(jsonObj, 'numero_folios'), ky_json.campo(jsonObj, 'ind_virtual'),
      V_CARRERA, ky_json.campo(jsonObj, 'levl_code'), ky_json.campo(jsonObj, 'condicion'), V_APELLIDOS, V_NOMBRES, V_PIDM, V_CARRERA_DESC,
      V_FACULTAD, V_FACULTAD_DESC, V_DNI, V_SEXO, null, null,
      -1*V_NUMERO, null, null, null, ky_json.campo(jsonObj, 'codigo_barras'),
      ky_json.campo(jsonObj, 'unidad_entrega'), ky_json.campo(jsonObj, 'id_usua_recibe'), ky_json.campo(jsonObj, 'unidad_entrega_coas'),V_TIPODOC,v_soli_code,ky_json.campo(jsonObj, 'p_tipodoc')
      ,ky_json.campo(jsonObj, 'p_num_ext'),ky_json.campo(jsonObj, 'prioridad'));*/
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      --v_soli_code:='IE';
    
      IF (v_soli_code = 'US') THEN
        SELECT SPRIDEN_PIDM,
               SPRIDEN_LAST_NAME,
               SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
               SPBPERS_SSN DNI,
               SPBPERS_SEX SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM SPRIDEN@PROD.INT.UPAO.EDU.PE, SPBPERS@PROD.INT.UPAO.EDU.PE
         WHERE SPRIDEN_ID = v_usua_id
           AND SPRIDEN_CHANGE_IND IS NULL
           AND SPRIDEN_PIDM = SPBPERS_PIDM;
      
      ELSIF (v_soli_code = 'IE') THEN
        SELECT '' PIDM, '' APELLIDOS, YTVINST_DESCRIPCION, '' DNI, '' SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM YTVINST
         WHERE YTVINST_CODE = v_usua_id;
      END IF;
    
      SELECT YTBDOCU_ESTA_CODE
        INTO V_ESTA_ACTUAL
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'ytbdocu_pk') || '-' || '1';
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
      
        V_CAMPOS := replace(replace(replace(ky_json.campo(jsonObj, 'data'),
                                            '¬',
                                            '{'),
                                    'µ',
                                    '}'),
                            '|',
                            '"');
        V_CAMPOS := REPLACE(V_CAMPOS, '?', '');
        UPDATE COMUMGR.YTBDOCU
           SET --YTBDOCU_USUA_ID_REG      = ky_json.campo(jsonObj, 'usua_id_reg'),
               -- YTBDOCU_USUA_ID          = v_usua_id,
               -- YTBDOCU_NOMBRES          = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
                       YTBDOCU_ASUNTO = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               YTBDOCU_NUMERO_FOLIOS = ky_json.campo(jsonObj,
                                                     'numero_folios'),
               -- YTBDOCU_TIDO_CODE        = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA = V_CAMPOS,
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               --YTBDOCU_MAJR_CODE            = :YTBDOCU_MAJR_CODE,
               -- YTBDOCU_LEVL_CODE            = :YTBDOCU_LEVL_CODE,
               -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
               -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
               --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
               YTBDOCU_CODIGO_BARRAS = ky_json.campo(jsonObj,
                                                     'codigo_barras'),
               --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
               -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
               --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
               YTBDOCU_NUM_EXT        = ky_json.campo(jsonObj, 'p_num_ext'),
               YTBDOCU_PRIO_CODE      = ky_json.campo(jsonObj, 'prioridad'),
               YTBDOCU_DOC_REFERENCIA = ky_json.campo(jsonObj, 'referencia')
         WHERE YTBDOCU_CODE = ky_json.campo(jsonObj, 'ytbdocu_pk')
           AND YTBDOCU_SEQ = 1;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCIÓN APLICADA';
        ELSE
          v_msg := 'ERP-ERR TRANSACCIÓN APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
      --******************ACTUALIZA ESTUDIANTE DESDE WEB**************************************
      --actualiza usuario desde web
    
    ELSIF (P_ACCION = 'ACUW') THEN
    
      V_PRUEBA := 12789;
    
      v_usua_id := ky_json.campo(jsonObj, 'usua_id');
      V_CODEDOC := ky_json.campo(jsonObj, 'ytbdocu_pk');
      --v_soli_code:='IE';
    
      IF (v_soli_code = 'US') THEN
      
        SELECT SPRIDEN_PIDM,
               SPRIDEN_LAST_NAME,
               SPRIDEN_FIRST_NAME || ' ' || SPRIDEN_MI,
               SPBPERS_SSN DNI,
               SPBPERS_SEX SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM SPRIDEN@PROD.INT.UPAO.EDU.PE, SPBPERS@PROD.INT.UPAO.EDU.PE
         WHERE SPRIDEN_ID = v_usua_id
           AND SPRIDEN_CHANGE_IND IS NULL
           AND SPRIDEN_PIDM = SPBPERS_PIDM;
      
        /*INICIALIZAR VARIABLES CARRERA, NIVEL Y CAMPUS PORQUE AHORA NO SE RECIBIRA ESOS PARAMETROS DESDE EL FORMULARIO*/
      
        SELECT YTBDOCU_ESTA_CODE
          INTO V_ESTA_ACTUAL
          FROM COMUMGR.YTBDOCU
         WHERE YTBDOCU_CODE = V_CODEDOC;
      
        IF V_ESTA_ACTUAL = 'OB' THEN
        
          SELECT YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CAMP_CODE
            INTO V_CARRERA_USUA, V_NIVEL_1, V_CAMP_CODE_1
            FROM COMUMGR.YTBDOCU
           WHERE YTBDOCU_CODE = V_CODEDOC;
        
        END IF;
      
        V_ESTA_ACTUAL := '';
      
        --SI NO SELECCIONO CARRERA
        IF (V_CARRERA_USUA = '0' OR V_CARRERA_USUA = '-1' OR
           V_CARRERA_USUA IS NULL) THEN
        
          SELECT count(*)
            into V_NO_CC
            FROM SORLCUR@prod.int.upao.edu.pe S,
                 SORLFOS@prod.int.upao.edu.pe
           WHERE S.SORLCUR_PIDM = V_PIDM
                --AND NOT S.SORLCUR_LEVL_CODE  IN ('UB')
             AND S.SORLCUR_LMOD_CODE = 'LEARNER'
             AND S.SORLCUR_CACT_CODE = 'ACTIVE'
             AND SORLCUR_TERM_CODE =
                 (select MAX(XX.SORLCUR_TERM_CODE)
                    from SORLCUR@prod.int.upao.edu.pe XX
                   where sorlcur_pidm = V_PIDM
                     AND SORLCUR_LMOD_CODE = 'LEARNER'
                     AND SORLCUR_CACT_CODE = 'ACTIVE'
                     AND NOT XX.SORLCUR_LEVL_CODE IN ('UB'))
                -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
             AND S.SORLCUR_PIDM = SORLFOS_PIDM
             AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
             AND SORLFOS_CACT_CODE = 'ACTIVE'
                -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
             AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
        
          IF V_NO_CC > 0 THEN
          
            SELECT SORLCUR_COLL_CODE,
                   (SELECT STVCOLL_DESC
                      FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                     WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                   SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                   (SELECT STVMAJR_DESC
                      FROM STVMAJR@prod.int.upao.edu.pe
                     WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                   S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                   S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                   --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                  ,
                   S.SORLCUR_PROGRAM AS PROGRAMA
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SORLCUR@prod.int.upao.edu.pe S,
                   SORLFOS@prod.int.upao.edu.pe
             WHERE S.SORLCUR_PIDM = V_PIDM
               AND NOT S.SORLCUR_LEVL_CODE IN ('UB')
               AND S.SORLCUR_LMOD_CODE = 'LEARNER'
               AND S.SORLCUR_CACT_CODE = 'ACTIVE'
               AND SORLCUR_TERM_CODE =
                   (select MAX(XX.SORLCUR_TERM_CODE)
                      from SORLCUR@prod.int.upao.edu.pe XX
                     where sorlcur_pidm = V_PIDM
                       AND SORLCUR_LMOD_CODE = 'LEARNER'
                       AND SORLCUR_CACT_CODE = 'ACTIVE'
                       AND NOT XX.SORLCUR_LEVL_CODE IN ('UB'))
                  -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
               AND S.SORLCUR_PIDM = SORLFOS_PIDM
               AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
               AND SORLFOS_CACT_CODE = 'ACTIVE'
                  -- AND O2.SORCMJR_MAJR_CODE = SORLFOS_MAJR_CODE
               AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
          
          ELSE
          
            SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                            (SELECT STVCOLL_DESC
                               FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                              WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                            SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                            (SELECT STVMAJR_DESC
                               FROM STVMAJR@prod.int.upao.edu.pe
                              WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                            SGBSTDN_CAMP_CODE,
                            SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                            SGBSTDN_PROGRAM_1 PROGRAMA
            
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SGBSTDN@prod.int.upao.edu.pe S
             WHERE SGBSTDN_PIDM = V_PIDM
               AND (NOT SGBSTDN_LEVL_CODE_2 IN ('UB') OR
                   SGBSTDN_LEVL_CODE_2 IS NULL);
          
          END IF;
        
          V_PARAMETRO := V_CARRERA;
        
        ELSE
          --USUARIO SELECCIONA SELECIONA CARRERA
        
          SELECT YTBDOCU_CAMP_CODE
            INTO V_CAMP_CODE
            FROM YTBDOCU
           WHERE YTBDOCU_CODE = V_CODEDOC;
        
          select count(*)
            into V_NO_CC
            FROM SORLCUR@prod.int.upao.edu.pe S,
                 SORLFOS@prod.int.upao.edu.pe
           WHERE S.SORLCUR_PIDM = V_PIDM
             AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
             AND S.SORLCUR_CAMP_CODE = V_CAMP_CODE
             AND S.SORLCUR_LMOD_CODE = 'LEARNER'
             AND S.SORLCUR_CACT_CODE = 'ACTIVE'
             AND SORLCUR_TERM_CODE =
                 (select MAX(XX.SORLCUR_TERM_CODE)
                    from SORLCUR@prod.int.upao.edu.pe XX,
                         SORLFOS@prod.int.upao.edu.pe YY
                   where sorlcur_pidm = V_PIDM
                     AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                     AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                     AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                     AND XX.SORLCUR_CAMP_CODE = V_CAMP_CODE
                     AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                     AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                     AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                     AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
             AND S.SORLCUR_PIDM = SORLFOS_PIDM
             AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
             AND SORLFOS_CACT_CODE = 'ACTIVE'
             AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
             AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO;
        
          IF V_NO_CC > 0 THEN
          
            SELECT SORLCUR_COLL_CODE,
                   (SELECT STVCOLL_DESC
                      FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                     WHERE STVCOLL_CODE = S.SORLCUR_COLL_CODE) FACULTAD_DES,
                   SORLFOS_MAJR_CODE AS SORLFOS_MAJR_CODE,
                   (SELECT STVMAJR_DESC
                      FROM STVMAJR@prod.int.upao.edu.pe
                     WHERE STVMAJR_CODE = SORLFOS_MAJR_CODE) AS CARRERA_DESC,
                   S.SORLCUR_CAMP_CODE AS SGBSTDN_CAMP_CODE,
                   S.SORLCUR_LEVL_CODE AS SORLCUR_LEVL_CODE
                   --  KYAG_GENERAL_AULA.FYG_Get_Name_Campus(S.SORLCUR_CAMP_CODE) as CAMP_DES,
                  ,
                   S.SORLCUR_PROGRAM AS PROGRAMA
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SORLCUR@prod.int.upao.edu.pe S,
                   SORLFOS@prod.int.upao.edu.pe
             WHERE S.SORLCUR_PIDM = V_PIDM
               AND S.SORLCUR_LEVL_CODE = V_NIVEL_1
               AND S.SORLCUR_CAMP_CODE = V_CAMP_CODE
               AND S.SORLCUR_LMOD_CODE = 'LEARNER'
               AND S.SORLCUR_CACT_CODE = 'ACTIVE'
               AND SORLCUR_TERM_CODE =
                   (select MAX(XX.SORLCUR_TERM_CODE)
                      from SORLCUR@prod.int.upao.edu.pe XX,
                           SORLFOS@prod.int.upao.edu.pe YY
                     where sorlcur_pidm = V_PIDM
                       AND XX.SORLCUR_LMOD_CODE = 'LEARNER'
                       AND XX.SORLCUR_CACT_CODE = 'ACTIVE'
                       AND XX.SORLCUR_LEVL_CODE = V_NIVEL_1
                       AND XX.SORLCUR_SEQNO = YY.SORLFOS_LCUR_SEQNO
                       AND XX.SORLCUR_CAMP_CODE = V_CAMP_CODE
                       AND YY.SORLFOS_CACT_CODE = 'ACTIVE'
                       AND YY.SORLFOS_MAJR_CODE = V_CARRERA_USUA
                       AND XX.SORLCUR_PRIORITY_NO = YY.SORLFOS_PRIORITY_NO)
                  -- AND S.SORLCUR_CURR_RULE = SORCMJR_CURR_RULE
               AND S.SORLCUR_PIDM = SORLFOS_PIDM
               AND S.SORLCUR_SEQNO = SORLFOS_LCUR_SEQNO
               AND SORLFOS_CACT_CODE = 'ACTIVE'
               AND SORLFOS_MAJR_CODE = V_CARRERA_USUA
               AND S.SORLCUR_PRIORITY_NO = SORLFOS_PRIORITY_NO
               AND ROWNUM = 1;
          
          ELSE
          
            SELECT DISTINCT SGBSTDN_COLL_CODE_1 SORLCUR_COLL_CODE,
                            (SELECT STVCOLL_DESC
                               FROM STVCOLL@PROD.INT.UPAO.EDU.PE
                              WHERE STVCOLL_CODE = S.SGBSTDN_COLL_CODE_1) FACULTAD_DES,
                            SGBSTDN_MAJR_CODE_1 SORLFOS_MAJR_CODE,
                            (SELECT STVMAJR_DESC
                               FROM STVMAJR@prod.int.upao.edu.pe
                              WHERE STVMAJR_CODE = SGBSTDN_MAJR_CODE_1) AS CARRERA_DESC,
                            SGBSTDN_CAMP_CODE,
                            SGBSTDN_LEVL_CODE SORLCUR_LEVL_CODE,
                            SGBSTDN_PROGRAM_1 PROGRAMA
            
              INTO V_FACULTAD,
                   V_FACULTAD_DESC,
                   V_CARRERA,
                   V_CARRERA_DESC,
                   V_CAMP_CODE,
                   V_LEVL_CODE,
                   V_PROGRAMA_CARR
              FROM SGBSTDN@prod.int.upao.edu.pe S
             WHERE SGBSTDN_PIDM = V_PIDM
               AND (NOT SGBSTDN_LEVL_CODE_2 IN ('UB') OR
                   SGBSTDN_LEVL_CODE_2 IS NULL)
               AND SGBSTDN_MAJR_CODE_1 = V_CARRERA_USUA
               AND SGBSTDN_LEVL_CODE = V_NIVEL_1;
          
          END IF;
        
          V_PARAMETRO := V_CARRERA_USUA;
        
        END IF;
      
      ELSIF (v_soli_code = 'IE') THEN
      
        SELECT '' PIDM, '' APELLIDOS, YTVINST_DESCRIPCION, '' DNI, '' SEXO
          INTO V_PIDM, V_APELLIDOS, V_NOMBRES, V_DNI, V_SEXO
          FROM YTVINST
         WHERE YTVINST_CODE = v_usua_id;
      
      END IF;
    
      SELECT YTBDOCU_ESTA_CODE, YTBDOCU_MAJR_CODE, YTBDOCU_COSTO
        INTO V_ESTA_ACTUAL, V_CARRERA_ACTUAL, V_MONTO_REQ
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-' || '1';
    
      V_PRUEBA := 13029;
    
      IF (V_ESTA_ACTUAL <> 'AT' OR V_ESTA_ACTUAL <> 'CO') THEN
      
        V_CAMPOS := replace(replace(replace(ky_json.campo(jsonObj, 'data'),
                                            '¬',
                                            '{'),
                                    'µ',
                                    '}'),
                            '|',
                            '"');
        V_CAMPOS := REPLACE(V_CAMPOS, '?', '');
      
        IF ky_json.campo(jsonObj, 'p_minor') IS NOT NULL THEN
          SELECT STVMAJR_DESC
            INTO V_MINOR_DESC
            FROM STVMAJR@PROD.INT.UPAO.EDU.PE
           WHERE STVMAJR_CODE = TRIM(ky_json.campo(jsonObj, 'p_minor'));
        
        END IF;
      
        UPDATE COMUMGR.YTBDOCU
           SET --YTBDOCU_USUA_ID_REG      = ky_json.campo(jsonObj, 'usua_id_reg'),
               YTBDOCU_USUA_ID = v_usua_id,
               --   YTBDOCU_NOMBRES          = V_NOMBRES,
               -- YTBDOCU_FECHA_ACTIVIDAD      = :YTBDOCU_FECHA_ACTIVIDAD,
               YTBDOCU_ASUNTO        = ky_json.campo(jsonObj, 'asunto'),
               YTBDOCU_observaciones = ky_json.campo(jsonObj,
                                                     'observaciones'),
               --YTBDOCU_NUMERO_FOLIOS    = ky_json.campo(jsonObj, 'numero_folios'),
               -- YTBDOCU_TIDO_CODE        = ky_json.campo(jsonObj, 'p_tipodoc'),
               YTBDOCU_DATA = V_CAMPOS,
               
               -- YTBDOCU_IND_VIRTUAL          = :YTBDOCU_IND_VIRTUAL,
               YTBDOCU_MAJR_CODE   = V_CARRERA,
               YTBDOCU_LEVL_CODE   = V_LEVL_CODE,
               YTBDOCU_MAJR_DESC   = V_CARRERA_DESC,
               YTBDOCU_COLL_CODE_1 = V_FACULTAD,
               YTBDOCU_COLL_DESC   = V_FACULTAD_DESC,
               YTBDOCU_CARR_PROG   = V_PROGRAMA_CARR,
               YTBDOCU_MINOR_CODE  = ky_json.campo(jsonObj, 'p_minor'),
               YTBDOCU_MINOR_DESC  = V_MINOR_DESC
        -- YTBDOCU_CONDICION            = :YTBDOCU_CONDICION,
        -- YTBDOCU_APELLIDOS            = :YTBDOCU_APELLIDOS,
        --YTBDOCU_NOMBRES              = :YTBDOCU_NOMBRES,
        -- YTBDOCU_CODIGO_BARRAS    = ky_json.campo(jsonObj, 'codigo_barras'),
        --YTBDOCU_UNIDAD_ENTREGAR      = :YTBDOCU_UNIDAD_ENTREGAR,
        -- YTBDOCU_ID_USUA_RECIBE       = :YTBDOCU_ID_USUA_RECIBE,
        --YTBDOCU_UNIDAD_ENTREGAR_COAS = :YTBDOCU_UNIDAD_ENTREGAR_COAS,
        -- YTBDOCU_NUM_EXT          = ky_json.campo(jsonObj, 'p_num_ext'),
        -- YTBDOCU_PRIO_CODE        = ky_json.campo(jsonObj, 'prioridad')
         WHERE YTBDOCU_CODE = V_CODEDOC
           AND YTBDOCU_SEQ = 1;
      
        V_PRUEBA := 13068;
        V_EXISTE := 0;
      
        --####OBTENER DATOS DE LA PLANTILLA
        SELECT YTBDOCU_PLAN_PROC_CODE, YTBDOCU_PLAN_SEQ, YTBDOCU_TIPO_CODE
          INTO v_plan_proc_code, v_PLAN_SEQ, V_TIPODOC
          FROM COMUMGR.YTBDOCU
         WHERE YTBDOCU_CODE = V_CODEDOC
           AND YTBDOCU_SEQ = 1;
      
        --####### REQUISITOS
      
        V_PRUEBA := 13387;
      
        OPEN DT(v_plan_proc_code, v_PLAN_SEQ);
        LOOP
          FETCH DT
            INTO DT_ROW;
          EXIT WHEN DT%NOTFOUND;
        
          V_DETAIL_CODE    := NULL;
          V_PAGO_DESC      := NULL;
          V_PAGO_MONTO     := NULL;
          V_PAGO_LEVL_CODE := NULL;
          V_PAGO_BANCO     := '';
        
          --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'ACTUALIZAR - REQUISITOS '|| DT_ROW.TIRE_CODE || '-' || DT_ROW.IND_SOLIC_ACD);
        
          IF (DT_ROW.YTVREQU_IND_FVALIDA = '1') THEN
            -- VERIFICAR SI ACTUALIZA ANTICIPO EN PROCESO DE APROBACION
          
            V_EXISTE := 1;
          
          END IF;
        
          SELECT TO_NUMBER(MAX(YTRREDO_CODE)) + 1
            INTO V_CODEREQ
            FROM YTRREDO;
        
          IF V_CODEREQ IS NULL THEN
            V_CODEREQ := 1;
          END IF;
        
          SELECT LPAD(V_CODEREQ, 8, '0') INTO V_CODEREQ_1 FROM DUAL;
        
          --*******ADICIONAR FUNCIONALIDAD CAMPOS ADICIONALES
          IF ((DT_ROW.TIRE_CODE = 'ADJ' OR DT_ROW.TIRE_CODE = 'GEN') AND
             (LENGTH(NVL(DT_ROW.FUNCION, '0')) <= 1 AND
             LENGTH(NVL(DT_ROW.CAME_CODE, '0')) > 1 AND
             LENGTH(NVL(DT_ROW.CAME_VALOR, '0')) > 1)) THEN
            --************VAMOS A VERIFICAR QUE CAMPO CONDICIONAL SELECCIONO EL USUARIO
            SELECT COUNT(*)
              INTO CAMPOA
              FROM COMUMGR.YTRVAMD
             where YTRVAMD_DOCU_CODE = V_CODEDOC
               AND YTRVAMD_DOCU_SEQ = 1
               AND YTRVAMD_CAME_CODE = DT_ROW.CAME_CODE
               AND YTRVAMD_VALOR = DT_ROW.CAME_VALOR;
          
            --#ELIMINAR EL ADJUNTO SI EXISTIERA
            DELETE COMUMGR.YTRAPAD
             WHERE YTRAPAD_APPL_CODE IN
                   (SELECT V_CODEDOC || '-1' || '-' || YTRREDO_CODE
                      FROM COMUMGR.YTRREDO
                     WHERE YTBDOCU_CODE = trim(V_CODEDOC)
                       AND trim(YTRREDO_REQU_CODE) = TRIM(DT_ROW.CODE));
            --#ELIMINAR EL REQUISITO ANTES DE VOLVER A CREAR
            DELETE COMUMGR.YTRREDO
             WHERE YTBDOCU_CODE = trim(V_CODEDOC)
               AND trim(YTRREDO_REQU_CODE) = TRIM(DT_ROW.CODE);
          
            IF (CAMPOA > 0) THEN
              --#pendiente
            
              INSERT INTO YTRREDO
                (YTRREDO_CODE,
                 YTBDOCU_CODE,
                 YTBDOCU_SEQ,
                 YTRREDO_REQU_CODE,
                 YTRREDO_DESCRIPCION,
                 YTRREDO_USUA_ID,
                 YTRREDO_FECHA_ACTIVIDAD,
                 YTRREDO_IND_ADJ_VIRTUAL,
                 YTRREDO_COMENTARIO,
                 YTRREDO_IND_ESTADO,
                 YTRREDO_FECHA_ACEPTADO,
                 YTRREDO_TIRE_CODE,
                 YTRREDO_ORDEN,
                 YTRREDO_METODO,
                 YTRREDO_AYUDA,
                 YTRREDO_CONCEPTO_PAGO,
                 YTRREDO_ADJ_NUMBER,
                 YTRREDO_ADJ_FORMATO,
                 YTRREDO_PROC_CODE,
                 YTRREDO_CM,
                 YTRREDO_IND_FVALIDA,
                 YTRREDO_MONTO)
              VALUES
                (V_CODEREQ_1,
                 V_CODEDOC,
                 1,
                 DT_ROW.CODE,
                 DT_ROW.DESCRIPCION,
                 ky_json.campo(jsonObj, 'usua_id'),
                 SYSDATE,
                 DT_ROW.ADJUNTAR,
                 'Pendiente',
                 'P',
                 null,
                 DT_ROW.TIRE_CODE,
                 DT_ROW.ORDEN,
                 DT_ROW.FUNCION,
                 DT_ROW.AYUDA,
                 DT_ROW.CONCEPTO_PAGO,
                 DT_ROW.ADJ_NUM,
                 DT_ROW.ADJ_FORMATO,
                 DT_ROW.PROC_CODE,
                 DT_ROW.YTVREQU_CM,
                 DT_ROW.YTVREQU_IND_FVALIDA,
                 V_MONTO_REQ);
            
            END IF;
          ELSE
            --**** SI SON DE TIPO ADJUNTO Y HAY FUNCION
            IF ((DT_ROW.TIRE_CODE = 'ADJ' OR DT_ROW.TIRE_CODE = 'GEN') AND
               LENGTH(NVL(DT_ROW.FUNCION, '0')) > 1) THEN
            
              V_DATA_JSON := '{"p_carrera":"' || V_CARRERA_USUA ||
                             '","p_campo":"' || dt_row.CAME_CODE || '"}';
              IF kyt_ejecutor.EJECUTOR(DT_ROW.FUNCION, V_DATA_JSON) = '1' THEN
              
                DELETE COMUMGR.YTRREDO
                 WHERE YTBDOCU_CODE = trim(V_CODEDOC)
                   AND trim(YTRREDO_REQU_CODE) = TRIM(DT_ROW.CODE);
              
                INSERT INTO YTRREDO
                  (YTRREDO_CODE,
                   YTBDOCU_CODE,
                   YTBDOCU_SEQ,
                   YTRREDO_REQU_CODE,
                   YTRREDO_DESCRIPCION,
                   YTRREDO_USUA_ID,
                   YTRREDO_FECHA_ACTIVIDAD,
                   YTRREDO_IND_ADJ_VIRTUAL,
                   YTRREDO_COMENTARIO,
                   YTRREDO_IND_ESTADO,
                   YTRREDO_FECHA_ACEPTADO,
                   YTRREDO_TIRE_CODE,
                   YTRREDO_ORDEN,
                   YTRREDO_METODO,
                   YTRREDO_AYUDA,
                   YTRREDO_CONCEPTO_PAGO,
                   YTRREDO_ADJ_NUMBER,
                   YTRREDO_ADJ_FORMATO,
                   YTRREDO_PROC_CODE,
                   YTRREDO_CM,
                   YTRREDO_IND_FVALIDA,
                   YTRREDO_MONTO)
                VALUES
                  (V_CODEREQ_1,
                   V_CODEDOC,
                   1,
                   DT_ROW.CODE,
                   DT_ROW.DESCRIPCION,
                   ky_json.campo(jsonObj, 'usua_id'),
                   SYSDATE,
                   DT_ROW.ADJUNTAR,
                   'Pendiente',
                   'P',
                   null,
                   DT_ROW.TIRE_CODE,
                   DT_ROW.ORDEN,
                   DT_ROW.FUNCION,
                   DT_ROW.AYUDA,
                   DT_ROW.CONCEPTO_PAGO,
                   DT_ROW.ADJ_NUM,
                   DT_ROW.ADJ_FORMATO,
                   DT_ROW.PROC_CODE,
                   DT_ROW.YTVREQU_CM,
                   DT_ROW.YTVREQU_IND_FVALIDA,
                   V_MONTO_REQ);
              
              END IF;
            END IF;
          END IF;
        
          --************FIN CAMPOS ADICIONALES
        
        END LOOP;
        CLOSE DT;
      
        --######SE DEBEN VOLVER A REGISTRAR LOS CAMPOS DINAMICOS
      
        V_PRUEBA := 13077;
      
        --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'ACTUALIZAR - CAMPOS DINAMICOS '|| V_EXISTE);
      
        --PRIMERO ELIMINAMOS LOS CAMPOS ACTUALES
        DELETE COMUMGR.YTRVAMD
         WHERE YTRVAMD_DOCU_CODE = V_CODEDOC
           AND YTRVAMD_DOCU_SEQ = 1
           AND YTRVAMD_CONTROL <> 'BT'
           AND YTRVAMD_EN_MODAL <> 'S';
      
        --/////CAMPOS ADICIONALES   24/07/2020
        /* INGRESA EN EL FORMATO   {"000481_CURSO":"HUMA-2222"}*/
      
        IF NOT V_CAMPOS IS NULL THEN
          json_DATA := json(V_CAMPOS);
        
          OPEN C_CAMPOS(v_plan_proc_code, v_PLAN_SEQ);
          LOOP
            FETCH C_CAMPOS
              INTO C_CAMPOS_REC;
            EXIT WHEN C_CAMPOS%NOTFOUND;
          
            IF (C_CAMPOS_REC.CONTROL <> 'OC') THEN
              --/////////////SI CAMPO NO ES OCULTO
            
              IF (C_CAMPOS_REC.CONTROL <> 'BT' AND
                 C_CAMPOS_REC.YTRCAME_MODAL <> 'S') THEN
                ---ACTUALIZAMOS CAMPO DINAMICO TIPO BOTON
              
                /* SELECT COUNT(*) INTO v_encontro FROM COMUMGR.YTRTEMP WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE;
                
                IF v_encontro <> 0 THEN
                
                    SELECT YTRTEMP_JSON_DATA_CLOB INTO V_YTRTEMP_JSON_DATA_CLOB FROM COMUMGR.YTRTEMP WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE;
                
                ELSE
                
                    V_YTRTEMP_JSON_DATA_CLOB := empty_clob();
                
                END IF;
                
                
                
                INSERT INTO COMUMGR.YTRVAMD (
                             YTRVAMD_DOCU_CODE, YTRVAMD_DOCU_SEQ, YTRVAMD_CAME_CODE,
                             YTRVAMD_NOM_CAMPO, YTRVAMD_FECHA_ACTIVIDAD, YTRVAMD_USUA_ID,
                             YTRVAMD_VALOR, YTRVAMD_CAME_ID_CAMPO, YTRVAMD_CODE,YTRVAMD_PLCA_SEQ,
                             YTRVAMD_ORDEN,YTRVAMD_CONTROL,YTRVAMD_REQUERIDO,YTRVAMD_TIPO_CAMPO,YTRVAMD_IND_VALOR,YTRVAMD_VALOR_JSON)
                             VALUES (V_CODEDOC, 1,C_CAMPOS_REC.CAME_CODE, C_CAMPOS_REC.NOM_CAMPO,
                             SYSDATE,ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                             C_CAMPOS_REC.ID_CAMPO,C_CAMPOS_REC.CODE,C_CAMPOS_REC.SEQ,
                             C_CAMPOS_REC.ORDEN,C_CAMPOS_REC.CONTROL,C_CAMPOS_REC.REQUERIDO,C_CAMPOS_REC.TIPO_CAMPO,C_CAMPOS_REC.YTRCAME_IND_VALOR,V_YTRTEMP_JSON_DATA_CLOB);
                
                
                
                
                UPDATE COMUMGR.YTRTEMP SET YTRTEMP_FECHA_REG_DOCUMENTO = SYSDATE, YTRTEMP_OBSERVACIONES = 'REGISTRO DOCUMENTO' , YTRTEMP_ESTADO = 'E'
                WHERE YTRTEMP_FORMA = C_CAMPOS_REC.VALOR_DEFECTO AND YTRTEMP_ESTADO = 'A' AND YTRTEMP_USUARIO = ky_json.campo(jsonObj, 'usua_id') AND YTRTEMP_CAME_CODE = C_CAMPOS_REC.CAME_CODE;
                */
              
                V_PRUEBA := 13131;
              
                v_encontro := 0;
                IF C_CAMPOS_REC.CONTROL <> 'TA' THEN
                  v_encontro := INSTR(ky_json.campo(json_DATA,
                                                    C_CAMPOS_REC.CODE),
                                      '>');
                END IF;
              
                --v_encontro :=INSTR(ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),'>');
                IF (v_encontro = 0) THEN
                  --IF NOT ky_json.campo(json_DATA, C_CAMPOS_REC.CODE) IS NULL THEN
                
                  IF C_CAMPOS_REC.CONTROL = 'TA' THEN
                  
                    INSERT INTO COMUMGR.YTRVAMD
                      (YTRVAMD_DOCU_CODE,
                       YTRVAMD_DOCU_SEQ,
                       YTRVAMD_CAME_CODE,
                       YTRVAMD_NOM_CAMPO,
                       YTRVAMD_FECHA_ACTIVIDAD,
                       YTRVAMD_USUA_ID,
                       YTRVAMD_VALOR_JSON,
                       YTRVAMD_CAME_ID_CAMPO,
                       YTRVAMD_CODE,
                       YTRVAMD_PLCA_SEQ,
                       YTRVAMD_ORDEN,
                       YTRVAMD_CONTROL,
                       YTRVAMD_REQUERIDO,
                       YTRVAMD_TIPO_CAMPO,
                       YTRVAMD_IND_VALOR)
                    VALUES
                      (V_CODEDOC,
                       1,
                       C_CAMPOS_REC.CAME_CODE,
                       C_CAMPOS_REC.NOM_CAMPO,
                       SYSDATE,
                       ky_json.campo(jsonObj, 'usua_id'),
                       ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                       C_CAMPOS_REC.ID_CAMPO,
                       C_CAMPOS_REC.CODE,
                       C_CAMPOS_REC.SEQ,
                       C_CAMPOS_REC.ORDEN,
                       C_CAMPOS_REC.CONTROL,
                       C_CAMPOS_REC.REQUERIDO,
                       C_CAMPOS_REC.TIPO_CAMPO,
                       C_CAMPOS_REC.YTRCAME_IND_VALOR);
                  
                  ELSE
                  
                    INSERT INTO COMUMGR.YTRVAMD
                      (YTRVAMD_DOCU_CODE,
                       YTRVAMD_DOCU_SEQ,
                       YTRVAMD_CAME_CODE,
                       YTRVAMD_NOM_CAMPO,
                       YTRVAMD_FECHA_ACTIVIDAD,
                       YTRVAMD_USUA_ID,
                       YTRVAMD_VALOR,
                       YTRVAMD_CAME_ID_CAMPO,
                       YTRVAMD_CODE,
                       YTRVAMD_PLCA_SEQ,
                       YTRVAMD_ORDEN,
                       YTRVAMD_CONTROL,
                       YTRVAMD_REQUERIDO,
                       YTRVAMD_TIPO_CAMPO,
                       YTRVAMD_IND_VALOR)
                    VALUES
                      (V_CODEDOC,
                       1,
                       C_CAMPOS_REC.CAME_CODE,
                       C_CAMPOS_REC.NOM_CAMPO,
                       SYSDATE,
                       ky_json.campo(jsonObj, 'usua_id'),
                       ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                       C_CAMPOS_REC.ID_CAMPO,
                       C_CAMPOS_REC.CODE,
                       C_CAMPOS_REC.SEQ,
                       C_CAMPOS_REC.ORDEN,
                       C_CAMPOS_REC.CONTROL,
                       C_CAMPOS_REC.REQUERIDO,
                       C_CAMPOS_REC.TIPO_CAMPO,
                       C_CAMPOS_REC.YTRCAME_IND_VALOR);
                  
                  END IF;
                
                  --YTRCAME_CONTROL CONTROL,YTRCAME_REQUERIDO REQUERIDO,YTRPLCA_ORDEN ORDEN,YTRCAME_TIPO_CAMPO TIPO_CAMPO
                
                  --END IF;
                  V_PRUEBA := 13150;
                
                ELSE
                
                  V_VALOR3 := '';
                  select substr(ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                                1,
                                v_encontro - 1),
                         substr(ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                                v_encontro + 1)
                    INTO V_VALOR1, v_valor2
                    from dual;
                
                  V_PRUEBA := 13159;
                
                  if C_CAMPOS_REC.YTRCAME_IND_VALOR = 'S' THEN
                  
                    SELECT YTRVACA_VALOR
                      INTO V_VALOR3
                      FROM COMUMGR.YTRVACA
                     WHERE YTRVACA_CODE = V_VALOR1;
                  
                    V_PRUEBA := 13163;
                  
                  END IF;
                
                  INSERT INTO COMUMGR.YTRVAMD
                    (YTRVAMD_DOCU_CODE,
                     YTRVAMD_DOCU_SEQ,
                     YTRVAMD_CAME_CODE,
                     YTRVAMD_NOM_CAMPO,
                     YTRVAMD_FECHA_ACTIVIDAD,
                     YTRVAMD_USUA_ID,
                     YTRVAMD_VALOR,
                     YTRVAMD_CAME_ID_CAMPO,
                     YTRVAMD_CODE,
                     YTRVAMD_PLCA_SEQ,
                     YTRVAMD_VALOR1,
                     YTRVAMD_ORDEN,
                     YTRVAMD_CONTROL,
                     YTRVAMD_REQUERIDO,
                     YTRVAMD_TIPO_CAMPO,
                     YTRVAMD_VALOR_DEFECTO,
                     YTRVAMD_IND_VALOR)
                  VALUES
                    (V_CODEDOC,
                     1,
                     C_CAMPOS_REC.CAME_CODE,
                     C_CAMPOS_REC.NOM_CAMPO,
                     SYSDATE,
                     ky_json.campo(jsonObj, 'usua_id'),
                     V_VALOR1,
                     C_CAMPOS_REC.ID_CAMPO,
                     C_CAMPOS_REC.CODE,
                     C_CAMPOS_REC.SEQ,
                     V_VALOR2,
                     C_CAMPOS_REC.ORDEN,
                     C_CAMPOS_REC.CONTROL,
                     C_CAMPOS_REC.REQUERIDO,
                     C_CAMPOS_REC.TIPO_CAMPO,
                     V_VALOR3,
                     C_CAMPOS_REC.YTRCAME_IND_VALOR);
                
                END IF;
              
              ELSE
              
                --CALCULAR CANTIDAD DE REGISTROS DEL BOTON SI AFECTA PAGO PARA MODIFICAR EL NUMERO DE COPIAS
              
                IF C_CAMPOS_REC.YTRCAME_AFECTA_PAGO = 'S' THEN
                
                  SELECT YTRVAMD_VALOR_JSON, YTRVAMD_VALOR_DEFECTO
                    INTO V_YTRVAMD_VALOR_JSON, V_YTRVAMD_VALOR_DEFECTO
                    FROM COMUMGR.YTRVAMD
                   WHERE YTRVAMD_DOCU_CODE = V_CODEDOC
                     AND YTRVAMD_CAME_CODE = C_CAMPOS_REC.CAME_CODE
                     AND YTRVAMD_CONTROL = 'BT';
                
                  IF V_YTRVAMD_VALOR_JSON <> empty_clob() THEN
                  
                    V_LISTVALUE_1 := json_list(V_YTRVAMD_VALOR_JSON);
                  
                    V_CANT_1 := 0;
                    FOR i IN 1 .. V_LISTVALUE_1.COUNT LOOP
                    
                      v_element := V_LISTVALUE_1.get(i);
                      v_obj     := json(v_element);
                    
                      V_CICLO_1        := json_ext.get_string(v_obj,
                                                              'ciclo');
                      V_CURSO_1        := json_ext.get_string(v_obj,
                                                              'curso');
                      V_CURSO_NOMBRE_1 := json_ext.get_string(v_obj,
                                                              'curso_nombre');
                      V_CARRERA_1      := json_ext.get_string(v_obj,
                                                              'carrera');
                      V_NIVEL_1        := json_ext.get_string(v_obj,
                                                              'nivel');
                      V_CAMPUS_1       := json_ext.get_string(v_obj,
                                                              'campus');
                    
                      IF V_CARRERA_1 = V_CARRERA THEN
                      
                        V_CANT_1 := V_CANT_1 + 1;
                      
                      END IF;
                    
                    END LOOP;
                  
                  END IF;
                
                  --V_BTN_MIN :=  V_BTN_MIN + C_CAMPOS_REC.YTRCAME_ANCHO;
                  --V_BTN_MAXI := V_BTN_MAXI + C_CAMPOS_REC.YTRCAME_TAMANO;
                
                  IF V_CANT_1 < C_CAMPOS_REC.YTRCAME_ANCHO OR
                     V_CANT_1 > C_CAMPOS_REC.YTRCAME_TAMANO THEN
                  
                    V_MSG_GLOBAL := 'ERP-ERR N?MERO DE DATOS SELECCIONADOS ESTA FUERA DEL RANGO PERMITIDO , PARA ESTE DOCUMENTO TIENE QUE SELECCIONAR COMO M?NIMO ' ||
                                    C_CAMPOS_REC.YTRCAME_ANCHO ||
                                    ' Y COMO M?XIMO ' ||
                                    C_CAMPOS_REC.YTRCAME_TAMANO;
                    RAISE exp_GLOBAL;
                  
                  END IF;
                
                  IF V_CANT_1 >= 1 THEN
                  
                    IF V_YTRVAMD_VALOR_DEFECTO = 'YTPTRIN' THEN
                    
                      V_YTRVAMD_VALOR_DEFECTO := V_YTRVAMD_VALOR_DEFECTO;
                    
                    ELSE
                    
                      UPDATE COMUMGR.YTBDOCU
                         SET YTBDOCU_NUM_COPIA = V_CANT_1
                       WHERE YTBDOCU_CODE = V_CODEDOC;
                    
                    END IF;
                  
                    IF V_EXISTE = 0 THEN
                    
                      --ACTUALIZAR ANTICIPO
                      BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_UPD_COPIAS@PROD.INT.UPAO.EDU.PE(V_CODEDOC,
                                                                                                 V_CANT_1,
                                                                                                 V_MONTO_REQ,
                                                                                                 V_MSG_BANCO);
                    
                      IF V_MSG_BANCO <> 'OK' THEN
                      
                        RAISE_APPLICATION_ERROR(-20001,
                                                'ERP-ERR NO SE ASIGNO PAGO A BANCO ||  Documento: ' ||
                                                V_CODEDOC);
                      
                      END IF;
                    
                    END IF;
                  
                  ELSE
                  
                    --V_PRUEBA := -4;
                  
                    IF V_YTRVAMD_VALOR_DEFECTO = 'YTPTRIN' THEN
                    
                      V_YTRVAMD_VALOR_DEFECTO := V_YTRVAMD_VALOR_DEFECTO;
                    
                    ELSE
                    
                      UPDATE COMUMGR.YTBDOCU
                         SET YTBDOCU_NUM_COPIA = 1
                       WHERE YTBDOCU_CODE = V_CODEDOC;
                    
                    END IF;
                  
                    IF V_EXISTE = 0 THEN
                    
                      --ACTUALIZAR ANTICIPO
                      BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_UPD_COPIAS@PROD.INT.UPAO.EDU.PE(V_CODEDOC,
                                                                                                 1,
                                                                                                 V_MONTO_REQ,
                                                                                                 V_MSG_BANCO);
                    
                      IF V_MSG_BANCO <> 'OK' THEN
                      
                        RAISE_APPLICATION_ERROR(-20001,
                                                'ERP-ERR NO SE ASIGNO PAGO A BANCO ||  Documento: ' ||
                                                V_CODEDOC);
                      
                      END IF;
                    
                    END IF;
                  
                  END IF;
                
                END IF;
              
              END IF;
            
              /*v_encontro :=INSTR(ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),'>');
              IF  (v_encontro=0) THEN
                 --IF NOT ky_json.campo(json_DATA, C_CAMPOS_REC.CODE) IS NULL THEN
              
              
                  INSERT INTO COMUMGR.YTRVAMD (
                   YTRVAMD_DOCU_CODE, YTRVAMD_DOCU_SEQ, YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO, YTRVAMD_FECHA_ACTIVIDAD, YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR, YTRVAMD_CAME_ID_CAMPO, YTRVAMD_CODE,YTRVAMD_PLCA_SEQ,
                   YTRVAMD_ORDEN,YTRVAMD_CONTROL,YTRVAMD_REQUERIDO,YTRVAMD_TIPO_CAMPO,YTRVAMD_IND_VALOR)
                   VALUES (V_CODEDOC, 1,C_CAMPOS_REC.CAME_CODE, C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),
                   C_CAMPOS_REC.ID_CAMPO,C_CAMPOS_REC.CODE,C_CAMPOS_REC.SEQ,
                   C_CAMPOS_REC.ORDEN,C_CAMPOS_REC.CONTROL,C_CAMPOS_REC.REQUERIDO,C_CAMPOS_REC.TIPO_CAMPO,C_CAMPOS_REC.YTRCAME_IND_VALOR);
              
                   --YTRCAME_CONTROL CONTROL,YTRCAME_REQUERIDO REQUERIDO,YTRPLCA_ORDEN ORDEN,YTRCAME_TIPO_CAMPO TIPO_CAMPO
              
                --END IF;
              ELSE
              
                      V_VALOR3:='';
                  select substr(ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),1,v_encontro-1),substr(ky_json.campo(json_DATA, C_CAMPOS_REC.CODE),v_encontro+1)
                  INTO V_VALOR1,v_valor2
                  from dual;
              
                   if C_CAMPOS_REC.YTRCAME_IND_VALOR='S' THEN
              
                      SELECT YTRVACA_VALOR INTO V_VALOR3
                      FROM COMUMGR.YTRVACA WHERE YTRVACA_CODE=V_VALOR1;
              
                  END IF;
              
                INSERT INTO COMUMGR.YTRVAMD (
                   YTRVAMD_DOCU_CODE, YTRVAMD_DOCU_SEQ, YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO, YTRVAMD_FECHA_ACTIVIDAD, YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR, YTRVAMD_CAME_ID_CAMPO, YTRVAMD_CODE,YTRVAMD_PLCA_SEQ,YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,YTRVAMD_CONTROL,YTRVAMD_REQUERIDO,YTRVAMD_TIPO_CAMPO,YTRVAMD_VALOR_DEFECTO,YTRVAMD_IND_VALOR)
                   VALUES (V_CODEDOC, 1,C_CAMPOS_REC.CAME_CODE, C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,ky_json.campo(jsonObj, 'usua_id'),V_VALOR1,
                   C_CAMPOS_REC.ID_CAMPO,C_CAMPOS_REC.CODE,C_CAMPOS_REC.SEQ,V_VALOR2,
                   C_CAMPOS_REC.ORDEN,C_CAMPOS_REC.CONTROL,C_CAMPOS_REC.REQUERIDO,C_CAMPOS_REC.TIPO_CAMPO,V_VALOR3,C_CAMPOS_REC.YTRCAME_IND_VALOR);
              
              END IF;*/
            
            ELSE
              --SI ES OCULTO    INSERTAMOS EL VALOR POR DEFECTO
            
              V_VALOR2 := '';
            
              V_PRUEBA := 13348 || C_CAMPOS_REC.CAME_CODE;
            
              --/// VAMOS A VERIFICAR SI ES CALCULADO
              IF (C_CAMPOS_REC.TIPO_CAMPO = 'A') THEN
                --//SI ES UN CAMPO CALCULADO
              
                --V_JSON_CAMPO_CALCULADO:='{"p_carrera":"'||V_CARRERA_USUA||'","usua_id":"'||v_usua_id||'"}';
              
                V_PRUEBA := 13355;
                --V_CAMP_CODE,V_LEVL_CODE
                V_JSON_CAMPO_CALCULADO := '{"p_carrera":"' || V_CARRERA || '-' ||
                                          V_LEVL_CODE || '-' || V_CAMP_CODE ||
                                          '","usua_id":"' || v_usua_id || '"}';
              
                V_CAMPO_CALCULADO := kyt_ejecutor.EJECUTOR(C_CAMPOS_REC.VALOR_DEFECTO,
                                                           V_JSON_CAMPO_CALCULADO);
              
                V_PRUEBA := 13357;
                IF V_CAMPO_CALCULADO = 'ERR' THEN
                  V_MSG_GLOBAL := 'ERP-ERR AL GENERAR INFORMACION ADICIONAL (ACUW) ' ||
                                  V_JSON_CAMPO_CALCULADO ||
                                  V_CAMPO_CALCULADO;
                  V_PRUEBA     := 13360;
                  RAISE exp_CAMPO_CALCULADO;
                END IF;
              
                IF V_CAMPO_CALCULADO = 'Ninguno' THEN
                
                  --LO QUITAMOS DE LA FUNCION MERITO PORUQE OCASIONABA QUE NO ENTRE EL ERRROR
                  --comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('ORDEN-MERI','EC','TD','DO','KYG_UTILIDADES.FYG_MERITO', P_DATA || SQLERRM ,V_USUA_ID,'');
                  V_PRUEBA     := 13369;
                  V_MSG_GLOBAL := 'ERP-ERR AL GENERAR INFORMACION ADICIONAL - NINGUNO ( ACUW )';
                  RAISE exp_CAMPO_CALCULADO;
                END IF;
              
                V_PRUEBA := 13374;
              
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   V_CAMPO_CALCULADO,
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   V_VALOR2,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR);
              
                V_PRUEBA := 13383;
              
              ELSE
              
                V_PRUEBA := 13391;
              
                INSERT INTO COMUMGR.YTRVAMD
                  (YTRVAMD_DOCU_CODE,
                   YTRVAMD_DOCU_SEQ,
                   YTRVAMD_CAME_CODE,
                   YTRVAMD_NOM_CAMPO,
                   YTRVAMD_FECHA_ACTIVIDAD,
                   YTRVAMD_USUA_ID,
                   YTRVAMD_VALOR,
                   YTRVAMD_CAME_ID_CAMPO,
                   YTRVAMD_CODE,
                   YTRVAMD_PLCA_SEQ,
                   YTRVAMD_VALOR1,
                   YTRVAMD_ORDEN,
                   YTRVAMD_CONTROL,
                   YTRVAMD_REQUERIDO,
                   YTRVAMD_TIPO_CAMPO,
                   YTRVAMD_IND_VALOR)
                VALUES
                  (V_CODEDOC,
                   1,
                   C_CAMPOS_REC.CAME_CODE,
                   C_CAMPOS_REC.NOM_CAMPO,
                   SYSDATE,
                   ky_json.campo(jsonObj, 'usua_id'),
                   C_CAMPOS_REC.VALOR_DEFECTO,
                   C_CAMPOS_REC.ID_CAMPO,
                   C_CAMPOS_REC.CODE,
                   C_CAMPOS_REC.SEQ,
                   V_VALOR2,
                   C_CAMPOS_REC.ORDEN,
                   C_CAMPOS_REC.CONTROL,
                   C_CAMPOS_REC.REQUERIDO,
                   C_CAMPOS_REC.TIPO_CAMPO,
                   C_CAMPOS_REC.YTRCAME_IND_VALOR);
              
                V_PRUEBA := 13397;
              END IF;
            
            END IF;
          
          END LOOP;
          CLOSE C_CAMPOS;
        END IF;
        --######FIN DE REGISTRO DE CAMPOS DINAMICOS
        --######VERIFICAR LOS REQUISITOS DINAMICOS
      
        --##PRIMERO ELIMINAMOS LOS REQUISITOS
      
        V_PRUEBA := 4;
      
        --#####FIN REQUISITOS DINAMICOS
      
        IF V_CARRERA_ACTUAL <> V_CARRERA THEN
          --REGENERAR COLA DE APROBACIONES PARA DOCUMENTO.
        
          SELECT YTBDOCU_PLAN_PROC_CODE, YTBDOCU_PLAN_SEQ
            INTO v_PLAN_PROC_CODE, v_PLAN_SEQ
            FROM YTBDOCU
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-1';
        
          SELECT COUNT(*)
            INTO V_CONTENEDORA
            FROM YTRPRCO, YTACOLA, YTRCODE
           WHERE YTRPRCO_PLAN_PROC_CODE = v_PLAN_PROC_CODE
             AND YTRPRCO_PLAN_SEQ = v_PLAN_SEQ
             AND YTRPRCO_COLA_CODE = YTACOLA_CODE
             AND YTRPRCO_COLA_CODE = YTRCODE_COLA_CODE
             AND YTRCODE_IND_ESTADO = 'A'
             AND YTACOLA_IND_CONTENEDORA = 'S';
        
          IF (V_CONTENEDORA > 0) THEN
            --DESACTIVAMOS LA COLA ACTUAL;
            UPDATE YTRAPDO
               SET YTRAPDO_IND_ESTADO = 'E'
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                   V_CODEDOC || '-1';
          
            OPEN DT1(v_PLAN_PROC_CODE, v_PLAN_SEQ);
            LOOP
              FETCH DT1
                INTO DT1_ROW;
              EXIT WHEN DT1%NOTFOUND;
            
              --YTRPRCO_COLA_CODE ,YTRCODE_CODE
            
              --YTRPRCO_COLA_CODE ,YTRCODE_CODE
              IF (DT1_ROW.CONTENEDORA = 'N') THEN
                --ES UNA FIJA
              
                SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
                  INTO V_CODEAPROB
                  FROM YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                   AND YTRAPDO_DOCU_SEQ = 1;
              
                IF V_CODEAPROB IS NULL THEN
                  V_CODEAPROB := 1;
                END IF;
              
                IF (V_VUELTA_DINAMICA > 0) THEN
                
                  V_SUMA := V_VUELTA_DINAMICA - 1;
                
                ELSE
                
                  V_SUMA := 0;
                
                END IF;
              
                SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                  INTO V_PROVEIDO, V_PROVEIDO_DESC
                  FROM YTVPRVE
                 WHERE YTVPRVE_CODE = DT1_ROW.PRVE_CODE;
              
                IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                     v_usua_reg,
                     DT1_ROW.ORGN,
                     DT1_ROW.COAS,
                     DT1_ROW.DESCRIPCION,
                     DT1_ROW.SUBDENOMINACION,
                     DT1_ROW.NIVEL + V_SUMA,
                     'A',
                     DT1_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     sysdate,
                     'aprobaci?n automatica',
                     SYSDATE,
                     DT1_ROW.ESTA_CODE_PASARA,
                     DT1_ROW.ESTA_CODE_REGRESA,
                     DT1_ROW.YTRCODE_TIAP_CODE,
                     DT1_ROW.UNID_CODE,
                     DT1_ROW.TIEMPO,
                     DT1_ROW.IND_ADJUNTO);
                ELSE
                  INSERT INTO COMUMGR.YTRAPDO
                    (YTRAPDO_SEQ,
                     YTRAPDO_DOCU_CODE,
                     YTRAPDO_DOCU_SEQ,
                     YTRAPDO_CODE_CODE,
                     YTRAPDO_ID_USUA_APROB,
                     YTRAPDO_ORGN_CODE,
                     YTRAPDO_COAS_CODE,
                     YTRAPDO_DESCRIPCION,
                     YTRAPDO_SUBDENOMINACION,
                     YTRAPDO_NIVEL,
                     YTRAPDO_IND_ESTADO,
                     YTRAPDO_PRVE_CODE,
                     YTRAPDO_PRVE_DESC,
                     YTRAPDO_FECHA_APROBACION,
                     YTRAPDO_COMENTARIO,
                     YTRAPDO_FECHA_ACTIVIDAD,
                     YTRAPDO_ESTA_CODE_PASARA,
                     YTRAPDO_ESTA_CODE_REGRESA,
                     YTRAPDO_TIAP_CODE,
                     YTRAPDO_UNID_CODE,
                     YTRAPDO_TIEMPO,
                     YTRAPDO_IND_ADJUNTO)
                  VALUES
                    (V_CODEAPROB,
                     V_CODEDOC,
                     1,
                     DT1_ROW.YTRCODE_CODE || DT1_ROW.YTRPRCO_COLA_CODE,
                     NULL,
                     DT1_ROW.ORGN,
                     DT1_ROW.COAS,
                     DT1_ROW.DESCRIPCION,
                     DT1_ROW.SUBDENOMINACION,
                     DT1_ROW.NIVEL + V_SUMA,
                     'P',
                     DT1_ROW.PRVE_CODE,
                     V_PROVEIDO_DESC,
                     NULL,
                     'POR APROBAR',
                     SYSDATE,
                     DT1_ROW.ESTA_CODE_PASARA,
                     DT1_ROW.ESTA_CODE_REGRESA,
                     DT1_ROW.YTRCODE_TIAP_CODE,
                     DT1_ROW.UNID_CODE,
                     DT1_ROW.TIEMPO,
                     DT1_ROW.IND_ADJUNTO);
                END IF;
              
              ELSE
                --ES UNA COLA CONTENEDORA DINAMICA
              
                SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
                  INTO V_CODEAPROB
                  FROM YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
                   AND YTRAPDO_DOCU_SEQ = 1;
              
                IF V_CODEAPROB IS NULL THEN
                  V_CODEAPROB := 1;
                END IF;
              
                --COLA_DINAMICA(P_COLA_CODE_PADRE VARCHAR2,P_PARAMETRO VARCHAR2,P_NIVEL INT)
                --VAMOS A BUSCAR LA COLA DINAMICA QUE SE ASIGNARA DE ACUERDO A LA ESCUELA
              
                -- OPEN COLA_DINAMICA(DT1_ROW.PADRE,V_PARAMETRO,DT1_ROW.NIVEL);
                OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,
                                   TRIM(V_PARAMETRO),
                                   TRIM(V_FACULTAD),
                                   DT1_ROW.NIVEL);
                -- OPEN COLA_DINAMICA(DT1_ROW.YTRPRCO_COLA_CODE,'ICSI',DT1_ROW.NIVEL);
                LOOP
                  FETCH COLA_DINAMICA
                    INTO COLA_DINAMICA_ROW;
                  EXIT WHEN COLA_DINAMICA%NOTFOUND;
                
                  SELECT YTVPRVE_CODE, YTVPRVE_DESCRIPCION
                    INTO V_PROVEIDO, V_PROVEIDO_DESC
                    FROM YTVPRVE
                   WHERE YTVPRVE_CODE = COLA_DINAMICA_ROW.PRVE_CODE;
                
                  IF (DT1_ROW.NIVEL = 1 AND v_aprobado = '1') THEN
                    INSERT INTO COMUMGR.YTRAPDO
                      (YTRAPDO_SEQ,
                       YTRAPDO_DOCU_CODE,
                       YTRAPDO_DOCU_SEQ,
                       YTRAPDO_CODE_CODE,
                       YTRAPDO_ID_USUA_APROB,
                       YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE,
                       YTRAPDO_DESCRIPCION,
                       YTRAPDO_SUBDENOMINACION,
                       YTRAPDO_NIVEL,
                       YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE,
                       YTRAPDO_PRVE_DESC,
                       YTRAPDO_FECHA_APROBACION,
                       YTRAPDO_COMENTARIO,
                       YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,
                       YTRAPDO_ESTA_CODE_REGRESA,
                       YTRAPDO_TIAP_CODE,
                       YTRAPDO_UNID_CODE,
                       YTRAPDO_TIEMPO,
                       YTRAPDO_IND_ADJUNTO)
                    VALUES
                      (V_CODEAPROB,
                       V_CODEDOC,
                       1,
                       COLA_DINAMICA_ROW.YTRCODE_CODE ||
                       COLA_DINAMICA_ROW.YTACOLA_CODE,
                       v_usua_reg,
                       COLA_DINAMICA_ROW.ORGN,
                       COLA_DINAMICA_ROW.COAS,
                       COLA_DINAMICA_ROW.DESCRIPCION,
                       COLA_DINAMICA_ROW.SUBDENOMINACION,
                       COLA_DINAMICA_ROW.NIVEL,
                       'A',
                       COLA_DINAMICA_ROW.PRVE_CODE,
                       V_PROVEIDO_DESC,
                       sysdate,
                       'aprobaci?n automatica',
                       SYSDATE,
                       COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                       COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                       COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                       COLA_DINAMICA_ROW.UNID_CODE,
                       COLA_DINAMICA_ROW.TIEMPO,
                       COLA_DINAMICA_ROW.IND_ADJUNTO);
                  ELSE
                    INSERT INTO COMUMGR.YTRAPDO
                      (YTRAPDO_SEQ,
                       YTRAPDO_DOCU_CODE,
                       YTRAPDO_DOCU_SEQ,
                       YTRAPDO_CODE_CODE,
                       YTRAPDO_ID_USUA_APROB,
                       YTRAPDO_ORGN_CODE,
                       YTRAPDO_COAS_CODE,
                       YTRAPDO_DESCRIPCION,
                       YTRAPDO_SUBDENOMINACION,
                       YTRAPDO_NIVEL,
                       YTRAPDO_IND_ESTADO,
                       YTRAPDO_PRVE_CODE,
                       YTRAPDO_PRVE_DESC,
                       YTRAPDO_FECHA_APROBACION,
                       YTRAPDO_COMENTARIO,
                       YTRAPDO_FECHA_ACTIVIDAD,
                       YTRAPDO_ESTA_CODE_PASARA,
                       YTRAPDO_ESTA_CODE_REGRESA,
                       YTRAPDO_TIAP_CODE,
                       YTRAPDO_UNID_CODE,
                       YTRAPDO_TIEMPO,
                       YTRAPDO_IND_ADJUNTO)
                    VALUES
                      (V_CODEAPROB,
                       V_CODEDOC,
                       1,
                       COLA_DINAMICA_ROW.YTRCODE_CODE ||
                       COLA_DINAMICA_ROW.YTACOLA_CODE,
                       NULL,
                       COLA_DINAMICA_ROW.ORGN,
                       COLA_DINAMICA_ROW.COAS,
                       COLA_DINAMICA_ROW.DESCRIPCION,
                       COLA_DINAMICA_ROW.SUBDENOMINACION,
                       COLA_DINAMICA_ROW.NIVEL,
                       'P',
                       COLA_DINAMICA_ROW.PRVE_CODE,
                       V_PROVEIDO_DESC,
                       NULL,
                       'POR APROBAR',
                       SYSDATE,
                       COLA_DINAMICA_ROW.ESTA_CODE_PASARA,
                       COLA_DINAMICA_ROW.ESTA_CODE_REGRESA,
                       COLA_DINAMICA_ROW.YTRCODE_TIAP_CODE,
                       COLA_DINAMICA_ROW.UNID_CODE,
                       COLA_DINAMICA_ROW.TIEMPO,
                       COLA_DINAMICA_ROW.IND_ADJUNTO);
                  END IF;
                  V_CODEAPROB       := V_CODEAPROB + 1;
                  V_VUELTA_DINAMICA := V_VUELTA_DINAMICA + 1;
                
                END LOOP;
                CLOSE COLA_DINAMICA;
              
              END IF;
            
              /*VERIFICAR SI ES NECESARIO REGISTRAR EL DETALLE DE APROBADORES DE LO CONTRARIO SOLO NOS IMPORTA LA PERSONA QUE APROBO*/
            
            END LOOP;
            CLOSE DT1;
          
          END IF;
        
        END IF;
      
        IF (SQL%ROWCOUNT > 0) THEN
          v_msg := 'TRANSACCIÓN APLICADA';
        ELSE
          v_msg := 'ERP-ERR TRANSACCIÓN APLICADA Y GRABADA';
        END IF;
      ELSE
        v_msg := 'ERP-ERR NO SE PUEDE ACTUALIZAR UN DOCUMENTO EN EL ESTADO ACTUAL';
      END IF;
    
      --CAMBIAR DE EXPDIENTE
    ELSIF (P_ACCION = 'AEX') THEN
    
      UPDATE YTBDOCU
         SET YTBDOCU_EXPE_CODE = ky_json.campo(jsonObj, 'p_expe_code')
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
             ky_json.campo(jsonObj, 'p_documento') || '-1';
    
      v_msg := 'TRANSACCIÓN APLICADA';
    
      --MOVER DOCUMENTO A UN ESTADO DADO RESPONSABILIDAD DEL USUARIO RECEPCIONADOR DEL DOCUMENTO
    
    ELSIF (P_ACCION = 'MOV') THEN
      --SACAMOS EL CODIGO DEL DOCUMENTO
      --SELECT YTBDOCU_CODE,YTBDOCU_SEQ,NVL(YTBDOCU_ID_USUA_VALIDO,'0'),YTBDOCU_ESTA_CODE INTO V_DOC,V_SEQ,V_USUA_VALIDO,V_ESTADO
      --FROM YTBDOCU WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=ky_json.campo(jsonObj, 'code_doc');
      V_DOC   := ky_json.campo(jsonObj, 'code_doc');
      V_SEQ1  := '1';
      v_estap := ky_json.campo(jsonObj, 'p_estap');
    
      --V_MSG_GLOBAL:='ERP-ERR DOCUMENTO AL MENOS DEBE TENER UN NIVEL DE APROBACI?N' || V_DOC || ' - ' || v_estap;
      --RAISE exp_GLOBAL ;
    
      if (v_estap <> 'AT' AND v_estap <> 'CO') THEN
        --verificamos si todos los requistos ya fueron validados
      
        UPDATE YTBDOCU
           SET YTBDOCU_ESTA_CODE = v_estap
         WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_DOC || '-' || V_SEQ1;
      
        V_USUA_ID_MOV := ky_json.campo(jsonObj, 'usua_id');
      
        --REGISTRAMOS EL ESTADO DEL DOCUMENTO
        INSERT INTO COMUMGR.YTRESDO
          (YTRESDO_DOCU_CODE,
           YTRESDO_OCU_SEQ,
           YTRESDO_SEQ,
           YTRESDO_ESTADO,
           YTRESDO_FECHA_ACTIVIDAD,
           YTRESDO_USUA_ID,
           YTRESDO_COMENTARIO)
        VALUES
          (V_DOC,
           V_SEQ1,
           YTRESDO_SEQ_SEQ.nextval,
           v_estap,
           SYSDATE,
           V_USUA_ID_MOV,
           ky_json.campo(jsonObj, 'comentario') || V_DOC);
      
        --REGISTRAR SEGUIMIENTO DE DOCUMENTO
      
        SELECT YTVESTA_DESCRIPCION, YTVESTA_ESTILO
          INTO V_ESTA_DOC_PASARA, V_ESTILO
          FROM YTVESTA
         WHERE YTVESTA_CODE = v_estap;
      
        INSERT INTO COMUMGR.YTRCOME
          (YTRCOME_CODE,
           YTRCOME_DOCU_CODE,
           YTRCOME_DOCU_SEQ,
           YTRCOME_FECHA_ACTIVIDAD,
           YTRCOME_USUA_ID,
           YTRCOME_TICO_CODE,
           YTRCOME_MENSAJE,
           YTRCOME_NOTI_CORREO,
           YTRCOME_USUA_NOMBRE)
        VALUES
          (SEQ_YTRCOME_CODE.NEXTVAL,
           V_DOC,
           V_SEQ1,
           sysdate,
           ky_json.campo(jsonObj, 'usua_id'),
           'AUTO',
           'El documento fue <span style=' || V_ESTILO || '>' ||
           V_ESTA_DOC_PASARA || '</span>...  ' ||
           ky_json.campo(jsonObj, 'comentario'),
           0,
           baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(V_USUA_ID_MOV),
                                                         'X'));
      
        --REGISTRAR EN BANDEJA INTERNA DE CAMPUS
      
        --NOTIFICAR POR CORREO SI FUESE NECESARIO
      
        v_msg := 'TRANSACCIÓN APLICADA';
      ELSE
        V_MSG := 'ERP-ERR NO SE PUEDE MOVER A ESE ESTADO';
      END IF;
    
    ELSIF (P_ACCION = 'ANUL') THEN
      --SACAMOS EL CODIGO DEL DOCUMENTO
      --SELECT YTBDOCU_CODE,YTBDOCU_SEQ,NVL(YTBDOCU_ID_USUA_VALIDO,'0'),YTBDOCU_ESTA_CODE INTO V_DOC,V_SEQ,V_USUA_VALIDO,V_ESTADO
      --FROM YTBDOCU WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=ky_json.campo(jsonObj, 'code_doc');
      V_DOC   := ky_json.campo(jsonObj, 'code_doc');
      V_SEQ1  := '1';
      v_estap := ky_json.campo(jsonObj, 'p_estap');
    
      if (v_estap = 'AN') THEN
        --verificamos si todos los requistos ya fueron validados
        V_USUA_ID_MOV := ky_json.campo(jsonObj, 'usua_id');
      
        SELECT COUNT(*)
          INTO V_EXISTE_CONCEPTO
          FROM YTRREDO
         WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_DOC || '-' || V_SEQ1
           AND YTRREDO_TIRE_CODE = 'REC'
           AND YTRREDO_IND_ENV_USUA = 'S';
      
        IF (V_EXISTE_CONCEPTO = 0) THEN
        
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE = v_estap
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ =
                 V_DOC || '-' || V_SEQ1
             AND YTBDOCU_USUA_ID = V_USUA_ID_MOV
             AND YTBDOCU_ESTA_CODE = 'NU';
        
          IF SQL%ROWCOUNT > 0 THEN
          
            --REGISTRAMOS EL ESTADO DEL DOCUMENTO
            INSERT INTO COMUMGR.YTRESDO
              (YTRESDO_DOCU_CODE,
               YTRESDO_OCU_SEQ,
               YTRESDO_SEQ,
               YTRESDO_ESTADO,
               YTRESDO_FECHA_ACTIVIDAD,
               YTRESDO_USUA_ID,
               YTRESDO_COMENTARIO)
            VALUES
              (V_DOC,
               V_SEQ1,
               YTRESDO_SEQ_SEQ.nextval,
               v_estap,
               SYSDATE,
               V_USUA_ID_MOV,
               ky_json.campo(jsonObj, 'comentario') || V_DOC);
          
            --REGISTRAR SEGUIMIENTO DE DOCUMENTO
            SELECT YTVESTA_DESCRIPCION, YTVESTA_ESTILO
              INTO V_ESTA_DOC_PASARA, V_ESTILO
              FROM YTVESTA
             WHERE YTVESTA_CODE = v_estap;
          
            --//ANULAR PAGOS DE BANCO              YATA PAGOS
            OPEN C_PAGOS(V_DOC || '-' || V_SEQ1);
            LOOP
              FETCH C_PAGOS
                INTO C_PAGOS_REC;
              EXIT WHEN C_PAGOS%NOTFOUND;
              BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_UPD_DISABLE@PROD.INT.UPAO.EDU.PE(C_PAGOS_REC.YTRREDO_PADH_CODE,
                                                                                          V_USUA_ID_MOV,
                                                                                          v_msg);
            END LOOP;
            CLOSE C_PAGOS;
          
            --//FIN ANULAR PAGOS EN BANCO
            comumgr.kyt_tramite_comunicacion.FYT_REG_COMENTARIO_DOC(V_DOC,
                                                                    V_USUA_ID_MOV,
                                                                    'USUA',
                                                                    'El documento fue <span style=' ||
                                                                    V_ESTILO || '>' ||
                                                                    V_ESTA_DOC_PASARA ||
                                                                    '</span>...  ' ||
                                                                    ky_json.campo(jsonObj,
                                                                                  'comentario'),
                                                                    0,
                                                                    v_msg);
          
            --REGISTRAR EN BANDEJA INTERNA DE CAMPUS
          
            --NOTIFICAR POR CORREO SI FUESE NECESARIO
          
            v_msg := 'OK';
          ELSE
            V_MSG := 'ERP-ERR NO ESTAS AUTORIZADO A ANULAR ESTE DODUMENTO';
          END IF;
        ELSE
          V_MSG := 'ERP-ERR PARA PODER ANULAR EL DOCUMENTO PRIMERO DEBES QUITAR LOS PAGOS ASIGNADOS';
        END IF;
      ELSE
        V_MSG := 'ERP-ERR NO SE PUEDE MOVER A ESE ESTADO';
      END IF;
    
    ELSIF (P_ACCION = 'ELI') THEN
      DELETE YTRAPRO
       WHERE YTRAPRO_CODE_COLA_CODE || '-' || YTRAPRO_CODE_CODE || '-' ||
             YTRAPRO_ID_USUA = trim(ky_json.campo(jsonObj, 'ytrapro_pk'));
      v_msg := 'TRANSACCIÓN APLICADA';
    
    END IF;
  
    COMMIT;
  
  exception
  
    WHEN EXP_NUP THEN
      rollback;
      v_msg := 'ERP-ERR NO HAY UNIDAD PRINCIPAL ASIGNADA AL PROCESO... ADMINISTRADOR YA FUE NOTIFICADO' ||
               V_ORGN_DINA || ' Documento:' || V_CODEDOC;
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EW',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    WHEN EXP_PER_PAGO THEN
      rollback;
      v_msg := 'ERP-ERR NO HAY PERIODO CONFIGURADO PARA TRANSACCI?N ECONOMICA' ||
               ' Documento:' || V_CODEDOC || ':::: CODIGO ERROR (' ||
               P_ACCION || ') ::: ';
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EW',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg || P_DATA,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    WHEN EXP_SORGA THEN
      rollback;
      v_msg := 'ERP-ERR ESTE TIPO DE DOCUMENTO NECESITA ORGANIZACI?N ADMINISTRATIVA' ||
               ' Documento:' || V_CODEDOC || ':::: CODIGO ERROR (' ||
               P_ACCION || ') ::: ';
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EC',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg || P_DATA,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    WHEN EXP_CP_SF THEN
      rollback;
      v_msg := 'ERP-ERR TIPO DE ASUNTO NO TIENE CONCEPTO D EPAGO CONFIGURADO' ||
               ' Documento:' || V_CODEDOC || ':::: CODIGO ERROR (' ||
               P_ACCION || ') ::: ';
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EC',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg || P_DATA,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    WHEN EXP_CP THEN
      rollback;
      v_msg := 'ERP-ERR DOCUMENTO NO TIENE CONCEPTOS DE PAGO CONFIGURADO SE ENVIO NOTIFICACI?N A ADMINISTRADOR DEL SISTEMA' ||
               ' Documento:' || V_CODEDOC;
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EC',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg || ' PROCESO: ' ||
                                                   ky_json.campo(jsonObj,
                                                                 'plan_proc_code') || '-' ||
                                                   ky_json.campo(jsonObj,
                                                                 'plan_seq'),
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    --ky_json.campo(jsonObj, 'plan_proc_code'), ky_json.campo(jsonObj, 'plan_seq')
  
    WHEN EXP_PAGO_BANCO THEN
      v_msg := 'ERP-ERR NO SE ASIGNO PAGO A BANCO' || V_MSG_BANCO ||
               ' Documento:' || V_CODEDOC;
      rollback;
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EW',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    WHEN exp_CAMPO_CALCULADO THEN
      v_msg := V_MSG_GLOBAL || ' Documento:' || V_CODEDOC ||
               ':::: CODIGO ERROR (' || P_ACCION || ') ::: ';
      rollback;
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EW',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    WHEN exp_GLOBAL THEN
      v_msg := V_MSG_GLOBAL || ' Documento:' || V_CODEDOC;
      rollback;
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EW',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    WHEN EXP_POLITICAS THEN
      v_msg := V_MSG_GLOBAL;
      rollback;
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                   'EW',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    when OTHERS then
      rollback;
      v_msg := 'ERP-ERR[ERROR AL CREAR EL DOCUMENTO]' || ' Documento:' ||
               V_CODEDOC || ':::: CODIGO ERROR (' || P_ACCION || ') ::: ' ||
               V_PRUEBA||V_PRUEBA_TEXT;
    
      comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00004',
                                                   'EE',
                                                   'TD',
                                                   'DO',
                                                   'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTBDOCU_AUD',
                                                   v_msg || SQLERRM ||
                                                   P_DATA,
                                                   ky_json.campo(jsonObj,
                                                                 'usua_id'),
                                                   '');
    
    --raise_application_error(-20001,'Error al crear el registro' || SQLERRM);
  
  END;




------ termino de procedimiento


/*FIN METODOS DE TABLA YTBDOCU*/






/*METODOS DE TABLA YTVINST*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

FUNCTION FKYT_DOCU_DOCU_PP_COSTO_RECIBO(P_DIM IN INT,P_RECIBO IN VARCHAR2) return DECIMAL
IS

V_TEXTO DECIMAL;



BEGIN
SELECT  FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) INTO V_TEXTO
                            FROM TBRACCD@PROD.INT.UPAO.EDU.PE--,TBBDETC@PROD.INT.UPAO.EDU.PE
                           WHERE TBRACCD_PIDM=P_DIM
                            AND TBRACCD_RECEIPT_NUMBER=P_RECIBO
                            --AND TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
                            AND TBRACCD_AMOUNT > 0
                            AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'     ;
                            --AND TBBDETC_TYPE_IND='C'

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN 0;

   when OTHERS then
         RETURN 0;
end;

PROCEDURE KYT_DOCU_DOCU_PP_YTVINST_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
     is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_plan_code varchar2(10);
    begin

    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                    YTVINST_CODE PK_ACCION,YTVINST_CODE CODE, YTVINST_DESCRIPCION DESCRIPCION, YTVINST_FECHA_ACTIVIDAD FECHA,
                    YTVINST_USUA_ID USUA_ID, YTVINST_IND_ESTADO IND_ESTADO,YTVINST_CORREO_CONTACTO CORREO,YTVINST_REPRESENTANTE REPRESENTANTE,YTVINST_TIPO TIPO
                FROM COMUMGR.YTVINST WHERE YTVINST_CODE=P_DATA;

    ELSIF(P_ACCION='FIT')    THEN
    OPEN CURSOR_OUT  FOR
    SELECT YTVINST_CODE CODE, YTVINST_DESCRIPCION TITULO
        FROM COMUMGR.YTVINST
        WHERE YTVINST_IND_ESTADO='A'
        AND upper(YTVINST_DESCRIPCION) LIKE '%'|| upper(ky_json.campo(jsonObj, 'p_filtro')) ||'%'

        ORDER BY 2;

     ELSIF(P_ACCION='LIT')    THEN
        OPEN CURSOR_OUT  FOR
        SELECT YTVINST_CODE PK_ACCION,YTVINST_CODE CODE, YTVINST_DESCRIPCION DESCRIPCION, YTVINST_FECHA_ACTIVIDAD FECHA,
                    YTVINST_USUA_ID USUA_ID, YTVINST_IND_ESTADO IND_ESTADO,YTVINST_CORREO_CONTACTO CORREO,YTVINST_REPRESENTANTE REPRESENTANTE,YTVINST_TIPO TIPO
                FROM COMUMGR.YTVINST
        ORDER BY 3;

    ELSIF(P_ACCION='LIS') THEN   --LIS

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
    v_plan_code :=ky_json.campo(jsonObj, 'plan_code');



    IF(v_desc ='%') THEN

    SELECT COUNT(*) INTO  V_NUM_REG FROM YTVINST ;
        OPEN CURSOR_OUT  FOR
         SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTVINST_CODE PK_ACCION,YTVINST_CODE CODE, YTVINST_DESCRIPCION DESCRIPCION, YTVINST_FECHA_ACTIVIDAD FECHA,
                    YTVINST_USUA_ID USUA_ID, YTVINST_IND_ESTADO IND_ESTADO,YTVINST_CORREO_CONTACTO CORREO,YTVINST_REPRESENTANTE REPRESENTANTE,YTVINST_TIPO TIPO
                FROM COMUMGR.YTVINST  ORDER BY YTVINST_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
  ELSE

 -- SELECT COUNT(*) INTO  V_NUM_REG FROM YTVINST WHERE (YTVINST_DESCRIPCION LIKE  '%'||UPPER(v_desc)||'%'  OR YTVINST_CODE like '%'||UPPER(v_desc)||'%');

 SELECT COUNT(*) INTO  V_NUM_REG FROM YTVINST WHERE YTVINST_DESCRIPCION LIKE  '%'||UPPER(v_desc)||'%';
        OPEN CURSOR_OUT  FOR
         SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTVINST_CODE PK_ACCION,YTVINST_CODE CODE, YTVINST_DESCRIPCION DESCRIPCION, YTVINST_FECHA_ACTIVIDAD FECHA,
                    YTVINST_USUA_ID USUA_ID, YTVINST_IND_ESTADO IND_ESTADO,YTVINST_CORREO_CONTACTO CORREO,YTVINST_REPRESENTANTE REPRESENTANTE,YTVINST_TIPO TIPO
                FROM COMUMGR.YTVINST
                --WHERE (YTVINST_DESCRIPCION LIKE  '%'||UPPER(v_desc)||'%' OR YTVINST_CODE like'%'||UPPER(v_desc)||'%')) XX
                WHERE YTVINST_DESCRIPCION LIKE  '%'||UPPER(v_desc)||'%' ORDER BY YTVINST_DESCRIPCION)XX
           ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;


  END IF;



    ELSIF P_ACCION = 'LIEX' THEN --LISTAR EXTERNOS
        OPEN CURSOR_OUT FOR
        SELECT YTVINST_CODE PK_ACCION,YTVINST_CODE CODE, TRIM(YTVINST_DESCRIPCION) DESCRIPCION, YTVINST_FECHA_ACTIVIDAD FECHA,
            YTVINST_USUA_ID USUA_ID, YTVINST_IND_ESTADO IND_ESTADO,YTVINST_CORREO_CONTACTO CORREO,YTVINST_REPRESENTANTE REPRESENTANTE,YTVINST_TIPO TIPO
        FROM COMUMGR.YTVINST
        WHERE YTVINST_TIPO = 'JUR' AND YTVINST_IND_ESTADO = 'A'
        ORDER BY DESCRIPCION ASC;

    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;

/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTVINST_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    V_CODE_INST VARCHAR2(12);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');


   IF(P_ACCION='ADI') THEN

        SELECT NVL( 'E'||LPAD(TO_NUMBER(MAX(SUBSTR(YTVINST_CODE,2,10))+1),8,'0'),'E'||LPAD(1,8,'0')) INTO V_CODE_INST
        FROM YTVINST;

        INSERT INTO COMUMGR.YTVINST (
   YTVINST_CODE, YTVINST_DESCRIPCION, YTVINST_FECHA_ACTIVIDAD,
   YTVINST_USUA_ID, YTVINST_IND_ESTADO,YTVINST_CORREO_CONTACTO,YTVINST_REPRESENTANTE,YTVINST_TIPO)
        VALUES (V_CODE_INST,upper(ky_json.campo(jsonObj, 'descripcion')),sysdate, ky_json.campo(jsonObj, 'usua_id'),
                 ky_json.campo(jsonObj, 'ind_estado'),ky_json.campo(jsonObj, 'correo'),ky_json.campo(jsonObj, 'representante'),ky_json.campo(jsonObj, 'p_tipo'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

        UPDATE COMUMGR.YTVINST
        SET     YTVINST_DESCRIPCION      = upper(ky_json.campo(jsonObj, 'descripcion')),
                YTVINST_FECHA_ACTIVIDAD  = sysdate,
                YTVINST_IND_ESTADO       = ky_json.campo(jsonObj, 'ind_estado'),
                YTVINST_USUA_ID          = ky_json.campo(jsonObj, 'usua_id'),
                YTVINST_CORREO_CONTACTO          = ky_json.campo(jsonObj, 'correo'),
                YTVINST_REPRESENTANTE          = ky_json.campo(jsonObj, 'representante'),
                YTVINST_TIPO             =ky_json.campo(jsonObj, 'p_tipo')
        WHERE   YTVINST_CODE             = trim(ky_json.campo(jsonObj, 'ytvinst_pk'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';


   ELSIF(P_ACCION='ELI') THEN
     DELETE YTVINST WHERE YTVINST_CODE=trim(ky_json.campo(jsonObj, 'ytvinst_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTVINST*/




/*METODOS DE TABLA YTRAPDO*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/








PROCEDURE KYT_DOCU_DOCU_PP_YTRAPDO_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
     is

    code varchar2(20);
    V_CODEDOC VARCHAR2(20);
    P_SOLICITANTE VARCHAR2(100);
    P_DOC VARCHAR2(30);
    V_DOCU VARCHAR2(20);
    begin
    jsonObj := json(P_DATA);
    V_DOCU:=ky_json.campo(jsonObj, 'pk');
    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT

                    YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ||'-'||YTRAPDO_SEQ PK_ACCION,YTRAPDO_SEQ SEQ, YTRAPDO_DOCU_CODE DOCU_CODE, YTRAPDO_DOCU_SEQ DOCU_SEQ,
                    YTRAPDO_CODE_CODE CODE_CODE, YTRAPDO_ID_USUA_APROB ID_USUA_APROB, YTRAPDO_ORGN_CODE ORG_CODE,
                    YTRAPDO_COAS_CODE COAS_CODE, YTRAPDO_DESCRIPCION DESCRIPCION, YTRAPDO_SUBDENOMINACION SUBDENOMINACION,   YTRAPDO_NIVEL NIVEL, YTRAPDO_IND_ESTADO IND_ESTADO,
                    YTRAPDO_PRVE_CODE PRVE_CODE, YTRAPDO_PRVE_DESC PRVE_DESC, YTRAPDO_FECHA_APROBACION FECHA_APROBACION, YTRAPDO_COMENTARIO COMENTARIO,    YTRAPDO_FECHA_ACTIVIDAD FECHA,
                    YTRAPDO_ESTA_CODE_PASARA ESTA_CODE_PASARA,YTRAPDO_ESTA_CODE_REGRESA ESTA_CODE_REGRESA,YTRAPDO_TIAP_CODE TIAP_CODE,YTRAPDO_UNID_CODE UNID_CODE
                FROM COMUMGR.YTRAPDO
                WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ||'-'||YTRAPDO_SEQ=V_DOCU
                AND NOT YTRAPDO_IND_ESTADO IN('E');

    ELSIF(P_ACCION='FIT')    THEN
    OPEN CURSOR_OUT  FOR
    SELECT YTVINST_CODE CODE, YTVINST_DESCRIPCION TITULO
        FROM COMUMGR.YTVINST
        WHERE YTVINST_IND_ESTADO='A'
        AND upper(YTVINST_DESCRIPCION) LIKE '%'|| upper(ky_json.campo(jsonObj, 'p_filtro')) ||'%'

        ORDER BY 2;

  ELSIF(P_ACCION='FAP')    THEN

  V_CODEDOC:=ky_json.campo(jsonObj, 'p_code_doc');

    OPEN CURSOR_OUT  FOR
     SELECT YTRAPDO_SEQ CODE,YTRAPDO_DOCU_CODE DOCU_CODE,YTRAPDO_DOCU_SEQ DOCU_SEQ,YTRAPDO_DESCRIPCION ||':: '|| YTRAPDO_PRVE_DESC AS DESCRIPCION,YTRAPDO_NIVEL NIVEL,
        YTRAPRO_ID_USUA USUA_ID,YTRAPRO_NOMBRES NOMBRES,YTRAPRO_NIVEL NIVEL_1,(SELECT YTBDOCU_USUA_ID FROM YTBDOCU WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=V_CODEDOC) SOLICTANTE_DOC
    FROM YTRAPDO ,YTRAPRO
    WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_NIVEL=(SELECT MIN(YTRAPDO_NIVEL) FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_IND_ESTADO<>'A')
    AND YTRAPDO_CODE_CODE=YTRAPRO_CODE_CODE||YTRAPRO_CODE_COLA_CODE AND YTRAPRO_IND_ESTADO='A'
    ORDER BY NIVEL_1;

   ELSIF(P_ACCION='FCU')    THEN

  --V_CODEDOC:=ky_json.campo(jsonObj, 'p_unid');
P_SOLICITANTE:=ky_json.campo(jsonObj, 'p_solicitante');
    OPEN CURSOR_OUT  FOR
     SELECT YTRUNID_RUTA nombres,YTRUNID_CORREO correo, (SELECT YTRUNID_RUTA nombres
     FROM COMUMGR.YTRUNID  xxx
     WHERE xxx.YTRUNID_CODE=P_SOLICITANTE) SOLICTANTE_DOC ,
        (SELECT YTRUNID_CORREO
     FROM COMUMGR.YTRUNID YYY
     WHERE YYY.YTRUNID_CODE=P_SOLICITANTE) SOLICTANTE_CORR
     FROM COMUMGR.YTRUNID
     WHERE YTRUNID_CODE=ky_json.campo(jsonObj, 'p_unid');




     ELSIF(P_ACCION='FCD')    THEN

  --V_CODEDOC:=ky_json.campo(jsonObj, 'p_unid');
    P_SOLICITANTE:=ky_json.campo(jsonObj, 'p_solicitante');
    P_DOC:=ky_json.campo(jsonObj, 'p_doc');
    OPEN CURSOR_OUT  FOR
     SELECT YTRUNID_CODE unidad,YTRUNID_RUTA nombres,YTRUNID_CORREO correo, (SELECT YTRUNID_RUTA nombres
     FROM COMUMGR.YTRUNID  xxx
     WHERE xxx.YTRUNID_CODE=P_SOLICITANTE) SOLICTANTE_DOC ,
        (SELECT YTRUNID_CORREO
     FROM COMUMGR.YTRUNID YYY
     WHERE YYY.YTRUNID_CODE=P_SOLICITANTE) SOLICTANTE_CORR
     FROM COMUMGR.YTRUNID
     WHERE YTRUNID_CODE= (SELECT YTBDOCU_USUA_ID
                            FROM  COMUMGR.YTBDOCU
                            WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_DOC) ;





    ELSE   --LIS
        OPEN CURSOR_OUT  FOR
         SELECT YTVINST_CODE PK_ACCION,YTVINST_CODE CODE, YTVINST_DESCRIPCION DESCRIPCION, YTVINST_FECHA_ACTIVIDAD FECHA,
                    YTVINST_USUA_ID USUA_ID, YTVINST_IND_ESTADO IND_ESTADO
                FROM COMUMGR.YTVINST;



    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ');
END ;








/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/


PROCEDURE KYT_DOCU_DOCU_PP_YTRAPDO_AUD(P_ACCION IN VARCHAR2,
                                       P_DATA   in varchar2,
                                       V_MSG    OUT varchar2) IS

  V_EXISTE INTEGER;
  v_seq    int;
  --jsonArray        json_list;

  v_code         varchar2(20);
  v_tipo         varchar2(5);
  v_conceptopago varchar2(20);
  V_CODEAPROB    VARCHAR2(20);
  V_CODEDOC      VARCHAR2(20);
  --V_CODEDOC
  v_pk            varchar2(20);
  V_ESTADO        VARCHAR2(10);
  V_cola          VARCHAR2(10);
  V_POR_APROBAR   int;
  V_DOC           VARCHAR2(20);
  V_USUA_VALIDO   VARCHAR2(20);
  V_PASA          VARCHAR2(20);
  V_REGRESA       VARCHAR2(20);
  V_PLAN_CODE     varchar2(10);
  V_NUMERO        int;
  V_COMPLETO      int;
  V_FALTA_APROBAR int;
  V_TIPO_DOC      VARCHAR2(5);

  V_NIVEL_APROB      INT;
  v_dependencia      varchar2(20);
  v_coas             varchar2(9);
  V_CODEORG          varchar2(20);
  v_DEPENDENCIA_desc varchar2(200);

  v_cestado     varchar2(10);
  v_aprob_desap varchar2(8);
  V_TIPOAPROB   VARCHAR2(10);
  V_SEQAPROB    INT;

  V_SEQAPROB_I INT;
  V_MENSAJERIA VARCHAR2(500);

  V_CAMPO1 varchar2(400);
  V_CAMPO2 varchar2(400);
  V_CAMPO3 varchar2(400);
  V_CAMPO4 varchar2(400);

  V_ASUNTO        VARCHAR2(500);
  V_NOMBRE        VARCHAR2(300);
  V_CARRERA       VARCHAR2(90);
  V_USUA_ID       VARCHAR2(20);
  V_USUA_NOTIFICA VARCHAR2(20);

  V_ULTIMO_NAP INT;

  V_FALTA_APROB INT;
  V_CODE_CODE   VARCHAR2(10);

  V_ORG_CODE    VARCHAR2(20);
  V_COAS_CODE   VARCHAR2(20);
  V_DESCRIPCION VARCHAR2(200);

  V_UNIDAD           VARCHAR2(200);
  V_PERTENECE_UNIDAD VARCHAR2(10);

  V_ACCION2 VARCHAR2(10);

  V_ESTAPASA VARCHAR2(20);
  V_ESTILO   VARCHAR2(200);

  V_SEQENTREGA INT;
  V_FENTREGA   VARCHAR2(3);

  V_SIG_NIVEL   INT;
  V_AUTOMATICO  VARCHAR2(10);
  V_MSG_ENTREGA VARCHAR2(200);

  V_TIENE_HIJOS INT;

  V_MSG_MES   VARCHAR2(100);
  V_CODEDOC_1 varchar2(20);
  V_COPIA     VARCHAR2(10);

  V_APROB_DESC   VARCHAR2(300);
  V_APROB_ACCION VARCHAR2(300);

  V_QUEHACER      VARCHAR2(200);
  V_OTRO          VARCHAR2(200);
  V_EX_ESTADO_EV  INT;
  V_USUA_APROB    VARCHAR2(20);
  V_IND_CAUNA     INT; --NOS INDICA SI SE COMPLETA DOCUMENTO AL APROBAR ULTIMO NIVEL DE APROBACIÓN
  V_DIAS_VIGENCIA INT;
  V_ADJUNTO       VARCHAR2(20);
  V_TIENE_DJUNTO  INT;

  V_PROCE_CODE_SEQ VARCHAR2(4000 CHAR);

  cad_json VARCHAR2(100);

  EX_FALTA_APROB    EXCEPTION;
  EX_NOPERTENECE    EXCEPTION;
  EX_NO_APR_NIV     EXCEPTION;
  EXP_FALTA_APROBAR EXCEPTION;
  EXP_GLOBAL        EXCEPTION;
  EXP_CP            EXCEPTION;
  EXP_PER_PAGO      EXCEPTION;
  EXP_PAGO_BANCO    EXCEPTION;

  MSG_EXP_GLOBAL VARCHAR2(300);
  --//////////////////CASO DE RECEPCIÓN DE DOCUMENTOS POR CARPETA///////////////////////////
  V_CARPETA       VARCHAR2(20);
  V_SEQ_HEREDADO  INT;
  V_CANTIDAD_PA   INT;
  V_CANTIDAD_AP   INT;
  V_OFICIO        VARCHAR2(30);
  V_POR_APROBAR_1 INT;
  V_MSG_1         VARCHAR2(300);
  --//////////COMPLETAR AUTOMATICO
  V_MASAPROB         INT; --INDICA SI HAY MAS NIVELES DE APROBACIÓN
  V_ACTUALIZO        INT;
  V_TIENE_TESTADO_CO INT;

  V_CAMPOS_ADICIONALES INT;

  V_YTRREDO_CODE VARCHAR2(4000 CHAR);

  --aprobacion de documento web
  V_COMENTARIO VARCHAR2(500);
  V_CAMP_CODE  VARCHAR2(4000 CHAR);

  V_LISTVALUE_1 json_list; --PARA LA DATA QUE VIENE A REGISTRAR
  v_element     json_value;
  v_obj         json;

  V_CICLO_1          VARCHAR2(20);
  V_CREDITO_1        VARCHAR2(400);
  V_SEMESTRE_1       VARCHAR2(400);
  V_CURSO_1          VARCHAR2(400);
  V_CURSO_NOMBRE_1   VARCHAR2(4000);
  V_CARRERA_1        VARCHAR2(4000);
  V_NIVEL_1          VARCHAR2(4000);
  V_CAMPUS_1         VARCHAR2(4000);
  V_ESTADO_1         VARCHAR2(20 CHAR);
  V_CARRERA_TRASLADO VARCHAR2(4000);

  V_CODE_DOC_UN VARCHAR2(4000 CHAR);

  V_YTRTEMP_JSON_DATA_TEMP_CLOB CLOB;

  V_ESTADO_APRO VARCHAR2(20 CHAR);
  V_CONT_1      NUMBER;

  V_CONTENEDORA            VARCHAR2(1 CHAR);
  V_COLA_CODE_PADRE        NUMBER;
  V_COLA_CODE_HIJO         NUMBER;
  V_YTRPRCO_REQUISITO_CODE VARCHAR2(4000 CHAR);

  V_DETAIL_CODE    VARCHAR2(20 CHAR);
  V_PAGO_DESC      VARCHAR2(200 CHAR);
  V_PAGO_MONTO     VARCHAR2(20 CHAR);
  V_PAGO_LEVL_CODE VARCHAR2(10 CHAR);
  V_PERIODO_PAGO   VARCHAR2(400 CHAR);
  V_LEVL_CODE      VARCHAR2(400 CHAR);

  V_VPARAMETRO            VARCHAR2(400 CHAR);
  V_MSG_BANCO             VARCHAR2(400 CHAR);
  V_PAGO_BANCO            INT;
  V_YTRPLAN_TIPO_ANTICIPO NUMBER;
  V_CODEREQ_1             VARCHAR2(4000 CHAR);
  V_NUM_COPIAS            NUMBER;
  V_YTRREDO_CONCEPTO_PAGO VARCHAR2(400 CHAR);
  V_PIDM                  NUMBER;
  V_MONTO_REQ             NUMBER(7, 2);
  V_CONT_2                NUMBER;

  V_YTRAPDO_COLA_CODE_PADRE VARCHAR2(400 CHAR);
  V_YTRAPDO_COLA_CODE_HIJO  VARCHAR2(400 CHAR);
  V_YTRAPDO_CONTENEDORA     VARCHAR2(400 CHAR);
  V_YTRAPDO_NIVEL_COLA      NUMBER;
  V_YTRVAMD_CAME_CODE       VARCHAR2(400 CHAR);
  V_YTBDOCU_PLAN_PROC_CODE  VARCHAR2(400 CHAR);
  V_YTBDOCU_PLAN_SEQ        NUMBER;

  CURSOR C_APROBACION(P_CODE VARCHAR2) IS
    SELECT YTRAPDO_SEQ,
           YTRAPDO_DOCU_CODE,
           YTRAPDO_DOCU_SEQ,
           YTRAPDO_CODE_CODE,
           YTRAPDO_ID_USUA_APROB,
           YTRAPDO_ORGN_CODE,
           YTRAPDO_COAS_CODE,
           YTRAPDO_DESCRIPCION,
           YTRAPDO_SUBDENOMINACION,
           YTRAPDO_NIVEL,
           YTRAPDO_IND_ESTADO,
           YTRAPDO_PRVE_CODE,
           YTRAPDO_PRVE_DESC,
           YTRAPDO_FECHA_APROBACION,
           YTRAPDO_COMENTARIO,
           YTRAPDO_FECHA_ACTIVIDAD,
           YTRAPDO_ESTA_CODE_PASARA,
           YTRAPDO_ESTA_CODE_REGRESA,
           YTRAPDO_TIAP_CODE,
           YTRAPDO_USUA_RECEPCIONO,
           YTRAPDO_FECHA_RECEPCIONO,
           YTRAPDO_UNID_CODE,
           YTRAPDO_TIEMPO,
           YTRAPDO_IND_ADJUNTO,
           YTRAPDO_METODO,
           YTRAPDO_IND_SALIDA
      FROM YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = P_CODE
       AND YTRAPDO_IND_ESTADO <> 'E';

  C_APROBACION_REC C_APROBACION%ROWTYPE;

  --//////////////////CURSOR PARA OBTENER DOCUMENTOS DE LA CARPETA///////////////////////////
  CURSOR C_DOC_CARP(P_CARPETA VARCHAR2) IS
    SELECT YTRDOCA_DOCU_CODE, YTRDOCA_DOCU_SEQ
      FROM COMUMGR.YTRDOCA
     WHERE YTRDOCA_CAEX_CODE = P_CARPETA;

  C_DOC_CARP_ROW C_DOC_CARP%ROWTYPE;

  --CURSOR DE CONCEPTOS DE PAGO
  CURSOR C_CP(V_REQ VARCHAR2, V_CAMP VARCHAR2) IS
    SELECT DETAIL_CODE, DESCRIPCION, MONTO, NIVEL
      FROM (SELECT YTVCOPR_DETAIL_CODE DETAIL_CODE,
                   TBBDETC_DESC        DESCRIPCION,
                   TBBDETC_AMOUNT      MONTO,
                   TBBDETC_LEVL_CODE   NIVEL
              FROM COMUMGR.YTVCOPR, TBBDETC@PROD.INT.UPAO.EDU.PE
             WHERE YTVCOPR_REQU_CODE = V_REQ
               AND YTVCOPR_DETAIL_CODE = TBBDETC_DETAIL_CODE
               AND TBBDETC_CAMP_CODE = V_CAMP
             ORDER BY TBBDETC_CAMP_CODE, YTVCOPR_ORDEN)
     WHERE ROWNUM = 1;

  V_MSG_PROC     VARCHAR2(1000);
  V_METODO       VARCHAR2(300);
  V_IND_OBSERVAR VARCHAR2(10);
  EX_NO_BC EXCEPTION; --- MCL 18/03/2025

BEGIN
  --SET SERVEROUTPUT ON;
  V_USUA_NOTIFICA := '000026316';
  V_ACTUALIZO     := 0;

  jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');
  V_USUA_APROB := ky_json.campo(jsonObj, 'usua_id');

  V_CODEDOC   := ky_json.campo(jsonObj, 'p_code_doc');
  V_CODEDOC_1 := ky_json.campo(jsonObj, 'p_codedoc1');

  V_cola             := ky_json.campo(jsonObj, 'cola');
  v_DEPENDENCIA      := ky_json.campo(jsonObj, 'p_dependencia_code');
  v_DEPENDENCIA_desc := ky_json.campo(jsonObj, 'p_dependencia_desc');

  V_AUTOMATICO  := 'N';
  V_MSG_ENTREGA := 'OK';

  --V_MSG_PROCESO

  V_MASAPROB           := 0;
  V_CAMPOS_ADICIONALES := 0;

  IF (P_ACCION = 'ADI') THEN
  
    V_ESTADO := kyt_tramite.FKYT_DAME_ESTADO_DOCUMENTO(V_CODEDOC || '-' || '1');
  
    --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
    SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
           SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
      INTO V_COAS, V_CODEORG
      FROM YTRUNID TA, YTRUNID TB
     WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
       AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
  
    --OBTENEMOS EL ULTIMO NIVEL DE APROBACION
  
    IF NOT (V_ESTADO = 'AT' OR V_ESTADO = 'CO') THEN
      SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1, MAX(YTRAPDO_CODE_CODE) + 1
        INTO V_CODEAPROB, V_CODE_CODE
        FROM YTRAPDO
       WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
         AND YTRAPDO_DOCU_SEQ = 1;
    
      INSERT INTO COMUMGR.YTRAPDO
        (YTRAPDO_SEQ,
         YTRAPDO_DOCU_CODE,
         YTRAPDO_DOCU_SEQ,
         YTRAPDO_CODE_CODE,
         YTRAPDO_ID_USUA_APROB,
         YTRAPDO_ORGN_CODE,
         YTRAPDO_COAS_CODE,
         YTRAPDO_DESCRIPCION,
         YTRAPDO_SUBDENOMINACION,
         YTRAPDO_NIVEL,
         YTRAPDO_IND_ESTADO,
         YTRAPDO_PRVE_CODE,
         YTRAPDO_PRVE_DESC,
         YTRAPDO_FECHA_APROBACION,
         YTRAPDO_COMENTARIO,
         YTRAPDO_FECHA_ACTIVIDAD,
         YTRAPDO_ESTA_CODE_PASARA,
         YTRAPDO_ESTA_CODE_REGRESA,
         YTRAPDO_TIAP_CODE,
         YTRAPDO_UNID_CODE,
         YTRAPDO_IND_ADJUNTO,
         YTRAPDO_IND_DERIVADO)
      VALUES
        (V_CODEAPROB,
         V_CODEDOC,
         1,
         V_CODE_CODE,
         NULL,
         V_CODEORG,
         v_coas,
         v_DEPENDENCIA_desc,
         NULL,
         ky_json.campo(jsonObj, 'nivel'),
         'P',
         ky_json.campo(jsonObj, 'proveido_code'),
         ky_json.campo(jsonObj, 'descripcion_desc'),
         NULL,
         ky_json.campo(jsonObj, 'comentario'),
         SYSDATE,
         NULL,
         'OB',
         'DOC',
         v_DEPENDENCIA,
         'N',
         'S');
      v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
    ELSE
      v_msg := 'ERP-ERR EN EL ESTADO ACTUAL DEL DOCUMENTO NO SE PUEDE ADICIONAR MÁS APROBADORES';
    END IF;
  
  ELSIF (P_ACCION = 'DER') THEN
    --DERIVAR DOCUMENTO A OTRA UNIDAD
  
    V_QUEHACER := ky_json.campo(jsonObj, 'p_quehacer');
    V_OTRO     := ky_json.campo(jsonObj, 'p_otro');
  
    --SACAMOS EL CODIGO DEL DOCUMENTO
    SELECT YTBDOCU_CODE,
           YTBDOCU_SEQ,
           DECODE(YTBDOCU_NGS, 'N', 1, NVL(YTBDOCU_ID_USUA_VALIDO, '0')),
           YTBDOCU_TIPO_CODE
      INTO V_DOC, V_SEQ, V_USUA_VALIDO, V_TIPO_DOC
      FROM YTBDOCU
     WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC || '-' || '1';
  
    IF V_TIPO_DOC = '05' OR V_TIPO_DOC = '02' OR V_TIPO_DOC = '06' THEN
      --PRIMERO APROBAMOS ESE NIVEL PARA PODER DERIVAR
      UPDATE YTRAPDO
         SET YTRAPDO_IND_ESTADO = 'A', YTRAPDO_FECHA_APROBACION = SYSDATE
       WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ || '-' ||
             YTRAPDO_SEQ = V_CODEDOC_1;
    
      IF (SQL%ROWCOUNT > 0) THEN
        COMMIT;
      ELSE
        RAISE EX_NO_APR_NIV;
      END IF;
    
    END IF;
  
    SELECT COUNT(*)
      INTO V_FALTA_APROB
      FROM YTRAPDO
     where YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ || '-' ||
           YTRAPDO_SEQ = V_CODEDOC_1
       AND YTRAPDO_IND_ESTADO <> 'A';
  
    IF (V_FALTA_APROB > 0) THEN
      RAISE EX_FALTA_APROB;
    END IF;
  
    SELECT YTRAPDO_ORGN_CODE,
           YTRAPDO_COAS_CODE,
           YTRAPDO_DESCRIPCION,
           YTRAPDO_UNID_CODE
      INTO V_ORG_CODE, V_COAS_CODE, V_DESCRIPCION, V_UNIDAD
      FROM YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
           V_CODEDOC || '-' || '1'
       AND YTRAPDO_IND_COPIA = 'N'
       AND YTRAPDO_NIVEL =
           (SELECT MAX(YTRAPDO_NIVEL)
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                   V_CODEDOC || '-' || '1'
               AND YTRAPDO_IND_COPIA = 'N');
  
    --VERIFICAR SI EL QUE QUIERE COMPLETAR PERTENECE A LA ULTIMA UNIDAD DE APROBO
    --SELECT COUNT(*) INTO V_PERTENECE_UNIDAD
    --FROM YTRUSUN WHERE YTRUSUN_USUA_ID=P_USUA_ID AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=V_COAS_CODE||V_ORG_CODE;
  
    V_PERTENECE_UNIDAD := kyt_tramite_administrador.FYT_USUA_PERTENE_UNID(ky_json.campo(jsonObj,
                                                                                        'usua_id'),
                                                                          V_COAS_CODE ||
                                                                          V_ORG_CODE);
  
    IF V_PERTENECE_UNIDAD = 0 THEN
      RAISE EX_NOPERTENECE;
    END IF;
  
    V_ESTADO := kyt_tramite.FKYT_DAME_ESTADO_DOCUMENTO(V_CODEDOC || '-' || '1');
    --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
  
    SELECT COUNT(*)
      INTO V_TIENE_HIJOS
      FROM YTRUNID TA, YTRUNID TB
     WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
       AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
  
    IF V_TIENE_HIJOS > 0 THEN
      SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
             SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
        INTO V_COAS, V_CODEORG
        FROM YTRUNID TA, YTRUNID TB
       WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
         AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
    ELSE
      SELECT SUBSTR(TA.YTRUNID_ORGN_UPAO, 1, 1) COAS,
             SUBSTR(TA.YTRUNID_ORGN_UPAO, 2, 10) CODE
        INTO V_COAS, V_CODEORG
        FROM YTRUNID TA
       WHERE TA.YTRUNID_CODE = v_DEPENDENCIA;
    END IF;
  
    --OBTENEMOS EL ULTIMO NIVEL DE APROBACION
  
    SELECT NVL(MAX(YTRAPDO_NIVEL), 0) + 1,
           MAX(YTRAPDO_CODE_CODE) + 1,
           MAX(YTRAPDO_SEQ) + 1
      INTO V_ULTIMO_NAP, V_CODE_CODE, V_cola
      FROM YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
           V_CODEDOC || '-' || '1'
       AND YTRAPDO_IND_COPIA = 'N';
  
    IF NOT (V_ESTADO = 'AT' OR V_ESTADO = 'CO') THEN
      SELECT TO_NUMBER(MAX(YTRAPDO_SEQ)) + 1
        INTO V_CODEAPROB
        FROM YTRAPDO
       WHERE YTRAPDO_DOCU_CODE = V_CODEDOC
         AND YTRAPDO_DOCU_SEQ = 1;
    
      IF LENGTH(V_OTRO) > 0 THEN
      
        INSERT INTO COMUMGR.YTRAPDO
          (YTRAPDO_SEQ,
           YTRAPDO_DOCU_CODE,
           YTRAPDO_DOCU_SEQ,
           YTRAPDO_CODE_CODE,
           YTRAPDO_ID_USUA_APROB,
           YTRAPDO_ORGN_CODE,
           YTRAPDO_COAS_CODE,
           YTRAPDO_DESCRIPCION,
           YTRAPDO_SUBDENOMINACION,
           YTRAPDO_NIVEL,
           YTRAPDO_IND_ESTADO,
           YTRAPDO_PRVE_CODE,
           YTRAPDO_PRVE_DESC,
           YTRAPDO_FECHA_APROBACION,
           YTRAPDO_COMENTARIO,
           YTRAPDO_FECHA_ACTIVIDAD,
           YTRAPDO_ESTA_CODE_PASARA,
           YTRAPDO_ESTA_CODE_REGRESA,
           YTRAPDO_TIAP_CODE,
           YTRAPDO_UNID_CODE,
           YTRAPDO_IND_ENVIADO,
           YTRAPDO_IND_ADJUNTO,
           YTRAPDO_IND_DERIVADO,
           YTRAPDO_TIEMPO)
        VALUES
          (V_CODEAPROB,
           V_CODEDOC,
           1,
           V_CODE_CODE,
           NULL,
           V_CODEORG,
           v_coas,
           v_DEPENDENCIA_desc,
           NULL,
           V_ULTIMO_NAP,
           'P',
           V_QUEHACER,
           V_OTRO,
           NULL,
           ky_json.campo(jsonObj, 'comentario'),
           SYSDATE,
           'TR',
           'OB',
           'APD',
           v_DEPENDENCIA,
           'S',
           ky_json.campo(jsonObj, 'p_adjunto'),
           'S',
           ky_json.campo(jsonObj, 'p_tiempo'));
      
      ELSE
        INSERT INTO COMUMGR.YTRAPDO
          (YTRAPDO_SEQ,
           YTRAPDO_DOCU_CODE,
           YTRAPDO_DOCU_SEQ,
           YTRAPDO_CODE_CODE,
           YTRAPDO_ID_USUA_APROB,
           YTRAPDO_ORGN_CODE,
           YTRAPDO_COAS_CODE,
           YTRAPDO_DESCRIPCION,
           YTRAPDO_SUBDENOMINACION,
           YTRAPDO_NIVEL,
           YTRAPDO_IND_ESTADO,
           YTRAPDO_PRVE_CODE,
           YTRAPDO_PRVE_DESC,
           YTRAPDO_FECHA_APROBACION,
           YTRAPDO_COMENTARIO,
           YTRAPDO_FECHA_ACTIVIDAD,
           YTRAPDO_ESTA_CODE_PASARA,
           YTRAPDO_ESTA_CODE_REGRESA,
           YTRAPDO_TIAP_CODE,
           YTRAPDO_UNID_CODE,
           YTRAPDO_IND_ENVIADO,
           YTRAPDO_IND_ADJUNTO,
           YTRAPDO_IND_DERIVADO,
           YTRAPDO_TIEMPO)
        VALUES
          (V_CODEAPROB,
           V_CODEDOC,
           1,
           V_CODE_CODE,
           NULL,
           V_CODEORG,
           v_coas,
           v_DEPENDENCIA_desc,
           NULL,
           V_ULTIMO_NAP,
           'P',
           ky_json.campo(jsonObj, 'proveido_code'),
           ky_json.campo(jsonObj, 'descripcion_desc'),
           NULL,
           ky_json.campo(jsonObj, 'comentario'),
           SYSDATE,
           'TR',
           'OB',
           'APD',
           v_DEPENDENCIA,
           'S',
           ky_json.campo(jsonObj, 'p_adjunto'),
           'S',
           ky_json.campo(jsonObj, 'p_tiempo'));
      END IF;
    
      kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                           V_SEQ,
                                           ky_json.campo(jsonObj, 'usua_id'),
                                           'AUTO',
                                           'Documento fue derivado al nivel de aprobación <span style="color:red;FONT-SIZE:18PX;">' ||
                                           V_ULTIMO_NAP ||
                                           '</span> dependencia responsable <span style="color:red;">' ||
                                           v_DEPENDENCIA_desc || '</span> ' ||
                                           ky_json.campo(jsonObj,
                                                         'comentario'),
                                           baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                      'usua_id')),
                                                                                         'X'),
                                           V_MSG_MES,
                                           (V_ULTIMO_NAP - 1) || '-' ||
                                           (V_cola - 1));
    
      v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
    
      --QUITAMOS LA SEÑAL DE DERIVADO DEL ULTIMO ENVIO
      UPDATE COMUMGR.YTRAPDO
         SET YTRAPDO_IND_ENVIADO = '', YTRAPDO_FECHA_DERIVACION = SYSDATE
       WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
             V_CODEDOC || '-' || '1'
         AND YTRAPDO_NIVEL = V_ULTIMO_NAP - 1;
    ELSE
      v_msg := 'ERP-ERR EN EL ESTADO ACTUAL DEL DOCUMENTO NO SE PUEDE ADICIONAR MÁS APROBADORES';
    END IF;
  
  ELSIF (P_ACCION = 'APR') THEN
  
    --V_CODEDOC:=V_CODEDOC||'-'||'1';
  
    V_MSG := 'ERP-ERR  Nivel de aprobación no se pudo aprobar';
  
    v_aprob_desap := ky_json.campo(jsonObj, 'accion');
    V_ACCION2     := ky_json.campo(jsonObj, 'p_cestado');
    V_CODE_DOC_UN := ky_json.campo(jsonObj, 'p_code_doc_un');
    V_CONTENEDORA := ky_json.campo(jsonObj, 'p_contenedora');  
    V_MSG := V_CODEDOC || '--' || V_cola;
    
    IF(kyt_tramite.FKYT_DAME_ESTADO_DOCUMENTO(V_CODEDOC||'-'||'1') = 'BC')THEN
      RAISE EX_NO_BC;--- MCL 18/03/2025
    END IF;
  
    SELECT YTRAPDO_NIVEL,
           YTRAPDO_TIAP_CODE,
           YTRAPDO_SEQ_DCA,
           YTRAPDO_COLA_CODE_PADRE,
           YTRAPDO_COLA_CODE_HIJO,
           YTRAPDO_CONTENEDORA,
           YTRAPDO_NIVEL_COLA
      INTO V_NIVEL_APROB,
           V_TIPOAPROB,
           V_SEQ_HEREDADO,
           V_YTRAPDO_COLA_CODE_PADRE,
           V_YTRAPDO_COLA_CODE_HIJO,
           V_YTRAPDO_CONTENEDORA,
           V_YTRAPDO_NIVEL_COLA
      FROM YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
       AND YTRAPDO_CODE_CODE = V_cola
       AND NOT YTRAPDO_IND_ESTADO IN ('E');
  
    V_MSG := '002';
  
    SELECT COUNT(*)
      INTO V_POR_APROBAR
      FROM YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
       AND YTRAPDO_NIVEL < V_NIVEL_APROB
       AND YTRAPDO_IND_ESTADO IN ('P', 'D');
    --WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_CODE_CODE<V_cola AND YTRAPDO_IND_ESTADO IN ('P','D');
  
    --SACAMOS EL CODIGO DEL DOCUMENTO
    SELECT YTBDOCU_CODE,
           YTBDOCU_SEQ,
           DECODE(YTBDOCU_NGS, 'N', 1, NVL(YTBDOCU_ID_USUA_VALIDO, '0')),
           YTBDOCU_ASUNTO,
           YTBDOCU_APELLIDOS || ' ' || YTBDOCU_NOMBRES,
           YTBDOCU_MAJR_DESC,
           YTBDOCU_USUA_ID,
           YTBDOCU_CAEX_CODE,
           YTBDOCU_IND_CAUNA,
           YTBDOCU_DIAS_VIGENCIA,
           YTBDOCU_PLAN_PROC_CODE,
           YTBDOCU_PLAN_SEQ
      INTO V_DOC,
           V_SEQ,
           V_USUA_VALIDO,
           V_ASUNTO,
           V_NOMBRE,
           V_CARRERA,
           V_USUA_ID,
           V_CARPETA,
           V_IND_CAUNA,
           V_DIAS_VIGENCIA,
           V_YTBDOCU_PLAN_PROC_CODE,
           V_YTBDOCU_PLAN_SEQ
      FROM YTBDOCU
     WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
  
    IF V_CARPETA IS NOT NULL THEN
      SELECT COUNT(*)
        INTO V_POR_APROBAR_1
        FROM COMUMGR.YTRDOCA, COMUMGR.YTRAPDO
       WHERE YTRDOCA_CAEX_CODE = V_CARPETA
         AND YTRDOCA_DOCU_CODE || '-' || YTRDOCA_DOCU_SEQ =
             YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ
         AND YTRAPDO_IND_ESTADO IN ('P', 'D')
         AND YTRAPDO_SEQ = (V_SEQ_HEREDADO - 1);
    
      IF V_POR_APROBAR_1 > 0 THEN
        V_MSG_1 := '<b>ERP-ERR::::</b>PARA PODER APROBAR EL NIVEL DEBEN ESTAR APROBADOS TODOS LOS DOCUMENTOS DE LA CARPETA... FALTA(N): ' ||
                   V_POR_APROBAR_1 || ' POR APROBAR' || V_SEQ_HEREDADO;
        RAISE EXP_FALTA_APROBAR;
      END IF;
    END IF;
  
    --VERIFICACION PARA DOCUMENTOS CON CAMPOS DINAMICOS FORMA YTPSCIN
  
    SELECT COUNT(*)
      INTO V_EXISTE
      FROM COMUMGR.YTRVAMD
     WHERE YTRVAMD_DOCU_CODE = V_CODE_DOC_UN
       AND YTRVAMD_CONTROL = 'BT'
       AND YTRVAMD_VALOR_DEFECTO = 'YTPSCIN';
  
    --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'' || V_CODE_DOC_UN);
  
    IF V_EXISTE > 0 THEN
    
      V_CONT_1 := 0;
      V_CONT_2 := 0;
      V_EXISTE := 0;
    
      --SELECCIONAR EL CODIGO DEL BOTON
      SELECT YTRVAMD_CAME_CODE
        INTO V_YTRVAMD_CAME_CODE
        FROM COMUMGR.YTRVAMD
       WHERE YTRVAMD_DOCU_CODE = V_CODE_DOC_UN
         AND YTRVAMD_CONTROL = 'BT'
         AND YTRVAMD_VALOR_DEFECTO = 'YTPSCIN';
    
      --VERIFICAR SI LA VALIDACION SERA EN ESTA COLA DE APROBACION
      SELECT COUNT(*)
        INTO V_EXISTE
        FROM YTRPRCO
       WHERE YTRPRCO_PLAN_PROC_CODE || '-' || YTRPRCO_PLAN_SEQ =
             V_YTBDOCU_PLAN_PROC_CODE || '-' || V_YTBDOCU_PLAN_SEQ
         AND YTRPRCO_COLA_CODE = V_YTRAPDO_COLA_CODE_PADRE --155 V_YTRAPDO_COLA_CODE_PADRE --196 126 155
         AND YTRPRCO_NIV_COLA_CAM = V_YTRAPDO_NIVEL_COLA
         AND YTRPRCO_CAMPO_CODE = V_YTRVAMD_CAME_CODE;
    
      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_YTRVAMD_CAME_CODE || '-' || V_YTRAPDO_NIVEL_COLA || '-' || V_YTRAPDO_COLA_CODE_PADRE || '-' ||  V_YTBDOCU_PLAN_PROC_CODE || '-' || V_YTBDOCU_PLAN_SEQ || '---' || V_EXISTE);
    
      --IF V_EXISTE > 0 THEN
    
      --V_MSG_1:='<span style="color:red;font-weight:bold;">ERP-ERR::::</span>PARA APROBAR ESTE NIVEL PRIMERO DEBE APROBAR LOS CURSOS DE LA CONVALIDACIÓN EXTERNA';
      --RAISE EXP_FALTA_APROBAR;
    
      SELECT YTRVAMD_VALOR_JSON
        INTO V_YTRTEMP_JSON_DATA_TEMP_CLOB
        FROM COMUMGR.YTRVAMD
       WHERE YTRVAMD_DOCU_CODE = V_CODE_DOC_UN
         AND YTRVAMD_CONTROL = 'BT'
         AND YTRVAMD_VALOR_DEFECTO = 'YTPSCIN';
    
      V_LISTVALUE_1 := json_list(V_YTRTEMP_JSON_DATA_TEMP_CLOB); --CAPTURAMOS LISTA DE OBJETOS QUE ESTA REGISTRADA
    
      IF V_LISTVALUE_1.COUNT <> 0 THEN
      
        V_YTRTEMP_JSON_DATA_TEMP_CLOB := '';
      
        FOR i IN 1 .. V_LISTVALUE_1.COUNT LOOP
        
          v_element := V_LISTVALUE_1.get(i);
          v_obj     := json(v_element);
        
          V_CICLO_1        := json_ext.get_string(v_obj, 'ciclo');
          V_CREDITO_1      := json_ext.get_string(v_obj, 'creditos');
          V_CURSO_1        := json_ext.get_string(v_obj, 'curso');
          V_CURSO_NOMBRE_1 := json_ext.get_string(v_obj, 'curso_nombre');
          V_ESTADO_APRO    := json_ext.get_string(v_obj, 'estado');
        
          V_CARRERA_1        := json_ext.get_string(v_obj, 'carrera');
          V_NIVEL_1          := json_ext.get_string(v_obj, 'nivel');
          V_CAMPUS_1         := json_ext.get_string(v_obj, 'campus');
          V_CARRERA_TRASLADO := json_ext.get_string(v_obj,
                                                    'carrera_traslado');
        
          --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_ESTADO_APRO);
        
          IF V_ESTADO_APRO = 'P' OR V_ESTADO_APRO = '' OR
             V_ESTADO_APRO IS NULL THEN
          
            V_CONT_1 := 1;
          
          END IF;
        
          IF V_ESTADO_APRO = 'A' THEN
          
            V_CONT_2 := V_CONT_2 + 1;
          
          END IF;
        
        END LOOP;
      
      END IF;
    
      IF V_EXISTE > 0 THEN
      
        IF V_CONT_1 > 0 THEN
        
          V_MSG_1 := '<span style="color:red;font-weight:bold;">ERP-ERR::::</span>PARA APROBAR ESTE NIVEL PRIMERO DEBE APROBAR O DESAPROBAR LOS CURSOS DE LA CONVALIDACIÓN EXTERNA';
          RAISE EXP_FALTA_APROBAR;
        
        END IF;
      
      END IF;
    
    END IF;
  
    --VERIFICACION PARA DOCUMENTOS CON CAMPOS DINAMICOS FORMA YTPSCIN
  
    SELECT COUNT(*)
      INTO V_EXISTE
      FROM COMUMGR.YTRVAMD
     WHERE YTRVAMD_DOCU_CODE = V_CODE_DOC_UN
       AND YTRVAMD_CONTROL = 'BT'
       AND YTRVAMD_VALOR_DEFECTO = 'YTPSCEX';
  
    --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'' || V_CODE_DOC_UN);
  
    IF V_EXISTE > 0 THEN
    
      V_CONT_1 := 0;
      V_CONT_2 := 0;
      V_EXISTE := 0;
    
      --SELECCIONAR EL CODIGO DEL BOTON
      SELECT YTRVAMD_CAME_CODE
        INTO V_YTRVAMD_CAME_CODE
        FROM COMUMGR.YTRVAMD
       WHERE YTRVAMD_DOCU_CODE = V_CODE_DOC_UN
         AND YTRVAMD_CONTROL = 'BT'
         AND YTRVAMD_VALOR_DEFECTO = 'YTPSCEX';
    
      --VERIFICAR SI LA VALIDACION SERA EN ESTA COLA DE APROBACION
      SELECT COUNT(*)
        INTO V_EXISTE
        FROM YTRPRCO
       WHERE YTRPRCO_PLAN_PROC_CODE || '-' || YTRPRCO_PLAN_SEQ =
             V_YTBDOCU_PLAN_PROC_CODE || '-' || V_YTBDOCU_PLAN_SEQ
         AND YTRPRCO_COLA_CODE = V_YTRAPDO_COLA_CODE_PADRE --155 V_YTRAPDO_COLA_CODE_PADRE --196 126 155
         AND YTRPRCO_NIV_COLA_CAM = V_YTRAPDO_NIVEL_COLA
         AND YTRPRCO_CAMPO_CODE = V_YTRVAMD_CAME_CODE;
    
      --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_YTRVAMD_CAME_CODE || '-' || V_YTRAPDO_NIVEL_COLA || '-' || V_YTRAPDO_COLA_CODE_PADRE || '-' ||  V_YTBDOCU_PLAN_PROC_CODE || '-' || V_YTBDOCU_PLAN_SEQ || '---' || V_EXISTE);
    
      --IF V_EXISTE > 0 THEN
    
      --V_MSG_1:='<span style="color:red;font-weight:bold;">ERP-ERR::::</span>PARA APROBAR ESTE NIVEL PRIMERO DEBE APROBAR LOS CURSOS DE LA CONVALIDACIÓN EXTERNA';
      --RAISE EXP_FALTA_APROBAR;
    
      SELECT YTRVAMD_VALOR_JSON
        INTO V_YTRTEMP_JSON_DATA_TEMP_CLOB
        FROM COMUMGR.YTRVAMD
       WHERE YTRVAMD_DOCU_CODE = V_CODE_DOC_UN
         AND YTRVAMD_CONTROL = 'BT'
         AND YTRVAMD_VALOR_DEFECTO = 'YTPSCEX';
    
      V_LISTVALUE_1 := json_list(V_YTRTEMP_JSON_DATA_TEMP_CLOB); --CAPTURAMOS LISTA DE OBJETOS QUE ESTA REGISTRADA
    
      IF V_LISTVALUE_1.COUNT <> 0 THEN
      
        V_YTRTEMP_JSON_DATA_TEMP_CLOB := '';
      
        FOR i IN 1 .. V_LISTVALUE_1.COUNT LOOP
        
          v_element := V_LISTVALUE_1.get(i);
          v_obj     := json(v_element);
        
          V_CICLO_1        := json_ext.get_string(v_obj, 'ciclo');
          V_CREDITO_1      := json_ext.get_string(v_obj, 'creditos');
          V_CURSO_1        := json_ext.get_string(v_obj, 'curso');
          V_CURSO_NOMBRE_1 := json_ext.get_string(v_obj, 'curso_nombre');
          V_ESTADO_APRO    := json_ext.get_string(v_obj, 'estado');
        
          V_CARRERA_1        := json_ext.get_string(v_obj, 'carrera');
          V_NIVEL_1          := json_ext.get_string(v_obj, 'nivel');
          V_CAMPUS_1         := json_ext.get_string(v_obj, 'campus');
          V_CARRERA_TRASLADO := json_ext.get_string(v_obj,
                                                    'carrera_traslado');
        
          --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),V_ESTADO_APRO);
        
          IF V_ESTADO_APRO = 'P' OR V_ESTADO_APRO = '' OR
             V_ESTADO_APRO IS NULL THEN
          
            V_CONT_1 := 1;
          
          END IF;
        
          IF V_ESTADO_APRO = 'A' THEN
          
            V_CONT_2 := V_CONT_2 + 1;
          
          END IF;
        
        END LOOP;
      
      END IF;
    
      IF V_EXISTE > 0 THEN
      
        IF V_CONT_1 > 0 THEN
        
          V_MSG_1 := '<span style="color:red;font-weight:bold;">ERP-ERR::::</span>PARA APROBAR ESTE NIVEL PRIMERO DEBE APROBAR O DESAPROBAR LOS CURSOS DE LA CONVALIDACIÓN INTERNA';
          RAISE EXP_FALTA_APROBAR;
        
        END IF;
      
      END IF;
    
    END IF;
  
    /*IF V_CONTENEDORA = 'N' THEN
    
    
        V_COLA_CODE_PADRE := ky_json.campo(jsonObj, 'p_cola_padre');
    
        --SELECCIONAMOS EL CODIGO DEL REQUISITO
        SELECT YTRPRCO_REQUISITO_CODE INTO V_YTRPRCO_REQUISITO_CODE
        FROM COMUMGR.YTRPRCO WHERE YTRPRCO_PLAN_SEQ = (SELECT YTBDOCU_PLAN_SEQ FROM YTBDOCU WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
        AND YTRPRCO_PLAN_PROC_CODE = (SELECT YTBDOCU_PLAN_PROC_CODE FROM YTBDOCU WHERE YTBDOCU_CODE = V_CODE_DOC_UN) AND YTRPRCO_COLA_CODE = V_COLA_CODE_PADRE;
    
    
    
        SELECT COUNT(*) INTO V_EXISTE FROM YTVREQU WHERE YTVREQU_CODE = V_YTRPRCO_REQUISITO_CODE AND YTVREQU_IND_FVALIDA = '1' AND YTVREQU_TIRE_CODE = 'REC';
    
    
    END IF;*/
  
    --COMMIT;
  
    IF (v_aprob_desap = 'A') THEN
    
      --SELECT
    
      --VERIFICAMOS SI NO HAY NIVELES INFERIORES POR APROBAR
      IF V_POR_APROBAR = 0 THEN
        --if(kyt_tramite_administrador.FYT_REQUISTOS_PEND_VALIDACION(V_DOC)='0') THEN --verificamos si todos los requisitos ya fueron validados
        if (kyt_tramite_administrador.FYT_REQUISTOS_PEND_VALIDA_1(V_DOC) = '0') THEN
          --verificamos si todos los requisitos ya fueron validados no consideramos los de tipo VAP
          IF (V_USUA_VALIDO <> '0') THEN
          
            --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15101);
          
            --COMMIT;
          
            --SACAMOS LOS ESTADOS
            SELECT NVL(YTRAPDO_ESTA_CODE_PASARA, '00') PASA,
                   NVL(YTRAPDO_ESTA_CODE_REGRESA, '00') REGRESA,
                   YTRAPDO_SEQ,
                   YTRAPDO_METODO,
                   ytrapdo_ind_adjunto
              INTO V_PASA, V_REGRESA, V_SIG_NIVEL, V_METODO, V_ADJUNTO
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_CODE_CODE = V_cola
               AND YTRAPDO_NIVEL = V_NIVEL_APROB
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
          
            IF V_ADJUNTO = 'S' THEN
              --NOS INDICA QUE DEBE TENER ADJUNTO ANTES DE ENVIAR PARA APROBACIÓN
            
              --DOCAPRO-0000198573-1-2
              SELECT COUNT(*)
                INTO V_TIENE_DJUNTO
                FROM COMUMGR.YTRAPAD
               WHERE YTRAPAD_APPL_REFERENCIA || '-' || YTRAPAD_APPL_CODE =
                     'DOCAPRO-' || V_CODEDOC || '-' || V_SIG_NIVEL
                 AND YTRAPAD_IND_ESTADO <> 'E';
              IF V_TIENE_DJUNTO = 0 THEN
                V_MSG_1 := '<span style="color:red;font-weight:bold;">ERP-ERR::::</span>PARA APROBAR ESTE NIVEL PRIMERO DEBES ADJUNTAR EL ARCHIVO SOLICITADO';
                RAISE EXP_FALTA_APROBAR;
              END IF;
            END IF;
            --ACTUALIZAMOS EL ESTADO DE LA APROBACION
            UPDATE YTRAPDO
               SET YTRAPDO_ID_USUA_APROB    = ky_json.campo(jsonObj,
                                                            'usua_id'),
                   YTRAPDO_IND_ESTADO       = v_aprob_desap,
                   YTRAPDO_FECHA_APROBACION = SYSDATE,
                   YTRAPDO_COMENTARIO       = ky_json.campo(jsonObj,
                                                            'comentario')
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_CODE_CODE = V_cola
               AND YTRAPDO_NIVEL = V_NIVEL_APROB
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
          
            --ENVIAMOS EL DOCUMENTO AL SIGUIENTE NIVEL DE APROBACIÓN SI ES QUE EXISTE
          
            UPDATE YTRAPDO
               SET YTRAPDO_FECHA_ENV_SIST_APROB = SYSDATE
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_SEQ = V_SIG_NIVEL + 1
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
          
            --/////VERIFICAR SI HAY MAS NIVELES DE APROBACIÓN
            SELECT COUNT(*)
              INTO V_MASAPROB
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_SEQ >= V_SIG_NIVEL + 1
               AND YTRAPDO_TIAP_CODE <> 'END'
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
            -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
            IF P_ACCION = 'D' THEN
              V_REGRESA := 'OB';
            END IF;
          
            ----AQUI CODIGO PARA VERIFICAR SI SE COMPLETA AL APROBAR EL ULTIMO NIVEL
            --V_IND_CAUNA:>>INDICA SI SE COMPLETA AL APROBAR EL  ULTIMO NIVEL DE APROBACIÓN 0=NO,1=SI
            IF (V_IND_CAUNA = 1 AND V_MASAPROB = 0) THEN
              --/////SI NO HAY MAS NIVELES DE APROBACIÓN Y INDICADOR DE COMPLETAR=1
              UPDATE YTBDOCU
                 SET YTBDOCU_ESTA_CODE = 'CO'
               WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
              --///16-07-2020:RVR--ACTUALIZAR LA FECHA DE CADUCIDAD DOCUMENTOS DE LA RESPUESTA
            
              IF V_DIAS_VIGENCIA = 0 THEN
                --0=INDICA QUE NO CADUCA, MAYOR QUE CERO DIAS DE VIGENCIA
                --VAMOS A SUMAR 200 AÑOS
                UPDATE COMUMGR.YTRAPAD
                   SET YTRAPAD_VIGENCIA_HN  = TO_NUMBER(TO_CHAR(SYSDATE +
                                                                73000,
                                                                'DDMMYYYY')),
                       YTRAPAD_VIGENCIA_HD  = SYSDATE + 73000,
                       YTRAPAD_IND_VIGENCIA = 'N'
                 WHERE YTRAPAD_APPL_CODE LIKE V_CODEDOC || '%'
                   AND YTRAPAD_APPL_REFERENCIA = 'DOCAPRO'
                   AND YTRAPAD_IND_SALIDA = 'S'
                   AND YTRAPAD_IND_ESTADO = 'A';
              ELSE
              
                UPDATE COMUMGR.YTRAPAD
                   SET YTRAPAD_VIGENCIA_HN  = TO_NUMBER(TO_CHAR(SYSDATE +
                                                                V_DIAS_VIGENCIA,
                                                                'DDMMYYYY')),
                       YTRAPAD_VIGENCIA_HD  = SYSDATE + V_DIAS_VIGENCIA,
                       YTRAPAD_IND_VIGENCIA = 'S'
                 WHERE YTRAPAD_APPL_CODE LIKE V_CODEDOC || '%'
                   AND YTRAPAD_APPL_REFERENCIA = 'DOCAPRO'
                   AND YTRAPAD_IND_SALIDA = 'S'
                   AND YTRAPAD_IND_ESTADO = 'A';
              
              END IF;
            
              --//////registramos EL ESTADO COMPLETO
              INSERT INTO COMUMGR.YTRESDO
                (YTRESDO_DOCU_CODE,
                 YTRESDO_OCU_SEQ,
                 YTRESDO_SEQ,
                 YTRESDO_ESTADO,
                 YTRESDO_FECHA_ACTIVIDAD,
                 YTRESDO_USUA_ID,
                 YTRESDO_COMENTARIO)
              VALUES
                (V_DOC,
                 1,
                 YTRESDO_SEQ_SEQ.nextval,
                 'CO',
                 SYSDATE,
                 ky_json.campo(jsonObj, 'usua_id'),
                 'SYS(automático)');
            ELSE
              UPDATE YTBDOCU
                 SET YTBDOCU_ESTA_CODE = DECODE(ky_json.campo(jsonObj,
                                                              'accion'),
                                                'A',
                                                V_PASA,
                                                V_REGRESA)
               WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
            END IF;
          
            /*INSERTAMOS EN LA TABLA DE SEGUIMIENTOS */
            SELECT YTRAPDO_DESCRIPCION
              INTO V_CAMPO1
              from YTRAPDO
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_CODE_CODE = V_cola
               AND YTRAPDO_NIVEL = V_NIVEL_APROB
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
            kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                                 V_SEQ,
                                                 ky_json.campo(jsonObj,
                                                               'usua_id'),
                                                 'AUTO',
                                                 'Documento paso el nivel de aprobación en: ' ||
                                                 V_CAMPO1,
                                                 baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                            'usua_id')),
                                                                                               'X'),
                                                 V_MSG_MES,
                                                 V_NIVEL_APROB || '-' ||
                                                 V_cola);
            -- INSERTAMOS EL COMENTARIO EN SU BANDEJA DE MENSAJERIA INTERNA
            -- PROCEDURE PYCA_GUARDAR_MENSAJE1(P_ID IN VARCHAR,P_RECEPTOR_ID IN VARCHAR2,P_NOTI IN VARCHAR2,P_ASUNTO IN VARCHAR2,P_MENSAJE IN VARCHAR2,P_ACCI IN VARCHAR2)
            -- V_DOC,V_SEQ,V_USUA_VALIDO ,V_ASUNTO,V_NOMBRE,V_CARRERA
            /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
            '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b> paso el nivel de aprobación en: <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_CAMPO1||'</span></div>
            <br><br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
          
            --VERIFICAR SI DOCUMENTO PASO A ESTADO DE COMPLETOS
          
            SELECT COUNT(*)
              INTO V_COMPLETO
              FROM YTBDOCU
             WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC
               AND YTBDOCU_ESTA_CODE = 'CO';
          
            --APLICAMOS LOS CODIGOS FINALES DEL TRAMITE
            --OBTENER EL CODIGO DEL PLANTILLA PARA ACTUALIZAR EL SECUENCIAL
          
            SELECT COUNT(*)
              INTO V_TIENE_TESTADO_CO
              FROM YTRESDO, YTVESTA
             WHERE YTRESDO_DOCU_CODE || '-' || YTRESDO_OCU_SEQ = V_CODEDOC
               AND YTRESDO_ESTADO = YTVESTA_CODE
               AND YTRESDO_ESTADO = 'AT';
          
            IF (V_COMPLETO > 0 AND V_TIENE_TESTADO_CO >= 0) THEN
              --MCL 27/02/2025 AGREGADO PARA SOLUCIONAR EXCEPECION
              SELECT YTBDOCU_PLAN_PROC_CODE,
                     YTBDOCU_PLAN_SEQ,
                     sign(YTBDOCU_NUMERO)
                INTO V_PLAN_CODE, V_SEQENTREGA, V_NUMERO --MCL 27/02/2025 AGREGADO PARA SOLUCIONAR EXCEPECION
                FROM YTBDOCU
               WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
            
              --SACAMOS EL TIPO DE NTREGA PARA GENERAR EL MENSAJE
              SELECT YTRPLAN_IND_FORMA_ENTREGA, YTRPLAN_IND_ENTREGA_AUT
                INTO V_FENTREGA, V_AUTOMATICO
                FROM YTRPLAN
               WHERE YTRPLAN_PROC_CODE || '-' || YTRPLAN_SEQ =
                     V_PLAN_CODE || '-' || V_SEQENTREGA;
            
              IF V_NUMERO = -1 THEN
                --MCL 27/02/2025 AGREGADO PARA SOLUCIONAR EXCEPECION
              
                --NUMERACION DE DOCUMENTO SACAMOS UN NUMERO TEMPORAL SE ASIGNARA EL VARDADERO NUMERO AL ENTREGAR EL DOCUMENTO
              
                SELECT YTRNUDO_NUMERACION_ACT
                  INTO V_NUMERO
                  FROM YTRNUDO
                 WHERE YTRNUDO_PROC_CODE = V_PLAN_CODE;
              
                --PARA CREAR NUMERACIÓN SOLO UNA VEZ
                UPDATE YTBDOCU
                   SET YTBDOCU_FECHA_COMPLETO = SYSDATE,
                       YTBDOCU_NUMERO         = V_NUMERO + 1
                 WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC
                   AND sign(YTBDOCU_NUMERO) = -1; --YTBDOCU_NUMERO<0; MCL 27/02/2025 AGREGADO PARA SOLUCIONAR EXCEPECION
              
                -- AND YTBDOCU_FECHA_COMPLETO IS NULL
              
                /*  select   count(*) into V_ACTUALIZO  from YTBDOCU
                WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC
                 AND YTBDOCU_NUMERO<0;*/
                -- AND YTBDOCU_FECHA_COMPLETO IS NULL;
              
                V_ACTUALIZO := SQL%ROWCOUNT;
              
                --V_PROCE_CODE_SEQ := V_PLAN_CODE||'-'||V_SEQENTREGA; MCL 27/02/2025 AGREGADO PARA SOLUCIONAR EXCEPECION
              
                --IF  V_PROCE_CODE_SEQ <> '001-3' THEN
              
                IF V_ACTUALIZO <= 0 THEN
                  MSG_EXP_GLOBAL := 'ERP-ERR NO SE PUDO ASIGNAR EL NUMERO ÚNICO AL DOCUMENTO';
                  RAISE EXP_GLOBAL;
                ELSE
                  UPDATE YTRNUDO
                     SET YTRNUDO_NUMERACION_ACT = YTRNUDO_NUMERACION_ACT + 1
                   WHERE YTRNUDO_PROC_CODE = V_PLAN_CODE;
                END IF;
              END if; --MCL 27/02/2025 AGREGADO PARA SOLUCIONAR EXCEPECION
              --END IF;
              --/////VERIFICAMOS SI ASIGNO EL NUMERO UNICO AL DOCUMENTO
            
              IF (V_IND_CAUNA = 1 AND V_MASAPROB = 0) THEN
              
                SELECT YTRAPDO_DESCRIPCION
                  INTO V_CAMPO1
                  from YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                       V_CODEDOC
                   AND YTRAPDO_SEQ = V_SIG_NIVEL;
              ELSE
              
                SELECT YTRAPDO_DESCRIPCION
                  INTO V_CAMPO1
                  from YTRAPDO
                 WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                       V_CODEDOC
                   AND YTRAPDO_IND_ESTADO IN ('P');
              END IF;
            
              --probando datos
            
              --kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,V_SEQ,ky_json.campo(jsonObj, 'usua_id'),'AUTO',
              --        '<span style="background-color:blue;color:#fff; font-weight:bold;">'|| V_FENTREGA||'--'||V_AUTOMATICO||'</span>',
              --      baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'), V_MSG_MES,V_NIVEL_APROB||'-'||V_cola) ;
            
              --RESULTADO SE BRINDA DIRECTO EN DOCUMENTO
              /*
                <option value="P">En Oficina</option>
              <option value="C">En Oficina/Courier</option>
              <option value="W">Descargable por web</option>
              <option selected="selected" value="I">Resultado se Informara en Documento</option>
              */
            
              IF V_FENTREGA = 'I' THEN
                --INSERTAR SEGUIMIENTO E INFORMAR AL USUARIO SOBRE LE ESTADO DEL DOCUMENTO
                kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                                     V_SEQ,
                                                     ky_json.campo(jsonObj,
                                                                   'usua_id'),
                                                     'AUTO',
                                                     '<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya está completo fue completado en   : ' ||
                                                     V_CAMPO1 ||
                                                     '. Los resultados fueron aceptados de acuerdo a lo solicitado</span>',
                                                     baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                                'usua_id')),
                                                                                                   'X'),
                                                     V_MSG_MES,
                                                     V_NIVEL_APROB || '-' ||
                                                     V_cola);
                --COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1('000026316','000000044',0,'Trámite Documentario: Aprobación','<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya esta completo puedes recogerlo en : ' || V_CAMPO1 ||' en horarios de oficina</span>',302);
                /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
                '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b>  ya esta completo los resultados fueron publicados por : <span style="background-color:blue;color:#fff;font-weight:bold;">' || V_CAMPO1||'</span></div>
                <br>Puedes ver los resultados en el modulo Trámite Documentario <br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
                --VERIFICAR SI LA ENTREGA ES AUTOMATICA
                IF (V_AUTOMATICO = 'S') THEN
                  --indica que se entrega automaticamente
                  --VAMOS A COMPLETAR EL ULTIMO NIVEL QUE ES LA ENTREGA DE DOCUMENTO
                  kyt_tramite_administrador.PYT_ENTREGA_DOCUMENTO(V_DOC,
                                                                  ky_json.campo(jsonObj,
                                                                                'usua_id'),
                                                                  'ENTREGA AUTOMATICA',
                                                                  V_MSG_ENTREGA);
                END IF;
                --DOCUMENTO DESCARGABLE POR WEB Y ENTREGABLE POR WEB
              ELSIF V_FENTREGA IN ('W', 'X') THEN
              
                --INSERTAR SEGUIMIENTO E INFORMAR AL USUARIO SOBRE LE ESTADO DEL DOCUMENTO
                /* INSERT INTO COMUMGR.YTRCOME (
                        YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
                        YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
                        YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
                VALUES ( SEQ_YTRCOME_CODE.NEXTVAL, V_DOC, V_SEQ,
                        sysdate, ky_json.campo(jsonObj, 'usua_id'), 'AUTO',
                        '<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya está completo fue completado en   : ' || V_CAMPO1 ||'. Puedes descargar los resultados en el detalle del documento</span>',
                        0,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'));*/
              
                kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                                     V_SEQ,
                                                     ky_json.campo(jsonObj,
                                                                   'usua_id'),
                                                     'AUTO',
                                                     '<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya está completo para entregar fue completado en   : ' ||
                                                     V_CAMPO1 ||
                                                     '. Puedes generar el documento en su detalle</span>',
                                                     baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                                'usua_id')),
                                                                                                   'X'),
                                                     V_MSG_MES,
                                                     V_NIVEL_APROB || '-' ||
                                                     V_cola);
              
                --COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1('000026316','000000044',0,'Trámite Documentario: Aprobación','<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya esta completo puedes recogerlo en : ' || V_CAMPO1 ||' en horarios de oficina</span>',302);
              
                /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
                '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b>  ya esta completo los resultados fueron publicados por : <span style="background-color:blue;color:#fff;font-weight:bold;">' || V_CAMPO1||'</span></div>
                <br>Puedes descargar la respuesta ingresando al detalle del documento <br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
              
                IF (V_AUTOMATICO = 'S') THEN
                
                  --------
                  SELECT COUNT(*)
                    INTO V_COMPLETO
                    FROM YTBDOCU
                   WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC
                     AND YTBDOCU_ESTA_CODE = 'CO';
                  -------
                  --VAMOS A COMPLETAR EL ULTIMO NIVEL QUE ES LA ENTREGA DE DOCUMENTO
                  --kyt_tramite_administrador.PYT_ENTREGA_DOCUMENTO(V_DOC,ky_json.campo(jsonObj, 'usua_id'),'ENTREGA AUTOMATICA',V_MSG_ENTREGA);
                
                  /*IF V_MSG_ENTREGA<>'OK' THEN
                  MSG_EXP_GLOBAL:= V_MSG_ENTREGA;
                  RAISE EXP_GLOBAL;
                  END IF;*/
                  -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
                  /* UPDATE YTBDOCU SET YTBDOCU_ESTA_CODE='AT',YTBDOCU_ID_USUA_ENT=ky_json.campo(jsonObj, 'usua_id'), YTBDOCU_FECHA_ENTREGA=SYSDATE
                  WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC; */
                
                  --REGISTRAMOS EL ESTADO DEL DOCUMENTO
                  /* INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                  YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                  VALUES (V_DOC,1,YTRESDO_SEQ_SEQ.nextval,'AT', SYSDATE,V_CODEDOC, 'ENTREGA AUTOMATICA');*/
                
                  /*  INSERT INTO COMUMGR.YTLOG (
                     YTLOG_CODE, YTLOG_VARIABLES)
                  VALUES (V_CODEDOC,'ENTREGA ->'||V_FENTREGA||' AUTOMATICO-> '||V_AUTOMATICO ||'DOCUMENTO->' || V_CODEDOC);*/
                  --completamos la cola de aprobación de entrega
                
                  /*  UPDATE YTRAPDO SET
                  YTRAPDO_IND_ESTADO='A',
                  YTRAPDO_ID_USUA_APROB=V_USUA_APROB,
                  YTRAPDO_COMENTARIO='Aprobación Automatica'  ,
                  YTRAPDO_FECHA_APROBACION=SYSDATE,
                  YTRAPDO_USUA_RECEPCIONO=V_USUA_APROB,
                  YTRAPDO_FECHA_RECEPCIONO=SYSDATE
                  WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=TRIM(V_CODEDOC)
                  AND YTRAPDO_IND_ESTADO<>'E' AND YTRAPDO_TIAP_CODE='END';*/
                
                  --YTBDOCU_CODE||'-'||YTBDOCU_SEQ=V_CODEDOC
                
                  /*
                   SELECT DISTINCT YTRAPDO_DESCRIPCION INTO V_CAMPO1 from COMUMGR.YTRAPDO
                   WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_IND_ESTADO<>'E' ;
                  
                   V_COMENTARIO:='<span style="background-color:#33FF00;color:#000; font-weight:bold;">Documento descargado por web por usuario y generado por: ' || V_CAMPO1 ||' por usuario: '|| ky_json.campo(jsonObj, 'usua_id') || '... '|| 'ENTREGA AUTOMATICA' ||'</span>';
                  
                   INSERT INTO COMUMGR.YTRCOME (
                   YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
                   YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
                   YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
                   VALUES ( SEQ_YTRCOME_CODE.NEXTVAL, V_DOC, 1,
                   sysdate, ky_json.campo(jsonObj, 'usua_id'), 'AUTO',
                   V_COMENTARIO,0,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'));
                  */
                
                  --VAMOS A COMPLETAR EL ULTIMO NIVEL QUE ES LA ENTREGA DE DOCUMENTO
                
                  kyt_tramite_administrador.PYT_ENTREGA_DOCUMENTO(V_DOC,
                                                                  V_USUA_APROB,
                                                                  'ENTREGA AUTOMATICA',
                                                                  V_MSG_ENTREGA);
                
                  --------
                  SELECT COUNT(*)
                    INTO V_COMPLETO
                    FROM YTBDOCU
                   WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC
                     AND YTBDOCU_ESTA_CODE = 'CO';
                  -------
                END IF;
              
              ELSE
                --INSERTAR SEGUIMIENTO E INFORMAR AL USUARIO SOBRE LE ESTADO DEL DOCUMENTO
                /* INSERT INTO COMUMGR.YTRCOME (
                        YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
                        YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
                        YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
                VALUES ( SEQ_YTRCOME_CODE.NEXTVAL, V_DOC, V_SEQ,
                        sysdate, ky_json.campo(jsonObj, 'usua_id'), 'AUTO',
                        '<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya esta completo puedes recogerlo en : ' || V_CAMPO1 ||' en horarios de oficina</span>',
                        0,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'));*/
              
                kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                                     V_SEQ,
                                                     ky_json.campo(jsonObj,
                                                                   'usua_id'),
                                                     'AUTO',
                                                     '<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya esta completo puedes recogerlo en : ' ||
                                                     V_CAMPO1 ||
                                                     ' en horarios de oficina</span>',
                                                     baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                                'usua_id')),
                                                                                                   'X'),
                                                     V_MSG_MES,
                                                     V_NIVEL_APROB || '-' ||
                                                     V_cola);
              
                --COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1('000026316','000000044',0,'Trámite Documentario: Aprobación','<span style="background-color:blue;color:#fff; font-weight:bold;">Documento ya esta completo puedes recogerlo en : ' || V_CAMPO1 ||' en horarios de oficina</span>',302);
              
                /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
                '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b>  ya esta completo puedes recogerlo en: <span style="background-color:blue;color:#fff;font-weight:bold;">' || V_CAMPO1||'</span></div>
                <br><br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
              
              END IF;
            
              --/////CORREMOS EL PROCESO DE SEMBRADO
            
              IF LENGTH(V_METODO) > 3 THEN
                -- V_MSG_PROC:=KYT_EJECUTOR.EJECUTOR_0(V_METODO);
                cad_json   := '{"code_doc":"' || V_CODEDOC ||
                              '", "usua_id": "' || V_USUA_ID || '"}';
                V_MSG_PROC := KYT_EJECUTOR.EJECUTOR(V_METODO, cad_json);
                -- MSG_EXP_GLOBAL :='ERP-ERR' || V_MSG_PROC;
                --  RAISE EXP_GLOBAL;
              
                IF V_MSG_PROC = 'ERR' THEN
                  MSG_EXP_GLOBAL := V_CODEDOC || '--' || V_USUA_ID || '--' ||
                                    'ERP-ERR PROBLEMA AL APLICAR CAMBIOS EN EL DOCUMENTO' ||
                                    V_METODO;
                  RAISE EXP_GLOBAL;
                END IF;
              
              END IF;
              --APLICAR LAS POSCONDICIONES
            
            END IF;
          
            --PRIMERO HAY QUE VERIFICAR SI EL DOCUMENTO NO TIENE ESTADO DE EVALUACIÓN ESO INDICA QUE ESTA REGISTRANDO EL ADMINISTRADOR
            SELECT COUNT(*)
              INTO V_EX_ESTADO_EV
              FROM YTRESDO
             WHERE YTRESDO_DOCU_CODE = V_DOC
               AND YTRESDO_OCU_SEQ = V_SEQ
               AND YTRESDO_ESTADO = 'EV';
          
            IF V_EX_ESTADO_EV = 0 THEN
            
              INSERT INTO COMUMGR.YTRESDO
                (YTRESDO_DOCU_CODE,
                 YTRESDO_OCU_SEQ,
                 YTRESDO_SEQ,
                 YTRESDO_ESTADO,
                 YTRESDO_FECHA_ACTIVIDAD,
                 YTRESDO_USUA_ID,
                 YTRESDO_COMENTARIO)
              VALUES
                (V_DOC,
                 V_SEQ,
                 YTRESDO_SEQ_SEQ.nextval,
                 'EV',
                 SYSDATE,
                 ky_json.campo(jsonObj, 'usua_id'),
                 'SYS: se adiciono a evaluación automatico es aprobación por administrador');
            
            END IF;
          
            --REGISTRAMOS EL ESTADO DEL DOCUMENTO SI NO COMPLETADO AUTOMATICAMENTE
            IF NOT (V_IND_CAUNA = 1 AND V_MASAPROB = 0) THEN
              INSERT INTO COMUMGR.YTRESDO
                (YTRESDO_DOCU_CODE,
                 YTRESDO_OCU_SEQ,
                 YTRESDO_SEQ,
                 YTRESDO_ESTADO,
                 YTRESDO_FECHA_ACTIVIDAD,
                 YTRESDO_USUA_ID,
                 YTRESDO_COMENTARIO)
              VALUES
                (V_DOC,
                 V_SEQ,
                 YTRESDO_SEQ_SEQ.nextval,
                 DECODE(v_aprob_desap, 'A', V_PASA, V_REGRESA),
                 SYSDATE,
                 ky_json.campo(jsonObj, 'usua_id'),
                 ky_json.campo(jsonObj, 'comentario'));
              --verificamos si enviara a otro estado
              v_cestado := ky_json.campo(jsonObj, 'p_cestado');
            END IF;
          
            IF v_aprob_desap = 'D' AND v_cestado <> '0' THEN
              UPDATE YTBDOCU
                 SET YTBDOCU_ESTA_CODE = v_cestado
               WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
              INSERT INTO COMUMGR.YTRESDO
                (YTRESDO_DOCU_CODE,
                 YTRESDO_OCU_SEQ,
                 YTRESDO_SEQ,
                 YTRESDO_ESTADO,
                 YTRESDO_FECHA_ACTIVIDAD,
                 YTRESDO_USUA_ID,
                 YTRESDO_COMENTARIO)
              VALUES
                (V_DOC,
                 V_SEQ,
                 YTRESDO_SEQ_SEQ.nextval,
                 v_cestado,
                 SYSDATE,
                 ky_json.campo(jsonObj, 'usua_id'),
                 ky_json.campo(jsonObj, 'comentario'));
            END IF;
          
            ---ACTUALIZAR REQUISITOS SELECCIONADOS
          
            --GENERAMOS ANTICIPO PARA LOS DOCUMENTOS
          
            V_COLA_CODE_PADRE := ky_json.campo(jsonObj, 'p_cola_padre');
          
            --VERIFICAR SI EXISTEN REQUISITOS PARA ESE NIVEL DE COLA APROBADORA
            SELECT COUNT(*)
              INTO V_EXISTE
              FROM COMUMGR.YTRPRCO
             WHERE YTRPRCO_PLAN_SEQ =
                   (SELECT YTBDOCU_PLAN_SEQ
                      FROM YTBDOCU
                     WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
               AND YTRPRCO_PLAN_PROC_CODE =
                   (SELECT YTBDOCU_PLAN_PROC_CODE
                      FROM YTBDOCU
                     WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
               AND YTRPRCO_COLA_CODE = V_COLA_CODE_PADRE
               AND YTRPRCO_NIV_COLA_REQU = V_YTRAPDO_NIVEL_COLA;
          
            IF V_EXISTE = 1 THEN
            
              V_EXISTE := 0;
            
              --SELECCIONAMOS EL CODIGO DEL REQUISITO
              SELECT YTRPRCO_REQUISITO_CODE
                INTO V_YTRPRCO_REQUISITO_CODE
                FROM COMUMGR.YTRPRCO
               WHERE YTRPRCO_PLAN_SEQ =
                     (SELECT YTBDOCU_PLAN_SEQ
                        FROM YTBDOCU
                       WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
                 AND YTRPRCO_PLAN_PROC_CODE =
                     (SELECT YTBDOCU_PLAN_PROC_CODE
                        FROM YTBDOCU
                       WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
                 AND YTRPRCO_COLA_CODE = V_COLA_CODE_PADRE
                 AND YTRPRCO_NIV_COLA_REQU = V_YTRAPDO_NIVEL_COLA;
            
              --VERIFICAMOS SI TIENE CONFIGURACION QUE INDIQUE QUE SE GENERA ANTICIPO
              SELECT COUNT(*)
                INTO V_EXISTE
                FROM YTVREQU
               WHERE YTVREQU_CODE = V_YTRPRCO_REQUISITO_CODE
                 AND YTVREQU_IND_FVALIDA = '1'
                 AND YTVREQU_TIRE_CODE = 'REC';
            
              IF V_EXISTE = 1 THEN
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15494);
                --COMMIT;
              
                -- CAPTURA DE VALORES PARA GENERAR EL ANTICIPO
                SELECT YTBDOCU_CAMP_CODE
                  INTO V_CAMP_CODE
                  FROM YTBDOCU
                 WHERE YTBDOCU_CODE = V_CODE_DOC_UN;
              
                SELECT YTBDOCU_LEVL_CODE
                  INTO V_LEVL_CODE
                  FROM YTBDOCU
                 WHERE YTBDOCU_CODE = V_CODE_DOC_UN;
              
                SELECT YTRPLAN_TIPO_ANTICIPO
                  INTO V_YTRPLAN_TIPO_ANTICIPO
                  FROM YTRPLAN
                 WHERE YTRPLAN_PROC_CODE =
                       (SELECT YTBDOCU_PLAN_PROC_CODE
                          FROM YTBDOCU
                         WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
                   AND YTRPLAN_SEQ =
                       (SELECT YTBDOCU_PLAN_SEQ
                          FROM YTBDOCU
                         WHERE YTBDOCU_CODE = V_CODE_DOC_UN);
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15512);
                --COMMIT;
              
                SELECT SPRIDEN_PIDM
                  INTO V_PIDM
                  FROM SPRIDEN@PROD.INT.UPAO.EDU.PE
                 WHERE ROWNUM = 1
                   AND SPRIDEN_ID =
                       (SELECT YTBDOCU_USUA_ID
                          FROM YTBDOCU
                         WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
                   AND SPRIDEN_CHANGE_IND IS NULL;
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15519);
                --COMMIT;
              
                SELECT YTBDOCU_USUA_ID
                  INTO v_usua_id
                  FROM YTBDOCU
                 WHERE YTBDOCU_CODE = V_CODE_DOC_UN;
              
                --V_EXISTE := -1;
                --SELECT COUNT(*) INTO V_EXISTE FROM YTRREDO WHERE YTBDOCU_CODE = TRIM(V_CODE_DOC_UN) AND YTRREDO_REQU_CODE = TRIM(V_YTRPRCO_REQUISITO_CODE);
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15524 || '-' || V_CODE_DOC_UN || '-' || V_YTRPRCO_REQUISITO_CODE || '-' || V_EXISTE);
                --COMMIT;
              
                SELECT YTRREDO_CODE
                  INTO V_CODEREQ_1
                  FROM YTRREDO
                 WHERE YTBDOCU_CODE = V_CODE_DOC_UN
                   AND TRIM(YTRREDO_REQU_CODE) = V_YTRPRCO_REQUISITO_CODE;
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15530);
                --COMMIT;
              
                SELECT YTRREDO_CONCEPTO_PAGO
                  INTO V_YTRREDO_CONCEPTO_PAGO
                  FROM YTRREDO
                 WHERE YTBDOCU_CODE = V_CODE_DOC_UN
                   AND TRIM(YTRREDO_REQU_CODE) = V_YTRPRCO_REQUISITO_CODE;
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15515);
                --COMMIT;
              
                V_NUM_COPIAS := V_CONT_2; -- INICIALIZAMOS EL NUMERO DE CURSOS SELECCIONADOS
              
                V_MONTO_REQ := KYG_UTILIDADES.FYG_MONTO_POR_CONCEPTO(V_YTRREDO_CONCEPTO_PAGO) *
                               V_NUM_COPIAS;
              
                -- SELECT * FROM YTRREDO ;
              
                OPEN C_CP(V_YTRPRCO_REQUISITO_CODE, V_CAMP_CODE);
                FETCH C_CP
                  INTO V_DETAIL_CODE,
                       V_PAGO_DESC,
                       V_PAGO_MONTO,
                       V_PAGO_LEVL_CODE;
                CLOSE C_CP;
              
                IF V_DETAIL_CODE IS NULL THEN
                  --//CONCEPTOS DE PAGO NO FUERON CONFIGURADOS
                  RAISE EXP_CP;
                END IF;
              
                IF V_PAGO_LEVL_CODE = '0' THEN
                  V_PAGO_LEVL_CODE := 'UG';
                END IF;
              
                --INSERT INTO  COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(),'LINEA - ' || 15540);
                --COMMIT;
              
                V_PERIODO_PAGO := NVL(KYG_UTILIDADES.FYS_DAME_PERIODO_NIVEL(V_LEVL_CODE),
                                      0);
              
                IF V_PERIODO_PAGO = 0 THEN
                  RAISE EXP_PER_PAGO;
                END IF;
              
                V_VPARAMETRO := KYG_UTILIDADES.FYS_DAME_PARAMETRO('T04');
              
                IF (V_VPARAMETRO = 'SPXXX') THEN
                  --///INDICA QUE PARAMETRO NO ESTA CONFIGURADO APLICARA 5 DIAS POR DEFECTO
                  V_VPARAMETRO := 5;
                END IF;
              
                BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_TRAMITE@PROD.INT.UPAO.EDU.PE(V_PAGO_BANCO,
                                                                                        V_YTRPLAN_TIPO_ANTICIPO,
                                                                                        V_PIDM,
                                                                                        V_DETAIL_CODE,
                                                                                        TO_DATE(KYG_UTILIDADES.FYS_DAME_PARAMETRO('T07'),
                                                                                                'DD/MM/YYYY'),
                                                                                        TO_DATE(TO_CHAR(SYSDATE +
                                                                                                        V_VPARAMETRO,
                                                                                                        'DD/MM/YYYY')),
                                                                                        TO_DATE(TO_CHAR(SYSDATE +
                                                                                                        V_VPARAMETRO,
                                                                                                        'DD/MM/YYYY')),
                                                                                        V_PERIODO_PAGO,
                                                                                        V_CAMP_CODE,
                                                                                        V_LEVL_CODE,
                                                                                        v_usua_id,
                                                                                        V_CODEREQ_1,
                                                                                        V_NUM_COPIAS,
                                                                                        V_CODE_DOC_UN,
                                                                                        1,
                                                                                        V_MONTO_REQ,
                                                                                        'REQ',
                                                                                        V_MSG_BANCO);
              
                -- IF V_MSG_BANCO='OK' THEN
                --//////////////////////////////////////////////
                -- INSERTAR DETALLE DE PAGO DE TRÁMITE
              
                -- ELSE
                --      RAISE EXP_PAGO_BANCO;
                -- END IF;
              
                IF V_MSG_BANCO <> 'OK' THEN
                  RAISE EXP_PAGO_BANCO;
                ELSE
                  --/// SE ACTUALIZA EL REQUERIMIENTO CON EL CODIGO DE PAGO DEL BANCO
                  UPDATE COMUMGR.YTRREDO
                     SET YTRREDO_PADH_CODE = V_PAGO_BANCO
                   WHERE YTRREDO_CODE = V_CODEREQ_1;
                END IF;
              
                --V_MSG:='OK';
              
              END IF;
            
            END IF;
          
            UPDATE YTDRETRA
               SET YTDRETRA_ATENDIDO = '1'
             WHERE YTDRETRA_ID_USUARIO =
                   (SELECT YTBDOCU_USUA_ID
                      FROM YTBDOCU
                     WHERE YTBDOCU_CODE = V_CODE_DOC_UN)
               AND YTDRETRA_FK_YTRETRA = 1;
          
            V_MSG := 'OK'; --2'||'--IND_completo:'||V_COMPLETO||'--V_ENTREGA:'||V_FENTREGA||'--V_MENSAJE_ENTREGA:'||V_MSG_ENTREGA;
            --commit;
          
          ELSE
            V_MSG := 'ERP-ERR No se puede aprobar un documento si no está validado... Clic en botón validar documento de la bandeja de entrada';
          END IF;
        ELSE
          --requisirtos pendeienstes de validación
          V_MSG := 'ERP-ERR Para poder iniciar el proceso de aprobación todos los requisitos deben estar validados';
        END IF;
      ELSE
        V_MSG := 'ERP-ERR No puedes aprobar este nivel si hay un nivel inferior sin aprobar';
      END IF;
    
    ELSE
      --ENTONCES VA A DESAPROBAR
      SELECT YTBDOCU_PLAN_PROC_CODE, YTBDOCU_PLAN_SEQ
        INTO V_PLAN_CODE, V_SEQENTREGA
        FROM YTBDOCU
       WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
    
      IF (V_TIPOAPROB <> 'INI') THEN
        --ES CUALQUIER OTRO NIVEL DE APROBACIÓN DIFERNETE DEL INICIAL QUE ES EL QUE DEVUELVE AL ALUMNO
      
        /*SELECT NVL(YTRAPDO_ESTA_CODE_PASARA,'00') PASA,NVL(YTRAPDO_ESTA_CODE_REGRESA,'00') REGRESA
                INTO V_PASA,V_REGRESA
        FROM YTRAPDO
        WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_CODE_CODE=V_cola  AND YTRAPDO_NIVEL=V_NIVEL_APROB AND NOT YTRAPDO_IND_ESTADO IN('E');
        */
      
        IF V_ACCION2 = 'OB' THEN
          --DOCUMENTO SE DESAPRUEBA Y OBSERVA Y DEVUELVE AL USUARIO PARA SUBSANAR
        
          --VERIFICAMOS SI PERMITE OBSERVAR DOC
          SELECT YTRPLAN_IND_OBSERVAR
            INTO V_IND_OBSERVAR
            FROM YTRPLAN
           WHERE YTRPLAN_PROC_CODE || '-' || YTRPLAN_SEQ =
                 V_PLAN_CODE || '-' || V_SEQENTREGA;
        
          IF V_IND_OBSERVAR = '0' THEN
            MSG_EXP_GLOBAL := 'EPR-ERR TIPO DE DOCUMENTO NO PERMITE SER OBSERVADO';
            RAISE EXP_GLOBAL;
          END IF;
          --valida requisitos y campos adicionales
          if (kyt_tramite_administrador.FYT_REQUISTO_CAMP_PEND_VALIDA(V_DOC) = '0') THEN
            MSG_EXP_GLOBAL := 'EPR-ERR PARA QUE EL DOCUMENTO PUEDA SER OBSERVADO, DEBE TENER AL MENOS UN REQUISITO PENDIENTE';
            RAISE EXP_GLOBAL;
          END IF;
        
          /*INSERTAMOS LOS NUEVAS APROBACIONES*/
        
          SELECT MAX(YTRAPDO_SEQ)
            INTO V_SEQAPROB
            FROM YTRAPDO
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC;
        
          V_SEQAPROB_I := V_SEQAPROB;
        
          OPEN C_APROBACION(V_CODEDOC);
          LOOP
            FETCH C_APROBACION
              INTO C_APROBACION_REC;
            EXIT WHEN C_APROBACION%NOTFOUND;
            V_SEQAPROB := V_SEQAPROB + 1;
            INSERT INTO COMUMGR.YTRAPDO
              (YTRAPDO_SEQ,
               YTRAPDO_DOCU_CODE,
               YTRAPDO_DOCU_SEQ,
               YTRAPDO_CODE_CODE,
               YTRAPDO_ID_USUA_APROB,
               YTRAPDO_ORGN_CODE,
               YTRAPDO_COAS_CODE,
               YTRAPDO_DESCRIPCION,
               YTRAPDO_SUBDENOMINACION,
               YTRAPDO_NIVEL,
               YTRAPDO_IND_ESTADO,
               YTRAPDO_PRVE_CODE,
               YTRAPDO_PRVE_DESC,
               YTRAPDO_FECHA_APROBACION,
               YTRAPDO_COMENTARIO,
               YTRAPDO_FECHA_ACTIVIDAD,
               YTRAPDO_ESTA_CODE_PASARA,
               YTRAPDO_ESTA_CODE_REGRESA,
               YTRAPDO_TIAP_CODE,
               YTRAPDO_USUA_RECEPCIONO,
               YTRAPDO_FECHA_RECEPCIONO,
               YTRAPDO_UNID_CODE,
               YTRAPDO_TIEMPO,
               YTRAPDO_IND_ADJUNTO,
               YTRAPDO_METODO,
               YTRAPDO_IND_SALIDA)
            VALUES
              (V_SEQAPROB,
               C_APROBACION_REC.YTRAPDO_DOCU_CODE,
               C_APROBACION_REC.YTRAPDO_DOCU_SEQ,
               C_APROBACION_REC.YTRAPDO_CODE_CODE,
               NULL,
               C_APROBACION_REC.YTRAPDO_ORGN_CODE,
               C_APROBACION_REC.YTRAPDO_COAS_CODE,
               C_APROBACION_REC.YTRAPDO_DESCRIPCION,
               C_APROBACION_REC.YTRAPDO_SUBDENOMINACION,
               C_APROBACION_REC.YTRAPDO_NIVEL,
               'P',
               C_APROBACION_REC.YTRAPDO_PRVE_CODE,
               C_APROBACION_REC.YTRAPDO_PRVE_DESC,
               NULL,
               NULL,
               SYSDATE,
               C_APROBACION_REC.YTRAPDO_ESTA_CODE_PASARA,
               C_APROBACION_REC.YTRAPDO_ESTA_CODE_REGRESA,
               C_APROBACION_REC.YTRAPDO_TIAP_CODE,
               NULL,
               NULL,
               C_APROBACION_REC.YTRAPDO_UNID_CODE,
               C_APROBACION_REC.YTRAPDO_TIEMPO,
               C_APROBACION_REC.YTRAPDO_IND_ADJUNTO,
               C_APROBACION_REC.YTRAPDO_METODO,
               C_APROBACION_REC.YTRAPDO_IND_SALIDA);
          END LOOP;
          CLOSE C_APROBACION;
        
          --QUITAMOS TODOS LOS NIVELES DE APROBACIÓN
          UPDATE YTRAPDO
             SET YTRAPDO_IND_ESTADO_1 = DECODE(YTRAPDO_NIVEL,
                                               V_NIVEL_APROB,
                                               '',
                                               YTRAPDO_IND_ESTADO),
                 YTRAPDO_IND_ESTADO   = 'E'
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
             AND YTRAPDO_SEQ <= V_SEQAPROB_I
             AND YTRAPDO_IND_ESTADO_1 IS NULL; --AND YTRAPDO_TIAP_CODE='APD' ;
        
          SELECT YTRAPDO_DESCRIPCION
            INTO V_CAMPO1
            from YTRAPDO
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
             AND YTRAPDO_CODE_CODE = V_cola
             AND YTRAPDO_NIVEL = V_NIVEL_APROB
             AND YTRAPDO_SEQ <= V_SEQAPROB_I
             AND YTRAPDO_IND_ESTADO_1 IS NULL;
        
          --ACTUALIZAMOS EL ESTADO DE LA APROBACION
          UPDATE YTRAPDO
             SET YTRAPDO_ID_USUA_APROB    = ky_json.campo(jsonObj, 'usua_id'),
                 YTRAPDO_IND_ESTADO       = 'E',
                 YTRAPDO_IND_ESTADO_1     = v_aprob_desap,
                 YTRAPDO_FECHA_APROBACION = SYSDATE,
                 YTRAPDO_COMENTARIO       = ky_json.campo(jsonObj,
                                                          'comentario')
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
             AND YTRAPDO_CODE_CODE = V_cola
             AND YTRAPDO_NIVEL = V_NIVEL_APROB
             AND YTRAPDO_SEQ <= V_SEQAPROB_I
             AND YTRAPDO_IND_ESTADO_1 IS NULL;
        
          ----------falta validar codigo doc
          /*INSERTAMOS EN LA TABLA DE SEGUIMIENTOS */
          /*   INSERT INTO COMUMGR.YTRCOME(YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
              YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
              YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
          VALUES ( SEQ_YTRCOME_CODE.NEXTVAL, V_DOC, V_SEQ, sysdate, ky_json.campo(jsonObj, 'usua_id'), 'AUTO',
              '<span style="color:red;">Documento fue desaprobado en: ' || V_CAMPO1 ||'...'|| ky_json.campo(jsonObj, 'comentario') ||'<span>',
                  0,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'));*/
        
          kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                               V_SEQ,
                                               ky_json.campo(jsonObj,
                                                             'usua_id'),
                                               'AUTO',
                                               '<span style="color:red;">Documento fue desaprobado en: ' ||
                                               V_CAMPO1 || '...' ||
                                               ky_json.campo(jsonObj,
                                                             'comentario') ||
                                               '<span>',
                                               baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                          'usua_id')),
                                                                                             'X'),
                                               V_MSG_MES,
                                               V_NIVEL_APROB || '-' ||
                                               V_cola);
        
          --COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1('000026316','000000044',0,'Trámite Documentario: Aprobación','<span style="color:red;">Documento fue desaprobado en: ' || V_CAMPO1 ||'...'|| ky_json.campo(jsonObj, 'comentario') ||'<span>',302);
        
          /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
          '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b>  fue desaprobado en: <span style="color:red;font-weight:bold;">' || V_CAMPO1||'...'|| ky_json.campo(jsonObj, 'comentario') ||'</span></div>
          <br><br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
        
          -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
          IF P_ACCION = 'D' THEN
            V_REGRESA := 'OB';
          END IF;
        
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE = 'OB'
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
        
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_DOC,
             V_SEQ,
             YTRESDO_SEQ_SEQ.nextval,
             'OB',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id'),
             ky_json.campo(jsonObj, 'comentario'));
        
          V_MSG := 'OK';
        
        ELSE
          --DOCUMENTO SE DESAPROBARA & ARCHIVARA(DAR) SIN QUE EL USUARIO PUEDA APELAR EL DOCUMENTO, ETC.
          SELECT MAX(YTRAPDO_SEQ)
            INTO V_SEQAPROB
            FROM YTRAPDO
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC;
        
          V_SEQAPROB_I := V_SEQAPROB;
        
          SELECT YTRAPDO_DESCRIPCION
            INTO V_CAMPO1
            from YTRAPDO
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
             AND YTRAPDO_CODE_CODE = V_cola
             AND YTRAPDO_NIVEL = V_NIVEL_APROB
             AND YTRAPDO_SEQ <= V_SEQAPROB_I
             AND YTRAPDO_IND_ESTADO_1 IS NULL;
        
          --ACTUALIZAMOS EL ESTADO DE LA APROBACION
          UPDATE YTRAPDO
             SET YTRAPDO_ID_USUA_APROB = ky_json.campo(jsonObj, 'usua_id'),
                 YTRAPDO_IND_ESTADO    = 'D',
                 --YTRAPDO_IND_ESTADO_1=v_aprob_desap,
                 YTRAPDO_FECHA_APROBACION = SYSDATE,
                 YTRAPDO_COMENTARIO       = ky_json.campo(jsonObj,
                                                          'comentario')
           WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
             AND YTRAPDO_CODE_CODE = V_cola
             AND YTRAPDO_NIVEL = V_NIVEL_APROB
             AND YTRAPDO_SEQ <= V_SEQAPROB_I
             AND YTRAPDO_IND_ESTADO_1 IS NULL;
        
          ----------falta validar codigo doc
          /*INSERTAMOS EN LA TABLA DE SEGUIMIENTOS */
        
          SELECT YTVESTA_DESCRIPCION, YTVESTA_ESTILO
            INTO V_ESTAPASA, V_ESTILO
            FROM YTVESTA
           WHERE YTVESTA_CODE = V_ACCION2;
        
          /*  INSERT INTO COMUMGR.YTRCOME (YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
              YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
              YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
          VALUES ( SEQ_YTRCOME_CODE.NEXTVAL, V_DOC, V_SEQ, sysdate, ky_json.campo(jsonObj, 'usua_id'), 'AUTO',
              '<span style="color:red;">Documento fue desaprobado y <span style=' || V_ESTILO || '>'|| V_ESTAPASA ||'</span> en: ' || V_CAMPO1 ||'...'|| ky_json.campo(jsonObj, 'comentario') ||'<span>',
                  0,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'));*/
        
          kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                               V_SEQ,
                                               ky_json.campo(jsonObj,
                                                             'usua_id'),
                                               'AUTO',
                                               '<span style="color:red;">Documento fue desaprobado y <span style=' ||
                                               V_ESTILO || '>' ||
                                               V_ESTAPASA || '</span> en: ' ||
                                               V_CAMPO1 || '...' ||
                                               ky_json.campo(jsonObj,
                                                             'comentario') ||
                                               '<span>',
                                               baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                          'usua_id')),
                                                                                             'X'),
                                               V_MSG_MES,
                                               V_NIVEL_APROB || '-' ||
                                               V_cola);
        
          --COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1('000026316','000000044',0,'Trámite Documentario: Aprobación','<span style="color:red;">Documento fue desaprobado en: ' || V_CAMPO1 ||'...'|| ky_json.campo(jsonObj, 'comentario') ||'<span>',302);
        
          /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
          '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b>  fue desaprobado en: <span style="color:red;font-weight:bold;">' || V_CAMPO1||'...'|| ky_json.campo(jsonObj, 'comentario') ||'</span></div>
          <br><br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
        
          --PRIMERO HAY QUE VERIFICAR SI EL DOCUMENTO NO TIENE ESTADO DE EVALUACIÓN ESO INDICA QUE ESTA REGISTRANDO EL ADMINISTRADOR
          SELECT COUNT(*)
            INTO V_EX_ESTADO_EV
            FROM YTRESDO
           WHERE YTRESDO_DOCU_CODE = V_DOC
             AND YTRESDO_OCU_SEQ = V_SEQ
             AND YTRESDO_ESTADO = 'EV';
        
          IF V_EX_ESTADO_EV = 0 THEN
          
            INSERT INTO COMUMGR.YTRESDO
              (YTRESDO_DOCU_CODE,
               YTRESDO_OCU_SEQ,
               YTRESDO_SEQ,
               YTRESDO_ESTADO,
               YTRESDO_FECHA_ACTIVIDAD,
               YTRESDO_USUA_ID,
               YTRESDO_COMENTARIO)
            VALUES
              (V_DOC,
               V_SEQ,
               YTRESDO_SEQ_SEQ.nextval,
               'EV',
               SYSDATE,
               ky_json.campo(jsonObj, 'usua_id'),
               'SYS: se adiciono a evaluación automatico es aprobación por administrador');
          
          END IF;
        
          --SE ENVIA AL ESTADO DE ARCHIVADO
        
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE = 'AR'
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
        
          --REGISTRAMOS EL ESTADO AL QUE PASO EL DOCUMENTO
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_DOC,
             V_SEQ,
             YTRESDO_SEQ_SEQ.nextval,
             'AR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id'),
             ky_json.campo(jsonObj, 'comentario'));
        
          V_MSG := 'OK';
        
        END IF;
      
      ELSE
        --DESAPROBAR POR NIVEL DE RECEPCIÓN DE DOCUMENTO(desaprobar & OBSERVAR DOCUMENTO) ES IGUAL A INI
      
        --SACAMOS LOS ESTADOS
        SELECT NVL(YTRAPDO_ESTA_CODE_PASARA, '00') PASA,
               NVL(YTRAPDO_ESTA_CODE_REGRESA, '00') REGRESA,
               YTRAPDO_METODO
          INTO V_PASA, V_REGRESA, V_METODO
          FROM YTRAPDO
         WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
           AND YTRAPDO_CODE_CODE = V_cola
           AND YTRAPDO_NIVEL = V_NIVEL_APROB
           AND NOT YTRAPDO_IND_ESTADO IN ('E');
      
        SELECT YTRAPDO_DESCRIPCION
          INTO V_CAMPO1
          from YTRAPDO
         WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
           AND YTRAPDO_CODE_CODE = V_cola
           AND YTRAPDO_NIVEL = V_NIVEL_APROB
           AND NOT YTRAPDO_IND_ESTADO IN ('E');
      
        --SACAMOS EL TIPO DE NTREGA PARA GENERAR EL MENSAJE
        SELECT YTRPLAN_IND_OBSERVAR
          INTO V_IND_OBSERVAR
          FROM YTRPLAN
         WHERE YTRPLAN_PROC_CODE || '-' || YTRPLAN_SEQ =
               V_PLAN_CODE || '-' || V_SEQENTREGA;
      
        IF V_IND_OBSERVAR = '0' AND V_ACCION2 = 'OB' THEN
          MSG_EXP_GLOBAL := 'EPR-ERR TIPO DE DOCUMENTO NO PERMITE SER OBSERVADO';
          RAISE EXP_GLOBAL;
        END IF;
        --ACTUALIZAMOS EL ESTADO DE LA APROBACION
        UPDATE YTRAPDO
           SET YTRAPDO_ID_USUA_APROB    = ky_json.campo(jsonObj, 'usua_id'),
               YTRAPDO_IND_ESTADO       = v_aprob_desap,
               YTRAPDO_FECHA_APROBACION = SYSDATE,
               YTRAPDO_COMENTARIO       = ky_json.campo(jsonObj,
                                                        'comentario')
         WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
           AND YTRAPDO_CODE_CODE = V_cola
           AND YTRAPDO_NIVEL = V_NIVEL_APROB
           AND NOT YTRAPDO_IND_ESTADO IN ('E');
      
        -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
      
        IF P_ACCION = 'D' THEN
          V_REGRESA := 'OB';
        END IF;
      
        IF V_ACCION2 = 'AR' THEN
          --SE ENVIA AL ESTADO DE ARCHIVADO
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE = 'AR'
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
        ELSE
          UPDATE YTBDOCU
             SET YTBDOCU_ESTA_CODE = DECODE(ky_json.campo(jsonObj, 'accion'),
                                            'A',
                                            V_PASA,
                                            V_REGRESA)
           WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
        END IF;
      
        /*INSERTAMOS EN LA TABLA DE SEGUIMIENTOS */
      
        --PRIMERO HAY QUE VERIFICAR SI EL DOCUMENTO NO TIENE ESTADO DE EVALUACIÓN ESO INDICA QUE ESTA REGISTRANDO EL ADMINISTRADOR
        SELECT COUNT(*)
          INTO V_EX_ESTADO_EV
          FROM YTRESDO
         WHERE YTRESDO_DOCU_CODE = V_DOC
           AND YTRESDO_OCU_SEQ = V_SEQ
           AND YTRESDO_ESTADO = 'EV';
      
        IF V_EX_ESTADO_EV = 0 THEN
        
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_DOC,
             V_SEQ,
             YTRESDO_SEQ_SEQ.nextval,
             'EV',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id'),
             'SYS: se adiciono a evaluación automatico es aprobación/desaprobación por administrador');
        
        END IF;
        --////////////ENTONCES SE REGISTRA EL SEGUIMEINTO DE ESTADOS COMO ARCHIVADO
        IF V_ACCION2 = 'AR' THEN
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_DOC,
             V_SEQ,
             YTRESDO_SEQ_SEQ.nextval,
             'AR',
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id'),
             'SYS');
        
        ELSE
        
          INSERT INTO COMUMGR.YTRESDO
            (YTRESDO_DOCU_CODE,
             YTRESDO_OCU_SEQ,
             YTRESDO_SEQ,
             YTRESDO_ESTADO,
             YTRESDO_FECHA_ACTIVIDAD,
             YTRESDO_USUA_ID,
             YTRESDO_COMENTARIO)
          VALUES
            (V_DOC,
             V_SEQ,
             YTRESDO_SEQ_SEQ.nextval,
             DECODE(ky_json.campo(jsonObj, 'accion'),
                    'A',
                    V_PASA,
                    V_REGRESA),
             SYSDATE,
             ky_json.campo(jsonObj, 'usua_id'),
             'SYS');
        END IF;
      
        /*  INSERT INTO COMUMGR.YTRCOME (
            YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
            YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
            YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
        VALUES ( SEQ_YTRCOME_CODE.NEXTVAL, V_DOC, V_SEQ,
            sysdate, ky_json.campo(jsonObj, 'usua_id'), 'AUTO',
            '<span style="color:red;">Documento fue desaprobado en: ' || V_CAMPO1  ||' y se envió  a tu bandeja de entrada... ' || ky_json.campo(jsonObj, 'comentario') ||'</span>',
                0,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj, 'usua_id')),'X'));
                                            */
        kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                             V_SEQ,
                                             ky_json.campo(jsonObj,
                                                           'usua_id'),
                                             'AUTO',
                                             '<span style="color:red;">Documento fue desaprobado en: ' ||
                                             V_CAMPO1 ||
                                             ' y se envió  a tu bandeja de entrada... ' ||
                                             ky_json.campo(jsonObj,
                                                           'comentario') ||
                                             '</span>',
                                             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                        'usua_id')),
                                                                                           'X'),
                                             V_MSG_MES,
                                             V_NIVEL_APROB || '-' || V_cola);
      
        --  COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1('000026316','000000044',0,'Trámite Documentario: Aprobación','<span style="color:red;">Documento fue desaprobado en: ' || V_CAMPO1  ||' y se envió  a tu bandeja de entrada... ' || ky_json.campo(jsonObj, 'comentario') ||'</span>',302);
      
        /*COMUMGR.KYCA_GESTION_COMUNICACIONES.PYCA_GUARDAR_MENSAJE1(V_USUA_NOTIFICA,V_USUA_ID,0,'Trámite Documentario: Aprobación de documento '|| V_DOC ||'-'|| V_SEQ ,
        '<div style="padding:15px;font-size:18px;">El documento con codigo <span style="background-color:yellow;color:#000;font-weight:bold;">' || V_DOC ||'-'|| V_SEQ ||'</span> <b>'|| V_ASUNTO || '</b>  fue desaprobado en: <span style="color:red;font-weight:bold;">' || V_CAMPO1||' y se envió  a tu bandeja de entrada... '|| ky_json.campo(jsonObj, 'comentario') ||'</span></div>
        <br><br><a href="?f=YTAMURO" target="_blank">Ir al modulo de trámite documentario</a>',302);*/
      
        --/////CORREMOS EL PROCESO DE SEMBRADO
      
        IF LENGTH(V_METODO) > 3 THEN
          -- V_MSG_PROC:=KYT_EJECUTOR.EJECUTOR_0(V_METODO);
          V_MSG_PROC := KYT_EJECUTOR.EJECUTOR(V_METODO, 'PARAMTEROS');
        
        END IF;
      
      END IF;
    
      V_YTRREDO_CODE := ky_json.campo(jsonObj, 'p_chec');
      --V_YTRREDO_CODE := '00234804',"00234806"';
    
      UPDATE COMUMGR.YTRREDO
         SET YTRREDO_USUA_ID        = ky_json.campo(jsonObj, 'usua_id'),
             YTRREDO_COMENTARIO     = 'Pendiente',
             YTRREDO_IND_ESTADO     = 'P',
             YTRREDO_FECHA_ACEPTADO = SYSDATE
       WHERE YTRREDO_CODE IN
             (select regexp_substr(V_YTRREDO_CODE, '[^,]+', 1, level)
                from dual
              connect by regexp_substr(V_YTRREDO_CODE, '[^,]+', 1, level) is not null)
      --AND DECODE(YTRREDO_TIRE_CODE,'REC',(SELECT count(*)  FROM YTRREPA WHERE YTRREPA_CODE_APP IN (ky_json.campo(jsonObj, 'p_chec')) AND YTRREPA_APPL='REQU'),1)>0
      ;
    
      --************************************************************
      --DESACTIVAR LA MARCA DE ENVIO DE ARCHIVO
      UPDATE COMUMGR.YTRREDO
         SET YTRREDO_IND_ENV_USUA = 'N'
       WHERE YTRREDO_CODE IN
             (select regexp_substr(V_YTRREDO_CODE, '[^,]+', 1, level)
                from dual
              connect by regexp_substr(V_YTRREDO_CODE, '[^,]+', 1, level) is not null);
    
      delete COMUMGR.YTRAPAD
       WHERE YTRAPAD_APPL_REFERENCIA || '-' || YTRAPAD_APPL_CODE IN
             (select 'DOCDOC-' || V_CODEDOC || '-' ||
                     regexp_substr(V_YTRREDO_CODE, '[^,]+', 1, level)
                from dual
              connect by regexp_substr(V_YTRREDO_CODE, '[^,]+', 1, level) is not null);
    
      --LOGICA PARA MODULO DE IMAGNESS
      UPDATE YTDRETRA
         SET YTDRETRA_ATENDIDO = '0'
       WHERE YTDRETRA_ID_USUARIO =
             (SELECT YTBDOCU_USUA_ID
                FROM YTBDOCU
               WHERE YTBDOCU_CODE || '-' || YTBDOCU_PLAN_SEQ = V_CODEDOC)
         AND YTDRETRA_FK_YTRETRA = 1;
    
      V_MSG := 'OK';
    
    END IF; --FIN DESAPROBAR
  
    /*FIN DE APROBACION*/
  
    /*RECEPCIONAR U OBSERVAR DOCUMENTO POR UNIDAD*/
  ELSIF (P_ACCION = 'REC') THEN
  
    --V_CODEDOC:=V_CODEDOC||'-'||'1';
  
    V_MSG := 'ERP-ERR  Registro no pudo ser creado';
  
    --SACAMOS EL CODIGO DEL DOCUMENTO
    SELECT YTBDOCU_CODE,
           YTBDOCU_SEQ,
           DECODE(YTBDOCU_NGS, 'N', 1, NVL(YTBDOCU_ID_USUA_VALIDO, '0')),
           YTBDOCU_TIPO_CODE,
           YTBDOCU_CAEX_CODE
      INTO V_DOC, V_SEQ, V_USUA_VALIDO, V_TIPO_DOC, V_CARPETA
      FROM YTBDOCU
     WHERE YTBDOCU_CODE || '-' || YTBDOCU_SEQ = V_CODEDOC;
  
    SELECT YTRAPDO_NIVEL, YTRAPDO_IND_COPIA
      INTO V_NIVEL_APROB, V_COPIA
      FROM YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
       AND YTRAPDO_SEQ = V_COLA
       AND NOT YTRAPDO_IND_ESTADO IN ('E');
  
    --RECEPCION DE DOCUMENTOS  ENTRANTES O ENTRE UNIDADES ADMINISTRATIVAS
    IF (V_TIPO_DOC = '02' OR V_TIPO_DOC = '05' OR V_TIPO_DOC = '03') THEN
      --DOCSA
    
      --YTRAPDO_NIVEL<V_NIVEL_APROB
      SELECT COUNT(*)
        INTO V_POR_APROBAR
        FROM YTRAPDO
      --WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_CODE_CODE<V_cola AND YTRAPDO_IND_ESTADO IN ('P','D');
       WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
         AND YTRAPDO_NIVEL < V_NIVEL_APROB
         AND YTRAPDO_IND_ESTADO IN ('P', 'D');
      --WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_CODE_CODE<V_cola AND YTRAPDO_IND_ESTADO IN ('P','D');
    
      --//////////////////////VERIFICAMOS SI NO HAY NIVELES INFERIOR POR APROBAR//////////////////////////////////////////////////////////
    
      IF V_POR_APROBAR = 0 THEN
      
        if (kyt_tramite_administrador.FYT_REQUISTOS_PEND_VALIDACION(V_DOC) = '0') THEN
          --verificamos si todos los requistos ya fueron validados
        
          IF (V_USUA_VALIDO <> '0') THEN
            --SACAMOS LOS ESTADOS
          
            SELECT NVL(YTRAPDO_ESTA_CODE_PASARA, '00') PASA,
                   NVL(YTRAPDO_ESTA_CODE_REGRESA, '00') REGRESA,
                   YTRAPDO_DESCRIPCION,
                   YTRAPDO_PRVE_DESC
              INTO V_PASA, V_REGRESA, V_APROB_DESC, V_APROB_ACCION
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_SEQ = V_cola
               AND YTRAPDO_NIVEL = V_NIVEL_APROB
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
          
            --ACTUALIZAMOS EL ESTADO DE LA APROBACION
          
            IF (V_COPIA = 'S') THEN
              --SI ES COPIA ENTONCES EL NIVEL SE APROBARA NO PUEDE HACER OTRA COSA
            
              UPDATE YTRAPDO
                 SET YTRAPDO_ID_USUA_APROB = V_USUA_APROB,
                     -- YTRAPDO_IND_ESTADO=ky_json.campo(jsonObj, 'accion'),
                     YTRAPDO_USUA_RECEPCIONO  = V_USUA_APROB,
                     YTRAPDO_FECHA_RECEPCIONO = SYSDATE,
                     YTRAPDO_IND_ESTADO       = 'A',
                     YTRAPDO_FECHA_APROBACION = SYSDATE,
                     YTRAPDO_COMENTARIO       = ky_json.campo(jsonObj,
                                                              'comentario')
               WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                     V_CODEDOC
                 AND YTRAPDO_SEQ = V_cola
                 AND YTRAPDO_NIVEL = V_NIVEL_APROB;
              -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
              IF P_ACCION = 'D' THEN
                V_REGRESA := 'OB';
              END IF;
            
            ELSE
              UPDATE YTRAPDO
                 SET YTRAPDO_ID_USUA_APROB = V_USUA_APROB,
                     -- YTRAPDO_IND_ESTADO=ky_json.campo(jsonObj, 'accion'),
                     YTRAPDO_USUA_RECEPCIONO  = V_USUA_APROB,
                     YTRAPDO_FECHA_RECEPCIONO = SYSDATE,
                     --   YTRAPDO_FECHA_APROBACION=SYSDATE,
                     YTRAPDO_COMENTARIO = ky_json.campo(jsonObj,
                                                        'comentario')
               WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                     V_CODEDOC
                 AND YTRAPDO_SEQ = V_cola
                 AND YTRAPDO_NIVEL = V_NIVEL_APROB;
              -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
              IF P_ACCION = 'D' THEN
                V_REGRESA := 'OB';
              END IF;
            END IF;
          
            --////////////////////////// RECEP:1 RECEPCION DE DOCUMENTOS DE LA CARPETA
            IF V_CARPETA IS NOT NULL THEN
              V_CANTIDAD_PA := 0;
              V_CANTIDAD_AP := 0;
              --|||||||||OBTENEMOS EL NIVEL DE LA COLA A APROBAR EN LOS DOCUMENTOS DE LA CARPETA
              SELECT YTRAPDO_SEQ_DCA
                INTO V_SEQ_HEREDADO
                FROM YTRAPDO
               WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                     V_CODEDOC
                 AND YTRAPDO_SEQ = V_cola
                 AND YTRAPDO_NIVEL = V_NIVEL_APROB;
            
              --|||||||||INICIAMOS A APROBAR LOS DOCUMENTOS DE LA CARPETA
              OPEN C_DOC_CARP(V_CARPETA);
              LOOP
                FETCH C_DOC_CARP
                  INTO C_DOC_CARP_ROW;
                EXIT WHEN C_DOC_CARP%NOTFOUND;
              
                UPDATE YTRAPDO
                   SET YTRAPDO_ID_USUA_APROB = V_USUA_APROB,
                       -- YTRAPDO_IND_ESTADO=ky_json.campo(jsonObj, 'accion'),
                       YTRAPDO_USUA_RECEPCIONO  = V_USUA_APROB,
                       YTRAPDO_FECHA_RECEPCIONO = SYSDATE,
                       --   YTRAPDO_FECHA_APROBACION=SYSDATE,
                       YTRAPDO_COMENTARIO = 'APROBACIÓN MASIVA DOC: ' ||
                                            V_CODEDOC || ' SECUENCIA ' ||
                                            V_cola
                 WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                       C_DOC_CARP_ROW.YTRDOCA_DOCU_CODE || '-' ||
                       C_DOC_CARP_ROW.YTRDOCA_DOCU_SEQ
                   AND YTRAPDO_SEQ = V_SEQ_HEREDADO;
              
                IF SQL%ROWCOUNT > 0 THEN
                  V_CANTIDAD_AP := V_CANTIDAD_AP + 1;
                END IF;
              
                V_CANTIDAD_PA := V_CANTIDAD_PA + 1;
              END LOOP;
              CLOSE C_DOC_CARP;
            
              --|||||||||ACTUALIZAR EL RESUMEN DE ACTUALIZACIÓN AL NIVEL
              UPDATE YTRAPDO
                 SET YTRAPDO_COMENTARIO = YTRAPDO_COMENTARIO ||
                                          ' APROBADOS: ' || V_CANTIDAD_AP ||
                                          ' DE ' || V_CANTIDAD_PA
               WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ =
                     V_CODEDOC
                 AND YTRAPDO_SEQ = V_cola
                 AND YTRAPDO_NIVEL = V_NIVEL_APROB;
              --
            END IF;
          
            --///////////////////////// RECEP:1 FIN RECEPCIÓN
          
            kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                                 V_SEQ,
                                                 ky_json.campo(jsonObj,
                                                               'usua_id'),
                                                 'AUTO',
                                                 'Documento fue recepcionado en el nivel de aprobación <span style="color:red;FONT-SIZE:18PX;">' ||
                                                 V_NIVEL_APROB || ' ' ||
                                                 V_APROB_DESC ||
                                                 ' Ejecuto lo siguiente ' ||
                                                 V_APROB_ACCION ||
                                                 '</span> ' ||
                                                 ky_json.campo(jsonObj,
                                                               'comentario'),
                                                 baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                            'usua_id')),
                                                                                               'X'),
                                                 V_MSG_MES,
                                                 V_NIVEL_APROB || '-' ||
                                                 V_cola);
          
            /*    SELECT COUNT(*) INTO V_FALTA_APROBAR FROM  YTRAPDO
                   WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_IND_ESTADO <> 'A'  AND NOT YTRAPDO_IND_ESTADO IN('E');
            
            IF(V_FALTA_APROBAR=0) THEN
               UPDATE YTBDOCU SET YTBDOCU_ESTA_CODE='CO'
               WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC;
            
               UPDATE YTBDOCU SET YTBDOCU_ESTA_CODE='AT'
               WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC;
             --END IF
               --VERIFICAR SI DOCUMENTO PASO A ESTADO DE COMPLETOS
             --  SELECT COUNT(*) INTO V_COMPLETO FROM YTBDOCU WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC AND YTBDOCU_ESTA_CODE='CO';
               --APLICAMOS LOS CODIGOS FINALES DEL TRAMITE
               --OBTENER EL CODIGO DEL PLANTILLA PARA ACTUALIZAR EL SECUENCIAL
               --IF(V_COMPLETO>0) THEN
                   SELECT YTBDOCU_PLAN_PROC_CODE INTO V_PLAN_CODE FROM YTBDOCU  WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=V_CODEDOC;
                           --NUMERACION DE DOCUMENTO SACAMOS UN NUMERO TEMPORAL SE ASIGNARA EL VARDADERO NUMERO AL ENTREGAR EL DOCUMENTO
                   SELECT YTRNUDO_NUMERACION_ACT+1 INTO V_NUMERO FROM YTRNUDO WHERE YTRNUDO_PROC_CODE=V_PLAN_CODE;
                   UPDATE YTRNUDO SET YTRNUDO_NUMERACION_ACT=YTRNUDO_NUMERACION_ACT+1  WHERE YTRNUDO_PROC_CODE=V_PLAN_CODE;
            
                   UPDATE YTBDOCU SET YTBDOCU_FECHA_COMPLETO=SYSDATE,YTBDOCU_NUMERO=V_NUMERO
                   WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC AND YTBDOCU_NUMERO<0 AND YTBDOCU_FECHA_COMPLETO IS NULL; --PARA CREAR NUMERACIÓN SOLO UNA VEZ
            
                   --REGISTRAMOS EL ESTADO DEL DOCUMENTO
            
               INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                           YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
               VALUES (V_DOC,V_SEQ,YTRESDO_SEQ_SEQ.nextval, 'AT', SYSDATE,ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'comentario'));
               V_MSG:='DOCUMENTO FUE ATENDIDO CORRECTAMENTE';
            
               END IF; */
          
            V_MSG := 'OK';
          
          ELSE
            V_MSG := 'ERP-ERR No se puede aprobar un documento si no está validado... Clic en botón validar documento de la bandeja de entrada';
          END IF;
        ELSE
          --requisirtos pendeienstes de validación
          V_MSG := 'ERP-ERR Para poder iniciar el proceso de aprobación todos los requisitos deben estar validados';
        END IF;
      ELSE
        V_MSG := 'ERP-ERR No puedes aprobar este nivel si hay un nivel inferior sin aprobar ' ||
                 V_cola;
      END IF;
    
      /*FIN DE APROBACION*/
    
    ELSIF (V_TIPO_DOC = '05') THEN
    
      --YTRAPDO_NIVEL<V_NIVEL_APROB
      SELECT COUNT(*)
        INTO V_POR_APROBAR
        FROM YTRAPDO
      --WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_CODE_CODE<V_cola AND YTRAPDO_IND_ESTADO IN ('P','D');
       WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
         AND YTRAPDO_NIVEL < V_NIVEL_APROB
         AND YTRAPDO_IND_ESTADO IN ('P', 'D');
    
      IF V_POR_APROBAR = 0 THEN
        --VERIFICAMOS SI NO HAY NIVELES INFERIOR POR APROBAR
      
        if (kyt_tramite_administrador.FYT_REQUISTOS_PEND_VALIDACION(V_DOC) = '0') THEN
          --verificamos si todos los requistos ya fueron validados
        
          IF (V_USUA_VALIDO <> '0') THEN
            --SACAMOS LOS ESTADOS
            SELECT NVL(YTRAPDO_ESTA_CODE_PASARA, '00') PASA,
                   NVL(YTRAPDO_ESTA_CODE_REGRESA, '00') REGRESA
              INTO V_PASA, V_REGRESA
              FROM YTRAPDO
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_SEQ = V_cola
               AND YTRAPDO_NIVEL = V_NIVEL_APROB
               AND NOT YTRAPDO_IND_ESTADO IN ('E');
          
            UPDATE YTRAPDO
               SET YTRAPDO_IND_TD = 'N'
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_SEQ = V_cola
               AND YTRAPDO_NIVEL < V_NIVEL_APROB;
          
            --ACTUALIZAMOS EL ESTADO DE LA APROBACION
          
            UPDATE YTRAPDO
               SET YTRAPDO_ID_USUA_APROB = ky_json.campo(jsonObj, 'usua_id'),
                   --  YTRAPDO_IND_ESTADO=ky_json.campo(jsonObj, 'accion'),
                   YTRAPDO_USUA_RECEPCIONO  = ky_json.campo(jsonObj,
                                                            'usua_id'),
                   YTRAPDO_FECHA_RECEPCIONO = SYSDATE,
                   -- YTRAPDO_FECHA_APROBACION=SYSDATE,
                   YTRAPDO_COMENTARIO = ky_json.campo(jsonObj, 'comentario'),
                   YTRAPDO_IND_TD     = 'S'
             WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
               AND YTRAPDO_SEQ = V_cola
               AND YTRAPDO_NIVEL = V_NIVEL_APROB;
            -- ACTUALIZAMOS EL ESTADO DEL DOCUMENTO
            IF P_ACCION = 'D' THEN
              V_REGRESA := 'OB';
            END IF;
            kyt_docu_docu.KYT_GUARDAR_COMENTARIO(V_DOC,
                                                 V_SEQ,
                                                 ky_json.campo(jsonObj,
                                                               'usua_id'),
                                                 'AUTO',
                                                 'Documento fue recepcionado en el nivel de aprobación ' ||
                                                 V_NIVEL_APROB || ' ' ||
                                                 ky_json.campo(jsonObj,
                                                               'comentario'),
                                                 baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                                                            'usua_id')),
                                                                                               'X'),
                                                 V_MSG_MES,
                                                 V_NIVEL_APROB || '-' ||
                                                 V_cola);
          
            --NO APLICA NO SE PUEDE COMPLETAR LA COLA AUTOMATICAMENTE HAY UN PROCESO DE DERIVACIÓN/COMPLETAR DOCUMENTO
          
            /*
            
            SELECT COUNT(*) INTO V_FALTA_APROBAR FROM  YTRAPDO
            WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=V_CODEDOC AND YTRAPDO_IND_ESTADO <> 'A'  AND NOT YTRAPDO_IND_ESTADO IN('E');
            
             IF(V_FALTA_APROBAR=0) THEN
                    UPDATE YTBDOCU SET YTBDOCU_ESTA_CODE='CO'
                    WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC;
            
                    UPDATE YTBDOCU SET YTBDOCU_ESTA_CODE='AT'
                     WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC;
                    --END IF
            
            
                    --VERIFICAR SI DOCUMENTO PASO A ESTADO DE COMPLETOS
            
                     --  SELECT COUNT(*) INTO V_COMPLETO FROM YTBDOCU WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC AND YTBDOCU_ESTA_CODE='CO';
            
                    --APLICAMOS LOS CODIGOS FINALES DEL TRAMITE
                    --OBTENER EL CODIGO DEL PLANTILLA PARA ACTUALIZAR EL SECUENCIAL
            
                    --IF(V_COMPLETO>0) THEN
                    SELECT YTBDOCU_PLAN_PROC_CODE INTO V_PLAN_CODE FROM YTBDOCU  WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=V_CODEDOC;
                        --NUMERACION DE DOCUMENTO SACAMOS UN NUMERO TEMPORAL SE ASIGNARA EL VARDADERO NUMERO AL ENTREGAR EL DOCUMENTO
                    SELECT YTRNUDO_NUMERACION_ACT+1 INTO V_NUMERO FROM YTRNUDO WHERE YTRNUDO_PROC_CODE=V_PLAN_CODE;
                    UPDATE YTRNUDO SET YTRNUDO_NUMERACION_ACT=YTRNUDO_NUMERACION_ACT+1  WHERE YTRNUDO_PROC_CODE=V_PLAN_CODE;
            
                    UPDATE YTBDOCU SET YTBDOCU_FECHA_COMPLETO=SYSDATE,YTBDOCU_NUMERO=V_NUMERO
                    WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=V_CODEDOC AND YTBDOCU_NUMERO<0 AND YTBDOCU_FECHA_COMPLETO IS NULL; --PARA CREAR NUMERACIÓN SOLO UNA VEZ
            
                    --REGISTRAMOS EL ESTADO DEL DOCUMENTO
            
                    INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                        YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                        VALUES (V_DOC,V_SEQ,YTRESDO_SEQ_SEQ.nextval, 'AT', SYSDATE,ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'comentario'));
                        V_MSG:='DOCUMENTO FUE ATENDIDO CORRECTAMENTE';
            
                END IF;*/
          
            V_MSG := 'OK';
          
          ELSE
            V_MSG := 'ERP-ERR No se puede aprobar un documento si no está validado... Clic en botón validar documento de la bandeja de entrada';
          END IF;
        ELSE
          --requisirtos pendeienstes de validación
          V_MSG := 'ERP-ERR Para poder iniciar el proceso de aprobación todos los requisitos deben estar validados';
        END IF;
      ELSE
        V_MSG := 'ERP-ERR No puedes aprobar este nivel si hay un nivel inferior sin aprobar ' ||
                 V_cola;
      END IF;
    
    ELSE
      --ACTUALIZAMOS EL ESTADO DE LA APROBACION
      UPDATE YTRAPDO
         SET YTRAPDO_USUA_RECEPCIONO  = ky_json.campo(jsonObj, 'usua_id'),
             YTRAPDO_FECHA_RECEPCIONO = SYSDATE,
             YTRAPDO_COMENTARIO       = ky_json.campo(jsonObj, 'comentario')
       WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
         AND YTRAPDO_SEQ = V_cola
         AND YTRAPDO_NIVEL = V_NIVEL_APROB;
    
      SELECT YTRAPDO_DESCRIPCION
        INTO V_CAMPO1
        from YTRAPDO
       WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ = V_CODEDOC
         AND YTRAPDO_SEQ = V_cola
         AND YTRAPDO_NIVEL = V_NIVEL_APROB;
    
      /*INSERTAMOS EN LA TABLA DE SEGUIMIENTOS */
      INSERT INTO COMUMGR.YTRCOME
        (YTRCOME_CODE,
         YTRCOME_DOCU_CODE,
         YTRCOME_DOCU_SEQ,
         YTRCOME_FECHA_ACTIVIDAD,
         YTRCOME_USUA_ID,
         YTRCOME_TICO_CODE,
         YTRCOME_MENSAJE,
         YTRCOME_NOTI_CORREO,
         YTRCOME_USUA_NOMBRE)
      VALUES
        (SEQ_YTRCOME_CODE.NEXTVAL,
         V_DOC,
         V_SEQ,
         sysdate,
         ky_json.campo(jsonObj, 'usua_id'),
         'AUTO',
         'Documento fue recepcionado en: ' || V_CAMPO1,
         0,
         baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(ky_json.campo(jsonObj,
                                                                                                                    'usua_id')),
                                                       'X'));
    
      v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
    END IF;
  
  ELSIF (P_ACCION = 'ACT') THEN
  
    V_CODEDOC := ky_json.campo(jsonObj, 'pk');
    --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
    SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO, 1, 1) COAS,
           SUBSTR(TB.YTRUNID_ORGN_UPAO, 2, 10) CODE
      INTO V_COAS, V_CODEORG
      FROM YTRUNID TA, YTRUNID TB
     WHERE TA.YTRUNID_CODE = v_DEPENDENCIA
       AND TA.YTRUNID_PADRE = TB.YTRUNID_CODE;
  
    UPDATE COMUMGR.YTRAPDO
       SET YTRAPDO_ORGN_CODE       = V_CODEORG,
           YTRAPDO_COAS_CODE       = v_coas,
           YTRAPDO_DESCRIPCION     = v_DEPENDENCIA_desc,
           YTRAPDO_NIVEL           = ky_json.campo(jsonObj, 'nivel'),
           YTRAPDO_PRVE_CODE       = ky_json.campo(jsonObj, 'proveido_code'),
           YTRAPDO_PRVE_DESC       = ky_json.campo(jsonObj,
                                                   'descripcion_desc'),
           YTRAPDO_COMENTARIO      = ky_json.campo(jsonObj, 'comentario'),
           YTRAPDO_FECHA_ACTIVIDAD = SYSDATE,
           YTRAPDO_UNID_CODE       = v_DEPENDENCIA
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ || '-' ||
           YTRAPDO_SEQ = V_CODEDOC;
  
    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
  
  ELSIF (P_ACCION = 'ELI') THEN
    v_pk := trim(ky_json.campo(jsonObj, 'ytrapdo_pk'));
    DELETE YTRAPDO
     WHERE YTRAPDO_DOCU_CODE || '-' || YTRAPDO_DOCU_SEQ || '-' ||
           YTRAPDO_SEQ = v_pk
       AND YTRAPDO_IND_ESTADO <> 'A';
  
    IF (SQL%ROWCOUNT > 0) THEN
      v_msg := 'TRANSACCIÓN APLICADA';
    ELSE
      v_msg := 'ERP-ERR NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS';
    END IF;
  ELSE
    v_msg := 'NO HAY CAMBIOS POR APLICAR';
  END IF;

  COMMIT;

exception
  WHEN EX_NO_BC  THEN--- MCL 18/03/2025
        ROLLBACK;
        v_msg := 'ERP-ERR NO PUEDE MOVER UN DOCUMENTO EN BORRADOR CADUCADO ';
  WHEN EX_NOPERTENECE THEN
    ROLLBACK;
    v_msg := 'ERP-ERR NO PUEDES DERIVAR EL DOCUMENTO SI NO PERTENECES A LA ÚLTIMA UNIDAD QUE APROBÓ EL DOCUMENTO';
  WHEN EX_NO_APR_NIV THEN
    ROLLBACK;
    v_msg := 'ERP-ERR NO PUEDES DERIVAR NO SE APROBO SU NIVEL';
  WHEN EXP_FALTA_APROBAR THEN
    ROLLBACK;
    V_MSG := V_MSG_1;
  WHEN EX_FALTA_APROB THEN
    ROLLBACK;
    v_msg := 'ERP-ERR NO PUEDES DERIVAR SI EXISTE UN NIVEL SIN APROBAR ' ||
             V_CODEDOC_1;
  WHEN EXP_PER_PAGO THEN
    rollback;
    v_msg := 'ERP-ERR NO HAY PERIODO CONFIGURADO PARA TRANSACCIÓN ECONOMICA' ||
             ' Documento:' || V_CODEDOC_1 || ':::: CODIGO ERROR (' ||
             P_ACCION || ') ::: ';
    comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                 'EW',
                                                 'TD',
                                                 'DO',
                                                 'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTRAPDO_AUD',
                                                 v_msg || P_DATA,
                                                 ky_json.campo(jsonObj,
                                                               'usua_id'),
                                                 '');
  WHEN EXP_PAGO_BANCO THEN
    v_msg := 'ERP-ERR NO SE ASIGNO PAGO A BANCO' || V_MSG_BANCO ||
             ' Documento:' || V_CODEDOC;
    rollback;
    comumgr.kyt_manejo_errores.PYG_INSERTA_ERROR('CAMP-00002',
                                                 'EW',
                                                 'TD',
                                                 'DO',
                                                 'kyt_docu_docu.KYT_DOCU_DOCU_PP_YTRAPDO_AUD',
                                                 v_msg,
                                                 ky_json.campo(jsonObj,
                                                               'usua_id'),
                                                 '');
  
  WHEN EXP_GLOBAL THEN
    ROLLBACK;
    v_msg := MSG_EXP_GLOBAL;
  
  when OTHERS then
  
    ROLLBACK;
    v_msg := 'ERP-ERR ' || SQLERRM || '--' || v_msg;
  
  -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;




/*FIN METODOS DE TABLA YTRAPDO*/



/*METODOS DE TABLA YTAORRE*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/


procedure KYT_DOCU_DOCU_PP_YTAORRE_CUR2(P_ACCION IN VARCHAR2,P_DATA in varchar2,CURSOR_OUT OUT T_CURSOR,CURSOR_OUT1 OUT T_CURSOR)
     is
v_PIDM int;
v_documento varchar2(20);
v_usua_id varchar2(20);
begin
  V_PIDM:=0;

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_documento:=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));
   v_usua_id:=trim(ky_json.campo(jsonObj, 'usua_id'));

   OPEN CURSOR_OUT  FOR
      SELECT YTAORRE_CODE PK_ACCION ,YTAORRE_CODE CODE, YTAORRE_DESCRIPCION DESCRIPCION, YTAORRE_COMENTARIO COMENTARIO,
                YTAORRE_FECHA_ACTIVIDAD FECHA, YTAORRE_ID_REPARTIDOR ID_REPARTIDOR, YTAORRE_IND_ESTADO IND_ESTADO,
                TO_CHAR(YTAORRE_FECHA_INICIO,'DD/MM/YYYY') FECHA_INICIO, TO_CHAR(YTAORRE_FECHA_FIN,'DD/MM/YYYY') FECHA_FIN, YTAORRE_FECHA_COMPLETO FECHA_COMPLETO,
                YTAORRE_HORA_SALIDA HORA_SALIDA, YTAORRE_HORA_REGRESO HORA_REGRESO, YTAORRE_USUA_ID USUA_ID,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(YTAORRE_ID_REPARTIDOR),'X') NOM_USUARIO
                FROM COMUMGR.YTAORRE
                WHERE YTAORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));

OPEN CURSOR_OUT1  FOR
     SELECT
        YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ PK_ACCION ,YTRORRE_DOCU_CODE DOCU_CODE, YTRORRE_DOCU_SEQ DOCU_SEQ, YTRORRE_ORRE_CODE ORRE_CODE,
        YTRORRE_FECHA_ACTIVIDAD FECHA, YTRORRE_USUA_ID USUA_ID, YTRORRE_IND_ESTADO IND_ESTADO,
        YTRORRE_COMENTARIO COMENTARIO, YTRORRE_USUA_ID_RECEPCIONO USUA_ID_RECEPCIONO, YTRORRE_FECHA_RECEPCIONO FECHA_RECEPCIONO,
        YTBDOCU_ASUNTO ASUNTO,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES DE,YTRAPDO_DESCRIPCION APROBADOR,YTRAPDO_PRVE_DESC PROVEIDO,YTRAPDO_NIVEL NIVEL
    FROM COMUMGR.YTRORRE,YTBDOCU,YTRAPDO,YTVPRVE
    WHERE YTRORRE_ORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk')) AND YTRORRE_IND_ESTADO<>'E' --E:ELIMINADO
    AND YTRORRE_DOCU_CODE=YTBDOCU_CODE
    AND YTRORRE_DOCU_SEQ=YTBDOCU_SEQ
    AND YTRORRE_DOCU_CODE=YTRAPDO_DOCU_CODE
    AND YTRORRE_DOCU_SEQ=YTRAPDO_DOCU_SEQ
    AND YTRAPDO_IND_ESTADO='P' --DEBE ESTAR PENDIENTE DE APROBACIÓN
    AND YTRAPDO_PRVE_CODE=YTVPRVE_CODE
    AND YTVPRVE_GENERA_MOV_DOC='S'
    ORDER BY YTRAPDO_DESCRIPCION,YTRORRE_FECHA_ACTIVIDAD DESC,YTRAPDO_NIVEL ASC;


   -- SELECT YTRAPDO_DESCRIPCION,YTRAPDO_PRVE_DESC,YTRAPDO_NIVEL  FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE='0000000040' AND YTRAPDO_DOCU_SEQ='1'




exception when OTHERS then
ROLLBACK;
        raise_application_error(-20001,'Error al listar ');
end;


PROCEDURE KYT_DOCU_DOCU_PP_YTAORRE_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
     is

    code varchar2(20);
     v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc VARCHAR2(50);
    begin

    jsonObj := json(P_DATA);
    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT YTAORRE_CODE PK_ACCION ,YTAORRE_CODE CODE, YTAORRE_DESCRIPCION DESCRIPCION, YTAORRE_COMENTARIO COMENTARIO,
                YTAORRE_FECHA_ACTIVIDAD FECHA, YTAORRE_ID_REPARTIDOR ID_REPARTIDOR, YTAORRE_IND_ESTADO IND_ESTADO,
                TO_CHAR(YTAORRE_FECHA_INICIO,'DD/MM/YYYY') FECHA_INICIO, TO_CHAR(YTAORRE_FECHA_FIN,'DD/MM/YYYY') FECHA_FIN, YTAORRE_FECHA_COMPLETO FECHA_COMPLETO,
                YTAORRE_HORA_SALIDA HORA_SALIDA, YTAORRE_HORA_REGRESO HORA_REGRESO, YTAORRE_USUA_ID USUA_ID
                FROM COMUMGR.YTAORRE
                WHERE YTAORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));

    ELSIF(P_ACCION='FIT')    THEN
    OPEN CURSOR_OUT  FOR
    SELECT YTVINST_CODE CODE, YTVINST_DESCRIPCION TITULO
        FROM COMUMGR.YTVINST
        WHERE YTVINST_IND_ESTADO='A'
        AND upper(YTVINST_DESCRIPCION) LIKE '%'|| upper(ky_json.campo(jsonObj, 'p_filtro')) ||'%'

        ORDER BY 2;

    ELSE   --LIS

     v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

    SELECT COUNT(*) INTO  V_NUM_REG FROM YTAORRE ;

        OPEN CURSOR_OUT  FOR
          SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
            YTAORRE_CODE PK_ACCION ,YTAORRE_CODE CODE, YTAORRE_DESCRIPCION DESCRIPCION, YTAORRE_COMENTARIO COMENTARIO,
            YTAORRE_FECHA_ACTIVIDAD FECHA, YTAORRE_ID_REPARTIDOR ID_REPARTIDOR, YTAORRE_IND_ESTADO IND_ESTADO,
            TO_CHAR(YTAORRE_FECHA_INICIO,'DD/MM/YYYY') FECHA_INICIO, TO_CHAR(YTAORRE_FECHA_FIN,'DD/MM/YYYY') FECHA_FIN, YTAORRE_FECHA_COMPLETO FECHA_COMPLETO,
            YTAORRE_HORA_SALIDA HORA_SALIDA, YTAORRE_HORA_REGRESO HORA_REGRESO, YTAORRE_USUA_ID USUA_ID,
            (SELECT COUNT(*) FROM YTRORRE  WHERE YTRORRE_ORRE_CODE=YTAORRE_CODE AND YTRORRE_IND_ESTADO='P') NUM_DOC
        FROM COMUMGR.YTAORRE order by YTAORRE_FECHA_ACTIVIDAD desc) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;



    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar '||SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTAORRE_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');


   IF(P_ACCION='ADI') THEN

select decode(MAX(YTAORRE_CODE),null,1,MAX(YTAORRE_CODE)+1) into v_code from  YTAORRE;

    INSERT INTO COMUMGR.YTAORRE (YTAORRE_CODE, YTAORRE_DESCRIPCION, YTAORRE_COMENTARIO,
            YTAORRE_FECHA_ACTIVIDAD, YTAORRE_ID_REPARTIDOR, YTAORRE_IND_ESTADO,
            YTAORRE_FECHA_INICIO, YTAORRE_FECHA_FIN, YTAORRE_FECHA_COMPLETO,
            YTAORRE_HORA_SALIDA, YTAORRE_HORA_REGRESO, YTAORRE_USUA_ID)
    VALUES ( LPAD(v_code,6,'0'),
            ky_json.campo(jsonObj, 'descripcion'),
            ky_json.campo(jsonObj, 'comentario'),
            sysdate,
            ky_json.campo(jsonObj, 'id_repartidor'),
            ky_json.campo(jsonObj, 'ind_estado'),
            ky_json.campo(jsonObj, 'fecha_inicio'),
            ky_json.campo(jsonObj, 'fecha_fin'),
            ky_json.campo(jsonObj, 'fecha_completo'),
            ky_json.campo(jsonObj, 'hora_salida'),
            ky_json.campo(jsonObj, 'hora_fin'),
            ky_json.campo(jsonObj, 'usua_id'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

        --GENERAR ORDEN DE REPARTO
        COMMIT;

   ELSIF(P_ACCION='ACT') THEN


        UPDATE COMUMGR.YTAORRE
        SET     YTAORRE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
                YTAORRE_COMENTARIO      = ky_json.campo(jsonObj, 'comentario'),
                YTAORRE_ID_REPARTIDOR   = ky_json.campo(jsonObj, 'id_repartidor'),
                YTAORRE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                YTAORRE_FECHA_INICIO    = ky_json.campo(jsonObj, 'fecha_inicio'),
                YTAORRE_FECHA_FIN       = ky_json.campo(jsonObj, 'fecha_fin'),
                YTAORRE_HORA_SALIDA     = ky_json.campo(jsonObj, 'hora_salida'),
                YTAORRE_HORA_REGRESO    = ky_json.campo(jsonObj, 'hora_fin'),
                YTAORRE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id')
        WHERE  YTAORRE_CODE            = trim(ky_json.campo(jsonObj, 'ytaorre_pk'));
COMMIT;
 IF(SQL%ROWCOUNT>0) THEN
     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA' ;
     ELSE
      v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR EL REGISTRO NO SE ENCONTRO]' ;
     END IF;



   ELSIF(P_ACCION='ELI') THEN
     DELETE YTAORRE WHERE YTAORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));

     IF(SQL%ROWCOUNT>0) THEN
     v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
      v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;

   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;




    exception when OTHERS then
    ROLLBACK;
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTAORRE*/



/*METODOS DE TABLA YTRORRE*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/


procedure KYT_DOCU_DOCU_PP_YTRORRE_CUR2(P_ACCION IN VARCHAR2,P_DATA in varchar2,CURSOR_OUT OUT T_CURSOR,CURSOR_OUT1 OUT T_CURSOR)
     is
v_PIDM int;
v_documento varchar2(20);
v_usua_id varchar2(20);
begin
  V_PIDM:=0;

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_documento:=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));
   v_usua_id:=trim(ky_json.campo(jsonObj, 'usua_id'));

   OPEN CURSOR_OUT  FOR
      SELECT YTAORRE_CODE PK_ACCION ,YTAORRE_CODE CODE, YTAORRE_DESCRIPCION DESCRIPCION, YTAORRE_COMENTARIO COMENTARIO,
                YTAORRE_FECHA_ACTIVIDAD FECHA, YTAORRE_ID_REPARTIDOR ID_REPARTIDOR, YTAORRE_IND_ESTADO IND_ESTADO,
                TO_CHAR(YTAORRE_FECHA_INICIO,'DD/MM/YYYY') FECHA_INICIO, TO_CHAR(YTAORRE_FECHA_FIN,'DD/MM/YYYY') FECHA_FIN, YTAORRE_FECHA_COMPLETO FECHA_COMPLETO,
                YTAORRE_HORA_SALIDA HORA_SALIDA, YTAORRE_HORA_REGRESO HORA_REGRESO, YTAORRE_USUA_ID USUA_ID,baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(YTAORRE_ID_REPARTIDOR),'X') NOM_USUARIO
                FROM COMUMGR.YTAORRE
                WHERE YTAORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));

OPEN CURSOR_OUT1  FOR
     SELECT
        YTRORRE_DOCU_CODE||YTRORRE_DOCU_SEQ PK_ACCION ,YTRORRE_DOCU_CODE DOCU_CODE, YTRORRE_DOCU_SEQ DOCU_SEQ, YTRORRE_ORRE_CODE ORRE_CODE,
        YTRORRE_FECHA_ACTIVIDAD FECHA, YTRORRE_USUA_ID USUA_ID, YTRORRE_IND_ESTADO IND_ESTADO,
        YTRORRE_COMENTARIO COMENTARIO, YTRORRE_USUA_ID_RECEPCIONO USUA_ID_RECEPCIONO, YTRORRE_FECHA_RECEPCIONO FECHA_RECEPCIONO111
    FROM COMUMGR.YTRORRE
    WHERE YTRORRE_ORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk11111'))
    ORDER BY YTRORRE_FECHA_ACTIVIDAD DESC;




exception when OTHERS then
ROLLBACK;
        raise_application_error(-20001,'Error al listar ');
end;


PROCEDURE KYT_DOCU_DOCU_PP_YTRORRE_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
     is

    code varchar2(20);
     v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc VARCHAR2(50);
    begin

    jsonObj := json(P_DATA);
    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT YTAORRE_CODE PK_ACCION ,YTAORRE_CODE CODE, YTAORRE_DESCRIPCION DESCRIPCION, YTAORRE_COMENTARIO COMENTARIO,
                YTAORRE_FECHA_ACTIVIDAD FECHA, YTAORRE_ID_REPARTIDOR ID_REPARTIDOR, YTAORRE_IND_ESTADO IND_ESTADO,
                TO_CHAR(YTAORRE_FECHA_INICIO,'DD/MM/YYYY') FECHA_INICIO, TO_CHAR(YTAORRE_FECHA_FIN,'DD/MM/YYYY') FECHA_FIN, YTAORRE_FECHA_COMPLETO FECHA_COMPLETO,
                YTAORRE_HORA_SALIDA HORA_SALIDA, YTAORRE_HORA_REGRESO HORA_REGRESO, YTAORRE_USUA_ID USUA_ID
                FROM COMUMGR.YTAORRE
                WHERE YTAORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));

    ELSIF(P_ACCION='FIT')    THEN
    OPEN CURSOR_OUT  FOR
    SELECT YTVINST_CODE CODE, YTVINST_DESCRIPCION TITULO
        FROM COMUMGR.YTVINST
        WHERE YTVINST_IND_ESTADO='A'
        AND upper(YTVINST_DESCRIPCION) LIKE '%'|| upper(ky_json.campo(jsonObj, 'p_filtro')) ||'%'

        ORDER BY 2;

    ELSE   --LIS

     v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

   -- SELECT COUNT(*) INTO  V_NUM_REG FROM YTAORRE ;

        OPEN CURSOR_OUT  FOR
           SELECT YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ PK_ACCION ,YTRORRE_DOCU_CODE DOCU_CODE, YTRORRE_DOCU_SEQ DOCU_SEQ, YTRORRE_ORRE_CODE ORRE_CODE,
            YTRORRE_FECHA_ACTIVIDAD FECHA, YTRORRE_USUA_ID USUA_ID, YTRORRE_IND_ESTADO IND_ESTADO,
            YTRORRE_COMENTARIO COMENTARIO, YTRORRE_USUA_ID_RECEPCIONO USUA_ID_RECEPCIONO, YTRORRE_FECHA_RECEPCIONO FECHA_RECEPCIONO,
            YTBDOCU_ASUNTO ASUNTO

        FROM COMUMGR.YTRORRE,YTBDOCU
    WHERE YTRORRE_ORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk')) AND YTRORRE_IND_ESTADO<>'E' --E:ELIMINADO
    AND YTRORRE_DOCU_CODE=YTBDOCU_CODE
    AND YTRORRE_DOCU_SEQ=YTBDOCU_SEQ
    ORDER BY YTRORRE_FECHA_ACTIVIDAD DESC;



    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar '||SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRORRE_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_docu_code varchar2(20);
    v_existe int;
    V_DOCU_CODE1 VARCHAR2(30);
    V_DOCU_SEQ INT;
    V_ESTADO VARCHAR2(3);
    V_ESTADO_DESC VARCHAR2(30);
     V_USUA_ID VARCHAR2(30);
     V_EXISTEREP INT;
     V_ENREPARTO INT;
     V_DOCU_CODEF VARCHAR2(20);

    V_HAYORDEN INT;
    V_ORDEN VARCHAR2(20);
    V_ORRE_CODE VARCHAR2(20);
    DESC_ORG VARCHAR2(200);


    CURSOR DT(P_DOCUMENTO VARCHAR2) IS
        SELECT YTRAPDO_ORGN_CODE ORGN_CODE,YTRAPDO_COAS_CODE COAS_CODE,YTRAPDO_SEQ SEQ  FROM YTRAPDO
    WHERE YTRAPDO_DOCU_CODE||'-'|| YTRAPDO_DOCU_SEQ=P_DOCUMENTO AND YTRAPDO_IND_ESTADO='P'
    AND  (SELECT YTVPRVE_GENERA_MOV_DOC FROM YTVPRVE WHERE YTVPRVE_CODE=YTRAPDO_PRVE_CODE)='S';

DT_ROW DT%ROWTYPE;

BEGIN


   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');
   v_docu_code:=ky_json.campo(jsonObj, 'docu_code');
   V_USUA_ID:=ky_json.campo(jsonObj, 'usua_id');
   V_ORRE_CODE:=ky_json.campo(jsonObj, 'orre_code');

   IF(P_ACCION='ADI') THEN

   SELECT count(*) into v_existe FROM YTBDOCU WHERE (YTBDOCU_CODE=v_docu_code OR YTBDOCU_CODIGO_BARRAS=v_docu_code);

    IF(v_existe>0) THEN
        SELECT YTBDOCU_CODE,YTBDOCU_SEQ,YTBDOCU_ESTA_CODE into V_DOCU_CODEF,V_DOCU_SEQ,V_ESTADO FROM YTBDOCU WHERE (YTBDOCU_CODE=v_docu_code OR YTBDOCU_CODIGO_BARRAS=v_docu_code) ;

       -- IF(V_ESTADO<>'CO' AND V_ESTADO<>'OB' AND V_ESTADO<>'AR' AND V_ESTADO<>'AT' AND V_ESTADO<>'DE' AND V_ESTADO<>'RE'  AND V_ESTADO<>'NU') THEN
    IF(V_ESTADO='TR') THEN
              SELECT COUNT(*) INTO V_ENREPARTO FROM YTRORRE WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ=v_docu_code||'-'||V_DOCU_SEQ AND YTRORRE_IND_ESTADO='P';

                IF(V_ENREPARTO=0) THEN
                    select decode(MAX(YTRORRE_SEQ),null,1,MAX(YTRORRE_SEQ)+1) into v_seq from  YTRORRE
                    WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE=v_docu_code||'-'||V_DOCU_SEQ||'-'||ky_json.campo(jsonObj, 'orre_code');

                    INSERT INTO COMUMGR.YTRORRE (
                    YTRORRE_DOCU_CODE, YTRORRE_DOCU_SEQ, YTRORRE_ORRE_CODE,
                    YTRORRE_FECHA_ACTIVIDAD, YTRORRE_USUA_ID, YTRORRE_IND_ESTADO,
                    YTRORRE_COMENTARIO, YTRORRE_USUA_ID_RECEPCIONO, YTRORRE_FECHA_RECEPCIONO,YTRORRE_SEQ)
                    VALUES ( ky_json.campo(jsonObj, 'docu_code'),
                        V_DOCU_SEQ,
                        V_ORRE_CODE,
                        sysdate, V_USUA_ID,
                        ky_json.campo(jsonObj, 'ind_estado'),
                        ky_json.campo(jsonObj, 'comentario'),
                    null, null, v_seq );

                --ACTUALIZAR ESTADO DE DOCUMENTO
                    UPDATE YTBDOCU SET  YTBDOCU_ESTA_CODE='RE'
                    WHERE (YTBDOCU_CODE=v_docu_code OR YTBDOCU_CODIGO_BARRAS=v_docu_code);
                --HISTORIAL DE ESTADOS
                     INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                    YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                    VALUES (v_docu_code,V_DOCU_SEQ,YTRESDO_SEQ_SEQ.nextval, 'RE', SYSDATE,V_USUA_ID, 'SYS: POR ORDEN REPARTO');

                    --CREAR ORDENES DE REPARTO

                    OPEN DT(V_DOCU_CODEF||'-'||V_DOCU_SEQ);
                        LOOP
                            FETCH DT INTO DT_ROW;
                                EXIT WHEN DT%NOTFOUND;

                                --YTRAPDO_ORGN_CODE ORGN_CODE,YTRAPDO_COAS_CODE COAS_CODE,YTRAPDO_SEQ SEQ
                                --VERIFICAMOS SI EXISTE ORDEN DE REAPRTO
                                SELECT COUNT(1) INTO V_HAYORDEN FROM YTBOREN WHERE  YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE=DT_ROW.COAS_CODE||DT_ROW.ORGN_CODE AND YTBOREN_IND_ESTADO='N';

                                IF(V_HAYORDEN>0) THEN
                                  --INSERTAR EN ORDEN
                                  SELECT YTBOREN_CODE INTO V_ORDEN FROM YTBOREN WHERE  YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE=DT_ROW.COAS_CODE||DT_ROW.ORGN_CODE AND YTBOREN_IND_ESTADO='N';

                                  INSERT INTO COMUMGR.YTROREN (
                                    YTROREN_OREN_CODE, YTROREN_ORRE_DOCU_CODE, YTROREN_ORRE_DOCU_SEQ,
                                    YTROREN_ORRE_ORRE_CODE, YTROREN_FECHA_ACTIVIDAD, YTROREN_USUA_ID,
                                    YTROREN_IND_ESTADO, YTROREN_APDO_SEQ)
                                    VALUES (V_ORDEN,V_DOCU_CODEF,V_DOCU_SEQ,V_ORRE_CODE,SYSDATE,V_USUA_ID,'A',DT_ROW.SEQ);
                                ELSE
                                --CREANDO ORDEN

                                SELECT decode(MAX(YTBOREN_CODE),null,1,MAX(YTBOREN_CODE)+1) into V_ORDEN from  YTBOREN;
                                V_ORDEN:=LPAD(V_ORDEN,7,'0');


                                    SELECT FTVORGN_TITLE INTO DESC_ORG FROM FTVORGN@PROD.INT.UPAO.EDU.PE WHERE FTVORGN_COAS_CODE||FTVORGN_ORGN_CODE=DT_ROW.COAS_CODE||DT_ROW.ORGN_CODE;
                                        INSERT INTO COMUMGR.YTBOREN (
                                        YTBOREN_CODE, YTBOREN_FECHA_ACTIVIDAD, YTBOREN_FECHA_RECEPCIONO,
                                        YTBOREN_USUA_RECEPCIONO, YTBOREN_USUA_ID, YTBOREN_IND_ESTADO,
                                        YTBOREN_COMENTARIO,YTBOREN_COAS_CODE,YTBOREN_ORGN_CODE,YTBOREN_NOMBRE_RECEPCIONA)
                                        VALUES (V_ORDEN ,SYSDATE,NULL, NULL,
                                        V_USUA_ID,'N','CREADO POR SYS',DT_ROW.COAS_CODE,DT_ROW.ORGN_CODE,DESC_ORG);

                                --INSERTANDO DETALLE DE ORDEN
                                 INSERT INTO COMUMGR.YTROREN (
                                    YTROREN_OREN_CODE, YTROREN_ORRE_DOCU_CODE, YTROREN_ORRE_DOCU_SEQ,
                                    YTROREN_ORRE_ORRE_CODE, YTROREN_FECHA_ACTIVIDAD, YTROREN_USUA_ID,
                                    YTROREN_IND_ESTADO, YTROREN_APDO_SEQ)
                                    VALUES (V_ORDEN,V_DOCU_CODEF,V_DOCU_SEQ,V_ORRE_CODE,SYSDATE,V_USUA_ID,'A',DT_ROW.SEQ);
                                END IF;


                        END LOOP;
                    CLOSE  DT;

                    COMMIT;


                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
               ELSE
                    v_msg := 'ERP-ERR DOCUMENTO YA ESTA REGISTRADO EN ORDEN DE REPARTO';
               END IF;

        ELSE
             SELECT YTVESTA_DESCRIPCION INTO V_ESTADO_DESC FROM YTVESTA WHERE YTVESTA_CODE=V_ESTADO;
             v_msg := 'ERP-ERR NO SE PUEDE ENVIAR UN DOCUMENTO A REPARTO EN ESTADO ' || V_ESTADO_DESC ;
        END IF;

     ELSE
        v_msg := 'ERP-ERR NO EXISTE DOCUMENTO CON ESE CODIGO';
     END IF;

   ELSIF(P_ACCION='ACT') THEN


        UPDATE COMUMGR.YTAORRE
        SET     YTAORRE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
                YTAORRE_COMENTARIO      = ky_json.campo(jsonObj, 'comentario'),
                YTAORRE_ID_REPARTIDOR   = ky_json.campo(jsonObj, 'id_repartidor'),
                YTAORRE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                YTAORRE_FECHA_INICIO    = ky_json.campo(jsonObj, 'fecha_inicio'),
                YTAORRE_FECHA_FIN       = ky_json.campo(jsonObj, 'fecha_fin'),
                YTAORRE_HORA_SALIDA     = ky_json.campo(jsonObj, 'hora_salida'),
                YTAORRE_HORA_REGRESO    = ky_json.campo(jsonObj, 'hora_fin'),
                YTAORRE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id')
        WHERE  YTAORRE_CODE            = '-----';
 COMMIT;
 IF(SQL%ROWCOUNT>0) THEN
     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA' ;
     ELSE
      v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;



   ELSIF(P_ACCION='ELI') THEN
     --DELETE YTRORRE WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ=trim(ky_json.campo(jsonObj, 'ytrorre_pk'));

    -- SE OBTIENE EL CODIGO DEL DOCUMENTO AFECTADO
    SELECT YTRORRE_DOCU_CODE,YTRORRE_DOCU_SEQ INTO V_DOCU_CODE1,V_DOCU_SEQ FROM YTRORRE
     WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ=trim(ky_json.campo(jsonObj, 'ytrorre_pk'));

     UPDATE YTRORRE SET YTRORRE_IND_ESTADO='E'
     WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ=trim(ky_json.campo(jsonObj, 'ytrorre_pk'));

     --ACTUALIZAR ESTADO DE DOCUMENTO
            UPDATE YTBDOCU SET  YTBDOCU_ESTA_CODE='TR'
            WHERE YTBDOCU_CODE=V_DOCU_CODE1 AND YTBDOCU_SEQ=V_DOCU_SEQ;
            --HISTORIAL DE ESTADOS
            INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                    YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                VALUES (V_DOCU_CODE1,V_DOCU_SEQ,YTRESDO_SEQ_SEQ.nextval, 'TR', SYSDATE,V_USUA_ID, 'SYS: POR ORDEN REPARTO::: SE RETIRO DE ORDEN ' || ky_json.campo(jsonObj, 'ytrorre_pk'));

      COMMIT;
     IF(SQL%ROWCOUNT>0) THEN

     v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
      v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;

   ELSE
     v_msg := 'ERP-ERR NO HAY CAMBIOS POR APLICAR';
   END IF;




    exception when OTHERS then
    rollback;
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTRORRE*/




/*METODOS DE TABLA YTBOREN*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/


procedure KYT_DOCU_DOCU_PP_YTBOREN_CUR3(P_ACCION IN VARCHAR2,P_DATA in varchar2,CURSOR_OUT OUT T_CURSOR,CURSOR_OUT1 OUT T_CURSOR,CURSOR_OUT2 OUT T_CURSOR)
     is
v_PIDM int;
v_documento varchar2(20);
v_usua_id varchar2(20);
begin
  V_PIDM:=0;

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_documento:=trim(ky_json.campo(jsonObj, 'ytboren_pk'));
   v_usua_id:=trim(ky_json.campo(jsonObj, 'usua_id'));

   OPEN CURSOR_OUT  FOR
      SELECT
            YTBOREN_CODE PK_ACCION,YTBOREN_CODE CODE, YTBOREN_FECHA_ACTIVIDAD FECHA, YTBOREN_FECHA_RECEPCIONO FECHA_RECEPCIONO,
            DECODE(LENGTH(YTBOREN_USUA_RECEPCIONO),0,
                       YTBOREN_USUA_RECEPCIONO ||' '|| YTBOREN_NOMBRE_RECEPCIONA,'<span style="color:red;font-weight:bold;">'||YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE||'</span> - '||YTBOREN_NOMBRE_RECEPCIONA)
                        USUA_RECEPCIONO, YTBOREN_USUA_ID USUA_ID, YTBOREN_IND_ESTADO IND_ESTADO,
            YTBOREN_COMENTARIO COMENTARIO, YTBOREN_COAS_CODE COAS_CODE, YTBOREN_ORGN_CODE ORGN_CODE,
            YTBOREN_NOMBRE_RECEPCIONA NOMBRE_RECEPCIONA,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(YTBOREN_USUA_RECEPCIONO),'X')  USUARIO,
            YTBOREN_USUA_RECEPCIONO ID_USUA_RECIBIO
     FROM COMUMGR.YTBOREN
     WHERE YTBOREN_CODE=ky_json.campo(jsonObj, 'ytboren_pk');

OPEN CURSOR_OUT1  FOR
     SELECT  YTROREN_OREN_CODE ||'-'||YTROREN_ORRE_DOCU_CODE||'-'||YTROREN_ORRE_DOCU_SEQ PK_ACCION,YTROREN_OREN_CODE ORDEN_CODE,YTBDOCU_ASUNTO ASUNTO,YTBDOCU_NOMBRES DE, YTROREN_ORRE_DOCU_CODE DOCUMENTO, YTROREN_ORRE_DOCU_SEQ DOCUMENTO_SEQ,
                YTROREN_ORRE_ORRE_CODE ORDEN_REPARTO, YTROREN_FECHA_ACTIVIDAD FECHA, YTROREN_USUA_ID USUA_ID,YTRAPDO_PRVE_DESC PROVEIDO,YTRAPDO_NIVEL NIVEL
        FROM COMUMGR.YTROREN,YTBDOCU,YTRAPDO
        WHERE YTROREN_OREN_CODE=ky_json.campo(jsonObj, 'ytboren_pk')
        AND YTROREN_ORRE_DOCU_CODE=YTBDOCU_CODE AND YTROREN_ORRE_DOCU_SEQ=YTBDOCU_SEQ
        AND YTRAPDO_DOCU_CODE=YTROREN_ORRE_DOCU_CODE AND YTRAPDO_DOCU_SEQ=YTROREN_ORRE_DOCU_SEQ
        AND YTROREN_APDO_SEQ=YTRAPDO_SEQ;

OPEN CURSOR_OUT2  FOR
     SELECT YTBOREN_CODE ORDEN_CODE, (SELECT YTVTIOC_DESCRIPCION FROM YTVTIOC WHERE YTVTIOC_CODE=YTRDOOC_TIOC_CODE) MOTIVO, YTRDOOC_FECHA_ACTIVIDAD FECHA,
                YTRDOOC_USUA_ID USUA_ID, YTRDOOC_COMENTARIO COMENTARIO
        FROM COMUMGR.YTRDOOC
        WHERE  YTBOREN_CODE=ky_json.campo(jsonObj, 'ytboren_pk');




exception when OTHERS then
ROLLBACK;
        raise_application_error(-20001,'Error al listar ');
end;


PROCEDURE KYT_DOCU_DOCU_PP_YTBOREN_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
     is

    code varchar2(20);
     v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc VARCHAR2(50);
    V_ESTADO VARCHAR2(20);
    V_criterio VARCHAR2(20);
    V_o varchar2(20);
    begin

    jsonObj := json(P_DATA);
    V_ESTADO:=ky_json.campo(jsonObj, 'e');
    V_criterio:=ky_json.campo(jsonObj, 'b');
    V_o:=ky_json.campo(jsonObj, 'o');
    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT YTAORRE_CODE PK_ACCION ,YTAORRE_CODE CODE, YTAORRE_DESCRIPCION DESCRIPCION, YTAORRE_COMENTARIO COMENTARIO,
                YTAORRE_FECHA_ACTIVIDAD FECHA, YTAORRE_ID_REPARTIDOR ID_REPARTIDOR, YTAORRE_IND_ESTADO IND_ESTADO,
                TO_CHAR(YTAORRE_FECHA_INICIO,'DD/MM/YYYY') FECHA_INICIO, TO_CHAR(YTAORRE_FECHA_FIN,'DD/MM/YYYY') FECHA_FIN, YTAORRE_FECHA_COMPLETO FECHA_COMPLETO,
                YTAORRE_HORA_SALIDA HORA_SALIDA, YTAORRE_HORA_REGRESO HORA_REGRESO, YTAORRE_USUA_ID USUA_ID
                FROM COMUMGR.YTAORRE
                WHERE YTAORRE_CODE=trim(ky_json.campo(jsonObj, 'ytaorre_pk'));

    ELSIF(P_ACCION='FIT')    THEN
    OPEN CURSOR_OUT  FOR
    SELECT YTVINST_CODE CODE, YTVINST_DESCRIPCION TITULO
        FROM COMUMGR.YTVINST
        WHERE YTVINST_IND_ESTADO='A'
        AND upper(YTVINST_DESCRIPCION) LIKE '%'|| upper(ky_json.campo(jsonObj, 'p_filtro')) ||'%'

        ORDER BY 2;

    ELSIF(P_ACCION='IMP') THEN

     v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

       SELECT COUNT(*) INTO  V_NUM_REG FROM YTBOREN WHERE YTBOREN_IND_ESTADO like v_estado ||'%' AND YTBOREN_NOMBRE_RECEPCIONA like '%'|| V_criterio ||'%';
         OPEN CURSOR_OUT  FOR
          SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTBOREN_CODE CODE, YTBOREN_FECHA_ACTIVIDAD FECHA, YTBOREN_FECHA_RECEPCIONO FECHA_RECEPCIONO,
                       DECODE(LENGTH(YTBOREN_USUA_RECEPCIONO),0,
                       YTBOREN_USUA_RECEPCIONO ||' '|| YTBOREN_NOMBRE_RECEPCIONA,YTBOREN_NOMBRE_RECEPCIONA || ' - <span style="color:red;font-weight:bold;">'||YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE||'</span>')
                        USUA_RECEPCIONO, YTBOREN_USUA_ID USUA_ID, YTBOREN_IND_ESTADO IND_ESTADO, YTBOREN_COMENTARIO COMENTARIO
                      --  ,(select count(*) from YTROREN WHERE YTROREN_OREN_CODE=YTBOREN_CODE) DOCUMENTOS
                        ,FKYT_DOCU_DOCU_PP_YTROREN_CUR(YTBOREN_CODE)DOCUMENTOS,YTBOREN_NUM_OCURRENCIAS NUM_OCURRENCIAS
                        FROM COMUMGR.YTBOREN WHERE YTBOREN_IND_ESTADO like v_estado ||'%' AND YTBOREN_NOMBRE_RECEPCIONA like '%'|| V_criterio ||'%'
                         ORDER BY YTBOREN_NOMBRE_RECEPCIONA ASC ) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    ELSE   --LIS

     v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;



      if(LENGTH(V_o)<>0) then

       SELECT COUNT(*) INTO  V_NUM_REG FROM YTBOREN WHERE YTBOREN_CODE=V_o;
         OPEN CURSOR_OUT  FOR
          SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTBOREN_CODE PK_ACCION,YTBOREN_CODE CODE, YTBOREN_FECHA_ACTIVIDAD FECHA, YTBOREN_FECHA_RECEPCIONO FECHA_RECEPCIONO,
                       DECODE(LENGTH(YTBOREN_USUA_RECEPCIONO),0,
                       YTBOREN_USUA_RECEPCIONO ||' '|| YTBOREN_NOMBRE_RECEPCIONA,'<span style="color:red;font-weight:bold;">'||YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE||'</span> - '||YTBOREN_NOMBRE_RECEPCIONA)
                        USUA_RECEPCIONO, YTBOREN_USUA_ID USUA_ID, YTBOREN_IND_ESTADO IND_ESTADO, YTBOREN_COMENTARIO COMENTARIO
                      --  ,(select count(*) from YTROREN WHERE YTROREN_OREN_CODE=YTBOREN_CODE) DOCUMENTOS
                        ,FKYT_DOCU_DOCU_PP_YTROREN_CUR(YTBOREN_CODE)DOCUMENTOS,YTBOREN_NUM_OCURRENCIAS NUM_OCURRENCIAS
                        FROM COMUMGR.YTBOREN
                        WHERE YTBOREN_CODE=V_o ORDER BY YTBOREN_CODE DESC ) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

      ELSE

      SELECT COUNT(*) INTO  V_NUM_REG FROM YTBOREN WHERE YTBOREN_IND_ESTADO like v_estado ||'%' AND YTBOREN_NOMBRE_RECEPCIONA like '%'|| V_criterio ||'%';
       OPEN CURSOR_OUT  FOR
          SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTBOREN_CODE PK_ACCION,YTBOREN_CODE CODE, YTBOREN_FECHA_ACTIVIDAD FECHA, YTBOREN_FECHA_RECEPCIONO FECHA_RECEPCIONO,
                       DECODE(LENGTH(YTBOREN_USUA_RECEPCIONO),0,
                       YTBOREN_USUA_RECEPCIONO ||' '|| YTBOREN_NOMBRE_RECEPCIONA,'<span style="color:red;font-weight:bold;">'||YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE||'</span> - '||YTBOREN_NOMBRE_RECEPCIONA)
                        USUA_RECEPCIONO, YTBOREN_USUA_ID USUA_ID, YTBOREN_IND_ESTADO IND_ESTADO, YTBOREN_COMENTARIO COMENTARIO
                      --  ,(select count(*) from YTROREN WHERE YTROREN_OREN_CODE=YTBOREN_CODE) DOCUMENTOS
                        ,FKYT_DOCU_DOCU_PP_YTROREN_CUR(YTBOREN_CODE)DOCUMENTOS,YTBOREN_NUM_OCURRENCIAS NUM_OCURRENCIAS
                        FROM COMUMGR.YTBOREN
                        WHERE YTBOREN_IND_ESTADO like v_estado ||'%' AND YTBOREN_NOMBRE_RECEPCIONA like '%'|| V_criterio ||'%' ORDER BY YTBOREN_CODE DESC ) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

      END IF;





    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar '||SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTBOREN_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_docu_code varchar2(20);
    v_existe int;
    V_DOCU_CODE1 VARCHAR2(30);
    V_DOCU_SEQ INT;
    V_ESTADO VARCHAR2(3);
     V_ESTADO_DESC VARCHAR2(30);
     V_USUA_ID VARCHAR2(30);
     V_EXISTEREP INT;
     V_ENREPARTO INT;
     V_POR_APROBAR INT;

     CURSOR DT_DOCUMENTOS(P_ORDEN VARCHAR2) IS

     SELECT YTROREN_ORRE_DOCU_CODE,YTROREN_ORRE_DOCU_SEQ,YTROREN_APDO_SEQ
     FROM YTROREN WHERE YTROREN_OREN_CODE=P_ORDEN;

        DT_ROW DT_DOCUMENTOS%ROWTYPE;

    BEGIN

   jsonObj := json(P_DATA);
   v_docu_code:=ky_json.campo(jsonObj, 'docu_code');
   V_USUA_ID:=ky_json.campo(jsonObj, 'usua_id');

   IF(P_ACCION='ADI') THEN
            SELECT decode(MAX(YTBOREN_CODE),null,1,MAX(YTBOREN_CODE)+1) into v_code from  YTBOREN;
            INSERT INTO COMUMGR.YTBOREN (
                YTBOREN_CODE, YTBOREN_FECHA_ACTIVIDAD, YTBOREN_FECHA_RECEPCIONO,
                YTBOREN_USUA_RECEPCIONO, YTBOREN_USUA_ID, YTBOREN_IND_ESTADO,
                YTBOREN_COMENTARIO,YTBOREN_COAS_CODE,YTBOREN_ORGN_CODE,YTBOREN_NOMBRE_RECEPCIONA)
                VALUES ( LPAD(v_code,7,'0'),SYSDATE,ky_json.campo(jsonObj, 'usua_id_recpeciono'), NULL,
                ky_json.campo(jsonObj, 'usua_id'),
                ky_json.campo(jsonObj, 'ind_estado'),
                ky_json.campo(jsonObj, 'comentario'),ky_json.campo(jsonObj, 'coas'),ky_json.campo(jsonObj, 'code'),ky_json.campo(jsonObj, 'nombre'));

                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';



  ELSIF(P_ACCION='ENR') THEN  --completar orden de entrega


                UPDATE COMUMGR.YTBOREN
                SET
                YTBOREN_FECHA_REPARTO  = sysdate,
                YTBOREN_USUA_ID_REPARTO      = ky_json.campo(jsonObj, 'usua_id'),
                YTBOREN_IND_ESTADO        = ky_json.campo(jsonObj, 'ind_estado')

                WHERE  YTBOREN_CODE       = v_docu_code;


        IF(SQL%ROWCOUNT>0) THEN
            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA' ;
        ELSE
            v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
        END IF;

    ELSIF(P_ACCION='COM') THEN  --completar orden de entrega


                UPDATE COMUMGR.YTBOREN
                SET
                YTBOREN_FECHA_RECEPCIONO  = sysdate,
                YTBOREN_USUA_RECEPCIONO   = ky_json.campo(jsonObj, 'usua_id_recepciono'),
                YTBOREN_USUA_ENTREGO      = ky_json.campo(jsonObj, 'usua_id'),
                YTBOREN_IND_ESTADO        = ky_json.campo(jsonObj, 'ind_estado'),
                YTBOREN_COMENTARIO        = YTBOREN_COMENTARIO||':::'||ky_json.campo(jsonObj, 'comentario')
                WHERE  YTBOREN_CODE       = v_docu_code;

                            --ir aprobando DOCUMENTO

        OPEN DT_DOCUMENTOS(v_docu_code);
                LOOP
                    FETCH DT_DOCUMENTOS INTO DT_ROW;
                    EXIT WHEN DT_DOCUMENTOS%NOTFOUND;

                               UPDATE YTRAPDO
                               SET  YTRAPDO_ID_USUA_APROB =ky_json.campo(jsonObj, 'usua_id_recepciono'),
                               YTRAPDO_IND_ESTADO='A',
                               YTRAPDO_FECHA_APROBACION=SYSDATE
                                WHERE YTRAPDO_DOCU_CODE=DT_ROW.YTROREN_ORRE_DOCU_CODE
                                AND YTRAPDO_DOCU_SEQ=DT_ROW.YTROREN_ORRE_DOCU_SEQ
                                AND YTRAPDO_SEQ=DT_ROW.YTROREN_APDO_SEQ;

                       SELECT COUNT(*) INTO V_POR_APROBAR FROM  YTRAPDO
                        WHERE YTRAPDO_DOCU_CODE ||'-'||YTRAPDO_DOCU_SEQ=DT_ROW.YTROREN_ORRE_DOCU_CODE||'-'||DT_ROW.YTROREN_ORRE_DOCU_SEQ
                        AND YTRAPDO_CODE_CODE<DT_ROW.YTROREN_APDO_SEQ
                        AND YTRAPDO_IND_ESTADO IN ('P','D');

                        --VERIFICAMOS SI NO HAY NIVELES INFERIOR POR APROBAR
                        IF  V_POR_APROBAR=0 THEN

                                    --SACAMOS EL CODIGO DEL DOCUMENTO
                                    --SELECT YTBDOCU_CODE,YTBDOCU_SEQ,NVL(YTBDOCU_ID_USUA_VALIDO,'0') INTO V_DOC,V_SEQ,V_USUA_VALIDO FROM YTBDOCU WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=P_CODE_DOC;
                            if(kyt_tramite_administrador.FYT_REQUISTOS_PEND_VALIDACION(DT_ROW.YTROREN_ORRE_DOCU_CODE)='0') THEN --verificamos si todos los requistos ya fueron validados
                             --ACTUALIZAMOS EL ESTADO DE LA APROBACION
                                UPDATE YTRAPDO
                                    SET  YTRAPDO_ID_USUA_APROB =ky_json.campo(jsonObj, 'usua_id_recepciono'),
                                    YTRAPDO_IND_ESTADO='A',
                                    YTRAPDO_FECHA_APROBACION=SYSDATE
                                WHERE YTRAPDO_DOCU_CODE=DT_ROW.YTROREN_ORRE_DOCU_CODE
                                AND YTRAPDO_DOCU_SEQ=DT_ROW.YTROREN_ORRE_DOCU_SEQ AND YTRAPDO_SEQ=DT_ROW.YTROREN_APDO_SEQ;

                                UPDATE YTBDOCU SET YTBDOCU_ESTA_CODE='AT'
                                WHERE YTBDOCU_CODE ||'-'|| YTBDOCU_SEQ=DT_ROW.YTROREN_ORRE_DOCU_CODE||'-'||DT_ROW.YTROREN_ORRE_DOCU_SEQ;

                                --REGISTRAMOS EL ESTADO DEL DOCUMENTO

                                INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                                                        YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                            VALUES (DT_ROW.YTROREN_ORRE_DOCU_CODE,DT_ROW.YTROREN_ORRE_DOCU_SEQ,YTRESDO_SEQ_SEQ.nextval, 'CO', SYSDATE,ky_json.campo(jsonObj, 'usua_id'), 'SYSTEMA POR ORDEN');
                             INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                                                        YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                            VALUES (DT_ROW.YTROREN_ORRE_DOCU_CODE,DT_ROW.YTROREN_ORRE_DOCU_SEQ,YTRESDO_SEQ_SEQ.nextval, 'AT', SYSDATE,ky_json.campo(jsonObj, 'usua_id'), 'SYSTEMA POR ORDEN');

                        ELSE  ROLLBACK;
                        END IF;

                    END IF;


              END LOOP;
        CLOSE  DT_DOCUMENTOS;




        IF(SQL%ROWCOUNT>0) THEN
            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA' ;
        ELSE
            v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
        END IF;

   ELSIF(P_ACCION='ACT') THEN


        UPDATE COMUMGR.YTAORRE
        SET     YTAORRE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
                YTAORRE_COMENTARIO      = ky_json.campo(jsonObj, 'comentario'),
                YTAORRE_ID_REPARTIDOR   = ky_json.campo(jsonObj, 'id_repartidor'),
                YTAORRE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                YTAORRE_FECHA_INICIO    = ky_json.campo(jsonObj, 'fecha_inicio'),
                YTAORRE_FECHA_FIN       = ky_json.campo(jsonObj, 'fecha_fin'),
                YTAORRE_HORA_SALIDA     = ky_json.campo(jsonObj, 'hora_salida'),
                YTAORRE_HORA_REGRESO    = ky_json.campo(jsonObj, 'hora_fin'),
                YTAORRE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id')
        WHERE  YTAORRE_CODE            = '-----';

 IF(SQL%ROWCOUNT>0) THEN
     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA' ;
     ELSE
      v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;



   ELSIF(P_ACCION='ELI') THEN
     --DELETE YTRORRE WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ=trim(ky_json.campo(jsonObj, 'ytrorre_pk'));

    -- SE OBTIENE EL CODIGO DEL DOCUMENTO AFECTADO
    SELECT YTRORRE_DOCU_CODE,YTRORRE_DOCU_SEQ INTO V_DOCU_CODE1,V_DOCU_SEQ FROM YTRORRE
     WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ=trim(ky_json.campo(jsonObj, 'ytrorre_pk'));

     UPDATE YTRORRE SET YTRORRE_IND_ESTADO='E'
     WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ||'-'||YTRORRE_ORRE_CODE||'-'||YTRORRE_SEQ=trim(ky_json.campo(jsonObj, 'ytrorre_pk'));

     --ACTUALIZAR ESTADO DE DOCUMENTO
            UPDATE YTBDOCU SET  YTBDOCU_ESTA_CODE='TR'
            WHERE YTBDOCU_CODE=V_DOCU_CODE1 AND YTBDOCU_SEQ=V_DOCU_SEQ;
            --HISTORIAL DE ESTADOS
            INSERT INTO COMUMGR.YTRESDO (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ,
                    YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID,    YTRESDO_COMENTARIO)
                VALUES (V_DOCU_CODE1,V_DOCU_SEQ,YTRESDO_SEQ_SEQ.nextval, 'TR', SYSDATE,V_USUA_ID, 'SYS: POR ORDEN REPARTO::: SE RETIRO DE ORDEN ' || ky_json.campo(jsonObj, 'ytrorre_pk'));

        IF(SQL%ROWCOUNT>0) THEN

     v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
      v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;

   ELSE
     v_msg := 'ERP-ERR NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    rollback;
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTBOREN*/





/*METODOS DE TABLA YTVTIOC*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTVTIOC_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
            SELECT YTVTIOC_CODE, YTVTIOC_DESCRIPCION, YTVTIOC_FECHA_ACTIVIDAD,YTVTIOC_USUA_ID, YTVTIOC_IND_ESTADO
            FROM COMUMGR.YTVTIOC
            WHERE YTVTIOC_CODE=P_DATA;
    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


    if(v_desc='%') then
        SELECT COUNT(*) INTO  V_NUM_REG FROM YTVTIOC ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTVTIOC_CODE CODE, YTVTIOC_DESCRIPCION DESCRIPCION, YTVTIOC_FECHA_ACTIVIDAD,YTVTIOC_USUA_ID, YTVTIOC_IND_ESTADO
            FROM COMUMGR.YTVTIOC ORDER BY YTVTIOC_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
    else

    SELECT COUNT(*) INTO  V_NUM_REG FROM YTVESTA  where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%';

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTVESTA_CODE PK_ACCION,YTVESTA_CODE CODE, YTVESTA_DESCRIPCION DESCRIPCION, YTVESTA_FECHA_ACTIVIDAD FECHA,
                        YTVESTA_USUA_ID USUA_ID, YTVESTA_IND_ESTADO IND_ESTADO, YTVESTA_COMENTARIO COMENTARIO,
                        YTVESTA_COLOR COLOR, YTVESTA_ESTILO ESTILO, YTVESTA_IND_EDITA IND_EDITA
                        FROM COMUMGR.YTVESTA
                        where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%' order by YTVESTA_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    end if;

    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTVTIOC_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_tipo:=trim(ky_json.campo(jsonObj, 'tipo'));
   v_conceptopago:=trim(nvl(ky_json.campo(jsonObj, 'conceptopago'),'0'));
   IF(P_ACCION='ADI') THEN


   select decode(MAX(YTVPRVE_code),null,1,MAX(YTVPRVE_code)+1) into v_code from  YTVPRVE;

        INSERT INTO COMUMGR.YTVPRVE (
            YTVPRVE_CODE, YTVPRVE_DESCRIPCION, YTVPRVE_FECHA_ACTIVIDAD,             YTVPRVE_USUA_ID, YTVPRVE_IND_ESTADO)
        VALUES (LPAD(v_code,3,'0'),
                ky_json.campo(jsonObj, 'descripcion'),
                SYSDATE,
                ky_json.campo(jsonObj, 'usua_id'),
                ky_json.campo(jsonObj, 'ind_estado') );

         v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

    if(v_tipo='REC' AND LENGTH(v_conceptopago)<2) THEN
     v_msg := 'ERP-ERR[DEBES INGRESAR CONCEPTO DE PAGO]';

    ELSE

    UPDATE COMUMGR.YTVPRVE
SET    YTVPRVE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
       YTVPRVE_FECHA_ACTIVIDAD = SYSDATE,
       YTVPRVE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTVPRVE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado')
WHERE  YTVPRVE_CODE            = trim(ky_json.campo(jsonObj, 'ytvprve_pk'));


     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
     END IF;

   ELSIF(P_ACCION='ELI') THEN
     DELETE YTVPRVE WHERE YTVPRVE_CODE=trim(ky_json.campo(jsonObj, 'ytvprve_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTVTIOC*/






/*METODOS DE TABLA YTRDOOC(tabla de ocurrencias la entregar documento)*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRDOOC_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
            SELECT YTVTIOC_CODE, YTVTIOC_DESCRIPCION, YTVTIOC_FECHA_ACTIVIDAD,YTVTIOC_USUA_ID, YTVTIOC_IND_ESTADO
            FROM COMUMGR.YTVTIOC
            WHERE YTVTIOC_CODE=P_DATA;
    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


    if(v_desc='%') then
        SELECT COUNT(*) INTO  V_NUM_REG FROM YTVTIOC ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTVTIOC_CODE CODE, YTVTIOC_DESCRIPCION DESCRIPCION, YTVTIOC_FECHA_ACTIVIDAD,YTVTIOC_USUA_ID, YTVTIOC_IND_ESTADO
            FROM COMUMGR.YTVTIOC ORDER BY YTVTIOC_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
    else

    SELECT COUNT(*) INTO  V_NUM_REG FROM YTVESTA  where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%';

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTVESTA_CODE PK_ACCION,YTVESTA_CODE CODE, YTVESTA_DESCRIPCION DESCRIPCION, YTVESTA_FECHA_ACTIVIDAD FECHA,
                        YTVESTA_USUA_ID USUA_ID, YTVESTA_IND_ESTADO IND_ESTADO, YTVESTA_COMENTARIO COMENTARIO,
                        YTVESTA_COLOR COLOR, YTVESTA_ESTILO ESTILO, YTVESTA_IND_EDITA IND_EDITA
                        FROM COMUMGR.YTVESTA
                        where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%' order by YTVESTA_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    end if;

    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRDOOC_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_orden varchar2(8);
    v_conceptopago varchar2(20);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

   v_orden:=ky_json.campo(jsonObj, 'orden');
   v_conceptopago:=trim(nvl(ky_json.campo(jsonObj, 'conceptopago'),'0'));
   IF(P_ACCION='ADI') THEN


   select decode(MAX(YTRDOOC_SEQ),null,1,MAX(YTRDOOC_SEQ)+1) into v_code from  YTRDOOC WHERE YTBOREN_CODE=v_orden;

        INSERT INTO COMUMGR.YTRDOOC (YTBOREN_CODE,YTRDOOC_SEQ, YTRDOOC_TIOC_CODE, YTRDOOC_FECHA_ACTIVIDAD,YTRDOOC_USUA_ID, YTRDOOC_COMENTARIO)
        VALUES (v_orden,v_code, ky_json.campo(jsonObj, 'motivo'), sysdate, ky_json.campo(jsonObj, 'usua_id'),ky_json.campo(jsonObj, 'comentario'));
   --actualizar estado de orden
   --UPDATE YTBOREN SET YTBOREN_IND_ESTADO='I' WHERE YTBOREN_CODE=v_orden;
   UPDATE YTBOREN SET YTBOREN_NUM_OCURRENCIAS=YTBOREN_NUM_OCURRENCIAS +1 WHERE YTBOREN_CODE=v_orden;


         v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

    if(v_tipo='REC' AND LENGTH(v_conceptopago)<2) THEN
     v_msg := 'ERP-ERR[DEBES INGRESAR CONCEPTO DE PAGO]';

    ELSE

    UPDATE COMUMGR.YTVPRVE
SET    YTVPRVE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
       YTVPRVE_FECHA_ACTIVIDAD = SYSDATE,
       YTVPRVE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTVPRVE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado')
WHERE  YTVPRVE_CODE            = trim(ky_json.campo(jsonObj, 'ytvprve_pk'));


     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
     END IF;

   ELSIF(P_ACCION='ELI') THEN
     DELETE YTVPRVE WHERE YTVPRVE_CODE=trim(ky_json.campo(jsonObj, 'ytvprve_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTROREN*/




/*METODOS DE TABLA YTRDOOC(tabla de ocurrencias la entregar documento)*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTROREN_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
            SELECT YTVTIOC_CODE, YTVTIOC_DESCRIPCION, YTVTIOC_FECHA_ACTIVIDAD,YTVTIOC_USUA_ID, YTVTIOC_IND_ESTADO
            FROM COMUMGR.YTVTIOC
            WHERE YTVTIOC_CODE=P_DATA;
    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


    if(v_desc='%') then
        SELECT COUNT(*) INTO  V_NUM_REG FROM YTVTIOC ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTVTIOC_CODE CODE, YTVTIOC_DESCRIPCION DESCRIPCION, YTVTIOC_FECHA_ACTIVIDAD,YTVTIOC_USUA_ID, YTVTIOC_IND_ESTADO
            FROM COMUMGR.YTVTIOC ORDER BY YTVTIOC_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
    else

    SELECT COUNT(*) INTO  V_NUM_REG FROM YTVESTA  where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%';

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                        YTVESTA_CODE PK_ACCION,YTVESTA_CODE CODE, YTVESTA_DESCRIPCION DESCRIPCION, YTVESTA_FECHA_ACTIVIDAD FECHA,
                        YTVESTA_USUA_ID USUA_ID, YTVESTA_IND_ESTADO IND_ESTADO, YTVESTA_COMENTARIO COMENTARIO,
                        YTVESTA_COLOR COLOR, YTVESTA_ESTILO ESTILO, YTVESTA_IND_EDITA IND_EDITA
                        FROM COMUMGR.YTVESTA
                        where lower(YTVESTA_DESCRIPCION) like '%' || lower(v_desc) || '%' order by YTVESTA_DESCRIPCION) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    end if;

    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTROREN_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_orden varchar2(8);
    v_conceptopago varchar2(20);
     v_documento varchar2(20);
     v_existe_aprob int;

     V_DOC  varchar2(20);
     V_DOC_SEQ  varchar2(5);
     V_APRO_SEQ  INT;
     V_ENORDEN INT;

     V_ORDEN_COAS VARCHAR2(20);
     V_ORDEN_ORGN VARCHAR2(20);
     v_coas_orgn varchar2(25);

    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');
V_ENORDEN:=0;
   v_orden:=ky_json.campo(jsonObj, 'orden');
   v_documento:=ky_json.campo(jsonObj, 'documento');
   v_coas_orgn:=ky_json.campo(jsonObj, 'coas_orgn');
   IF(P_ACCION='ADI') THEN

   --OBTENEMOS LOS DATOS DE LA ORGANIZACIÓN DE LA ORDEN
  -- SELECT YTBOREN_COAS_CODE,YTBOREN_ORGN_CODE INTO V_ORDEN_COAS,V_ORDEN_ORGN FROM YTBOREN WHERE YTBOREN_CODE=v_orden;

    SELECT COUNT(*) INTO V_ENORDEN   FROM YTROREN,YTBOREN
    WHERE YTROREN_ORRE_DOCU_CODE||'-'||YTROREN_ORRE_DOCU_SEQ=trim(v_documento) AND YTROREN_IND_ESTADO='A'
    AND YTROREN_OREN_CODE=YTBOREN_CODE
    AND YTBOREN_COAS_CODE||YTBOREN_ORGN_CODE=v_coas_orgn;
   IF(V_ENORDEN=0) THEN
        SELECT count(*) into v_existe_aprob FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=v_documento AND YTRAPDO_IND_ESTADO='P'
        AND YTRAPDO_COAS_CODE||'-'||YTRAPDO_ORGN_CODE=(SELECT YTBOREN_COAS_CODE||'-'||YTBOREN_ORGN_CODE
        FROM YTBOREN WHERE YTBOREN_CODE=v_orden) AND (SELECT COUNT(*) FROM YTRORRE WHERE YTRORRE_DOCU_CODE||'-'||YTRORRE_DOCU_SEQ=v_documento AND YTRORRE_IND_ESTADO='P')>0;

            IF(v_existe_aprob>0) THEN
                SELECT YTRAPDO_DOCU_CODE,YTRAPDO_DOCU_SEQ,YTRAPDO_SEQ INTO V_DOC,V_DOC_SEQ,V_APRO_SEQ
                FROM YTRAPDO WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ=v_documento AND YTRAPDO_IND_ESTADO='P'
                AND YTRAPDO_COAS_CODE||'-'||YTRAPDO_ORGN_CODE=(SELECT YTBOREN_COAS_CODE||'-'||YTBOREN_ORGN_CODE
                FROM YTBOREN WHERE YTBOREN_CODE=v_orden);

                INSERT INTO COMUMGR.YTROREN (   YTROREN_OREN_CODE, YTROREN_ORRE_DOCU_CODE, YTROREN_ORRE_DOCU_SEQ,
                YTROREN_ORRE_ORRE_CODE, YTROREN_FECHA_ACTIVIDAD, YTROREN_USUA_ID,    YTROREN_IND_ESTADO, YTROREN_APDO_SEQ)
                VALUES (v_orden, V_DOC, V_DOC_SEQ, '000003', SYSDATE, ky_json.campo(jsonObj, 'usua_id'), ky_json.campo(jsonObj, 'ind_estado'), V_APRO_SEQ);

                v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
            ELSE
                v_msg := 'ERP-ERR ESTE DOCUMENTO NO SE PUEDE ENTREGAR A ESTA AREA';
            END IF;
    ELSE
         v_msg := 'ERP-ERR ESTE DOCUMENTO YA ESTA EN UNA ORDEN DE REPARTO';
    END IF;
   ELSIF(P_ACCION='ACT') THEN

    if(v_tipo='REC' AND LENGTH(v_conceptopago)<2) THEN
     v_msg := 'ERP-ERR[DEBES INGRESAR CONCEPTO DE PAGO]';

    ELSE

    UPDATE COMUMGR.YTVPRVE
SET    YTVPRVE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
       YTVPRVE_FECHA_ACTIVIDAD = SYSDATE,
       YTVPRVE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTVPRVE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado')
WHERE  YTVPRVE_CODE            = trim(ky_json.campo(jsonObj, 'ytvprve_pk'));


     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
     END IF;

   ELSIF(P_ACCION='ELI') THEN
     DELETE YTROREN WHERE YTROREN_OREN_CODE||'-'||YTROREN_ORRE_DOCU_CODE||'-'||YTROREN_ORRE_DOCU_SEQ=trim(ky_json.campo(jsonObj, 'ytroren_pk'));
     IF(SQL%ROWCOUNT>0) THEN
        v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
        v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;

   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTROREN*/





PROCEDURE KYT_DOCU_DOCU_PP_SPRIDEN_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_busca varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
        SELECT YTVPRVE_CODE PK_ACCION,YTVPRVE_CODE CODE, YTVPRVE_DESCRIPCION DESCRIPCION, YTVPRVE_FECHA_ACTIVIDAD FECHA,
        YTVPRVE_USUA_ID USUA_ID, YTVPRVE_IND_ESTADO IND_ESTADO
        FROM COMUMGR.YTVPRVE
        WHERE YTVPRVE_CODE=P_DATA;
    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_busca:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


        SELECT distinct COUNT(*) INTO  V_NUM_REG FROM SPRIDEN@PROD.INT.UPAO.EDU.PE WHERE
                SPRIDEN_CHANGE_IND IS NULL AND
                (REPLACE(SPRIDEN_LAST_NAME||SPRIDEN_FIRST_NAME||SPRIDEN_MI,' ','') LIKE UPPER('%'||v_busca||'%') OR SPRIDEN_ID=v_busca);
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT SPRIDEN_PIDM PK_ACCION, SPRIDEN_PIDM PIDM, SPRIDEN_ID ID_USUARIO,SPRIDEN_LAST_NAME APELLIDOS, SPRIDEN_FIRST_NAME||' '||SPRIDEN_MI NOMBRE
                FROM SPRIDEN@PROD.INT.UPAO.EDU.PE WHERE
                SPRIDEN_CHANGE_IND IS NULL AND
                (REPLACE(SPRIDEN_LAST_NAME||SPRIDEN_FIRST_NAME||SPRIDEN_MI,' ','') LIKE UPPER('%'||v_busca||'%') OR SPRIDEN_ID=v_busca)) XX



          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;


    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;








PROCEDURE KYT_DOCU_DOCU_PP_TBRACCD_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_busca varchar2(40);

    v_documento varchar2(20);
    v_requ varchar2(20);
    v_id_usua varchar2(20);
    V_FECHA_PROC VARCHAR2(20);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
        SELECT YTVPRVE_CODE PK_ACCION,YTVPRVE_CODE CODE, YTVPRVE_DESCRIPCION DESCRIPCION, YTVPRVE_FECHA_ACTIVIDAD FECHA,
        YTVPRVE_USUA_ID USUA_ID, YTVPRVE_IND_ESTADO IND_ESTADO
        FROM COMUMGR.YTVPRVE
        WHERE YTVPRVE_CODE=P_DATA;

    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_busca:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

    v_documento:=ky_json.campo(jsonObj, 'p_num_doc');
    v_requ:=ky_json.campo(jsonObj, 'p_num_req');


       SELECT YTBDOCU_USUA_ID INTO v_id_usua FROM YTBDOCU WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=v_documento;

       SELECT TO_CHAR(NVL(YTAPROC_FECHA_INI_APL_PAGO,SYSDATE),'DD/MM/YYYY') INTO V_FECHA_PROC
        FROM COMUMGR.YTAPROC
        WHERE YTAPROC_CODE IN(SELECT YTBDOCU_PLAN_PROC_CODE
        FROM COMUMGR.YTBDOCU XX WHERE XX.YTBDOCU_CODE||'-'||XX.YTBDOCU_SEQ=v_documento);

    OPEN CURSOR_OUT FOR
        select xx.*
  from(SELECT TBRACCD_RECEIPT_NUMBER RECIBO,
         TBRACCD_TERM_CODE PERIODO,
         TBBDETC_DETAIL_CODE AS CONCEPTO,
         TBRACCD_DESC DESCRIPCION,
         FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) PAGO,
         FT_UPAO_GET_FECHA_PAGO@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER) FECHA,
         SPRIDEN_ID ID,
         SPRIDEN_FIRST_NAME ||' '||spriden_mi NOMBRES, spriden_last_name APELLIDOS
    FROM TBRACCD@PROD.INT.UPAO.EDU.PE,TBBDETC@PROD.INT.UPAO.EDU.PE,SPRIDEN@PROD.INT.UPAO.EDU.PE
   WHERE TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
     AND TBRACCD_PIDM=SPRIDEN_PIDM
     AND TBRACCD_AMOUNT > 0
     AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'
   --  AND (TBRACCD_DESC LIKE '%BIBLIO%' OR TBRACCD_DETAIL_CODE = '0125' )-- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET -- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET
    /* AND TBRACCD_DETAIL_CODE IN(SELECT YTRCOPA_DETAIL_CODE
                                    FROM YTRCOPA
                                    WHERE
                                    YTRCOPA_IND_ESTADO='A' AND YTRCOPA_PROC_CODE=(SELECT XX.YTBDOCU_PLAN_PROC_CODE
                                                                FROM YTBDOCU XX WHERE XX.YTBDOCU_CODE=v_documento))*/

    AND TBRACCD_DETAIL_CODE IN( SELECT YTRREDO_CONCEPTO_PAGO FROM YTRREDO
                                WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=v_documento  AND YTRREDO_TIRE_CODE='REC'
                               UNION
                               SELECT YTVCOPR_DETAIL_CODE FROM COMUMGR.YTVCOPR WHERE TRIM(YTVCOPR_REQU_CODE) IN(SELECT TRIM(YTRREDO_REQU_CODE) FROM YTRREDO
                                                                                                    WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=v_documento
                                                                                                    AND YTRREDO_TIRE_CODE='REC') AND YTVCOPR_IND_ESTADO='A')  --VERIFICA EN RECIBOS ADICIONALES


    AND TBBDETC_TYPE_IND='C'
     AND SPRIDEN_CHANGE_IND IS NULL
     AND SPRIDEN_ID=v_id_usua
   /*  AND NOT EXISTS(
          SELECT 'Y'
            FROM WWVCARB
           WHERE WWVCARB_NRO_RECIBO = TBRACCD_RECEIPT_NUMBER
             --AND WWVCARB_ACTIVITY_DATE = TBRACCD_ACTIVITY_DATE
     )*/
   ORDER BY TBRACCD_RECEIPT_NUMBER DESC,TBRACCD_TERM_CODE DESC) XX
   WHERE TO_date(FECHA,'dd/mm/yyyy')>=TO_date(V_FECHA_PROC,'dd/mm/yyyy');


    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;



PROCEDURE KYT_DOCU_DOCU_PP_TBRACCD_CU1(P_ID IN VARCHAR2,P_NUM_REQ IN VARCHAR2,P_NUM_DOC IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)
IS
BEGIN
  OPEN CURSOR_OUT FOR
  select xx.*
  from(SELECT TBRACCD_RECEIPT_NUMBER RECIBO,
         TBRACCD_TERM_CODE PERIODO,
         TBBDETC_DETAIL_CODE AS CONCEPTO,
         TBRACCD_DESC DESCRIPCION,
         FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) PAGO,
         FT_UPAO_GET_FECHA_PAGO@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER) FECHA,
         SPRIDEN_ID ID,
         SPRIDEN_FIRST_NAME ||' '||spriden_mi NOMBRES, spriden_last_name APELLIDOS
    FROM TBRACCD@PROD.INT.UPAO.EDU.PE,TBBDETC@PROD.INT.UPAO.EDU.PE,SPRIDEN@PROD.INT.UPAO.EDU.PE
   WHERE TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
     AND TBRACCD_PIDM=SPRIDEN_PIDM
     AND TBRACCD_AMOUNT > 0
     AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'
   --  AND (TBRACCD_DESC LIKE '%BIBLIO%' OR TBRACCD_DETAIL_CODE = '0125' )-- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET -- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET
     AND TBRACCD_DETAIL_CODE IN(SELECT YTRCOPA_DETAIL_CODE
                                    FROM YTRCOPA
                                    WHERE
                                    YTRCOPA_IND_ESTADO='A' AND YTRCOPA_PROC_CODE=(SELECT XX.YTBDOCU_PLAN_PROC_CODE
                                                                FROM YTBDOCU XX WHERE XX.YTBDOCU_CODE=P_NUM_DOC))
     AND TBBDETC_TYPE_IND='C'
     AND SPRIDEN_CHANGE_IND IS NULL
     AND SPRIDEN_ID=P_ID
   /*  AND NOT EXISTS(
          SELECT 'Y'
            FROM WWVCARB
           WHERE WWVCARB_NRO_RECIBO = TBRACCD_RECEIPT_NUMBER
             --AND WWVCARB_ACTIVITY_DATE = TBRACCD_ACTIVITY_DATE
     )*/
   ORDER BY TBRACCD_RECEIPT_NUMBER DESC,TBRACCD_TERM_CODE DESC) XX
   WHERE TO_date(FECHA,'dd/mm/yyyy')>=TO_date('01/06/1995','dd/mm/yyyy');

   EXCEPTION
 WHEN OTHERS THEN
 ROLLBACK;
    RAISE_APPLICATION_ERROR(-20001,'eRROR AL LISTAR ' || SQLERRM);
END;


/*GENERICOS*/

function FYT_VALIDA_CONCEPTO_PAGO1(P_REQ in VARCHAR2,P_CONCEPTO IN VARCHAR2) return varchar2
IS

V_TEXTO varchar2(1000);
jsonArray        json_list;
jsonObj           json;
 DATA VARCHAR2(1000);
 CONDICION VARCHAR2(4);
 IND_MOSTRAR_MERITO VARCHAR2(2);
BEGIN
    SELECT YTBDOCU_CONDICION,YTBDOCU_DATA INTO CONDICION,DATA FROM YTBDOCU
    WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=(SELECT YTBDOCU_CODE ||'-'||YTBDOCU_SEQ  FROM YTRREDO WHERE YTRREDO_CODE=P_REQ AND YTRREDO_TIRE_CODE='REC');

    jsonArray := json_list(data);
    jsonObj := json(jsonArray.get(1));
    IND_MOSTRAR_MERITO:=json_ext.get_string(jsonObj, 'solimostrarmerito');

    IF(IND_MOSTRAR_MERITO='S' AND CONDICION='ES') THEN

       IF(P_CONCEPTO in('1146','UJ02')) THEN
        V_TEXTO:='1';
        ELSE
            V_TEXTO:='0';
       END IF;

    ELSIF(IND_MOSTRAR_MERITO='N' AND CONDICION='ES') THEN
       IF(P_CONCEPTO in('0128','UJ01')) THEN
        V_TEXTO:='1';
        ELSE
            V_TEXTO:='0';
       END IF;


    ELSIF(IND_MOSTRAR_MERITO='S' AND (CONDICION='EG' OR CONDICION='BA')) THEN

       IF(P_CONCEPTO in('1148','UJ04')) THEN
        V_TEXTO:='1';
        ELSE
            V_TEXTO:='0';
       END IF;
     ELSIF(IND_MOSTRAR_MERITO='N' AND (CONDICION='EG' OR CONDICION='BA')) THEN

       IF(P_CONCEPTO in('1147','UJ03') OR P_CONCEPTO in('1148','UJ04')) THEN
        V_TEXTO:='1';
        ELSE
            V_TEXTO:='0';
       END IF;
    END IF;

-- RETURN V_TEXTO;
 RETURN '1';

--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;



/*metodos de tabla YTRREPA*/



PROCEDURE KYT_DOCU_DOCU_PP_YTRREPA_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS


     V_APPL_CODE VARCHAR2(12);
     v_id_usua varchar2(20);
     v_code_req varchar2(20);
     V_UTILIZADO int;
     v_num_recibo varchar2(30);
     v_id_usua_reg varchar2(20);
     v_tipo varchar2(20);
     v_conceptopago varchar2(300);
     V_DOCU varchar2(20);
V_CERRADO varchar2(4);
V_VALIDADO varchar2(3);
V_EXISTE_RECIBO INT;
   --  P_CODE_REQ in varchar2,P_APPL_CODE IN VARCHAR2,P_NUM_RECIBO IN VARCHAR2,P_ID IN VARCHAR2,P_COMENTARIO IN VARCHAR2



      CURSOR DT(P_NUM_RECIBO VARCHAR2,P_ID VARCHAR2) IS
            SELECT TBRACCD_RECEIPT_NUMBER RECIBO,TBRACCD_TRAN_NUMBER TRAN_NUMBER,
         TBRACCD_TERM_CODE PERIODO,
         TBBDETC_DETAIL_CODE AS CONCEPTO,
         TBRACCD_DESC DESCRIPCION,
         FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) PAGO,
         FT_UPAO_GET_FECHA_PAGO@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER) FECHA,
         SPRIDEN_ID ID,
         SPRIDEN_FIRST_NAME ||' '||spriden_mi NOMBRES, spriden_last_name APELLIDOS
        FROM TBRACCD@PROD.INT.UPAO.EDU.PE,TBBDETC@PROD.INT.UPAO.EDU.PE,SPRIDEN@PROD.INT.UPAO.EDU.PE
        WHERE  TBRACCD_RECEIPT_NUMBER=P_NUM_RECIBO
        AND TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
        AND TBRACCD_PIDM=SPRIDEN_PIDM
        AND TBRACCD_AMOUNT > 0
        AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'
        --AND (TBRACCD_DESC LIKE '%BIBLIO%' OR TBRACCD_DETAIL_CODE = '0125' )-- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET -- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET
        AND TBBDETC_TYPE_IND='C'
        AND SPRIDEN_CHANGE_IND IS NULL
        AND SPRIDEN_ID=P_ID;

        DT_ROW DT%ROWTYPE;

        V_RECIBO INT;

    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

    V_APPL_CODE:=ky_json.campo(jsonObj, 'appl_code');
    v_code_req:=ky_json.campo(jsonObj, 'code_req');
   v_num_recibo:=ky_json.campo(jsonObj, 'num_recibo');
   v_id_usua_reg:=ky_json.campo(jsonObj, 'id_usua_reg');

   IF(P_ACCION='ADI') THEN


    SELECT YTBDOCU_USUA_ID INTO V_ID_USUA
    FROM YTRREDO AAA,YTBDOCU  BBB
    WHERE YTRREDO_CODE=v_code_req
    AND AAA.YTBDOCU_CODE=BBB.YTBDOCU_CODE;

        V_MSG:='Registro no pudo ser creado';

        --VERIFICAMOS SI EL RECIBO NO FUE UTILIZADO
            /*SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
            WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO;*/

        SELECT COUNT(*) INTO  V_RECIBO FROM YTRREPA
        WHERE YTRREPA_ACCD_RECEIPT_NUMBER=v_num_recibo AND YTRREPA_IND_ESTADO='A';

        IF( V_RECIBO=0) THEN
                SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
                WHERE YTRREPA_CODE_APP=v_code_req AND YTRREPA_APPL=V_APPL_CODE AND YTRREPA_IND_ESTADO='A';

            IF(V_UTILIZADO=0) THEN



SELECT NVL(MAX(YTRREPA_SEQ),0) INTO  V_EXISTE_RECIBO FROM YTRREPA
        WHERE YTRREPA_ACCD_RECEIPT_NUMBER=v_num_recibo;


                OPEN DT(v_num_recibo,V_ID_USUA);
                LOOP
                    FETCH DT INTO DT_ROW;
                    EXIT WHEN DT%NOTFOUND;

                   -- IF(FYT_VALIDA_CONCEPTO_PAGO1(v_code_req,DT_ROW.CONCEPTO)='1') THEN
                   IF('1'='1') THEN
                        INSERT INTO COMUMGR.YTRREPA (
                            YTRREPA_ACCD_RECEIPT_NUMBER, YTRREPA_ACCD_TRAN_NUMBER, YTRREPA_PIDM,
                            YTRREPA_TERM_CODE, YTRREPA_DETC_DETAIL_CODE, YTRREPA_ACCD_DESC,
                            YTRREPA_MONTO, YTRREPA_FECHA_PAGO, YTRREPA_FECHA_ACTIVIDAD,YTRREPA_CODE_APP, YTRREPA_APPL, YTRREPA_USUA_ID,YTRREPA_USUA_ID_REG,YTRREPA_SEQ)
                        VALUES (DT_ROW.RECIBO,DT_ROW.TRAN_NUMBER, BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(V_ID_USUA),
                            DT_ROW.PERIODO, DT_ROW.CONCEPTO, DT_ROW.DESCRIPCION, DT_ROW.PAGO, DT_ROW.FECHA, SYSDATE,v_code_req, V_APPL_CODE, V_ID_USUA, v_id_usua_reg,V_EXISTE_RECIBO+1 );

                        UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=v_code_req;
                        COMMIT;
                        V_MSG:='OK';

                    ELSE
                        V_MSG:='ERP-ERR CONCEPTO DE PAGO NO ES APLICABLE A ESTE TIPO DOCUMENTO VERIFICA LOS REQUISITOS DEL DOCUMENTO';
                    END IF;
                END LOOP;
                CLOSE  DT;
            --INDOICA QUE EVALUACIÓN DE RECIBO SE ACETA
        ELSE
            V_MSG:='ERP-ERR Ya existe un pago asignado a este requisito elimine primero el pago para asignar otro';
        END IF;

    ELSE
        V_MSG:='ERP-ERR EL RECIBO YA FUE UTILIZADO';
    END IF;











   ELSIF(P_ACCION='ACT') THEN

    if(v_tipo='REC' AND LENGTH(v_conceptopago)<2) THEN
     v_msg := 'ERP-ERR[DEBES INGRESAR CONCEPTO DE PAGO]';

    ELSE

    UPDATE COMUMGR.YTVPRVE
SET    YTVPRVE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
       YTVPRVE_FECHA_ACTIVIDAD = SYSDATE,
       YTVPRVE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTVPRVE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado')
WHERE  YTVPRVE_CODE            = trim(ky_json.campo(jsonObj, 'ytvprve_pk'));


     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
     END IF;

   ELSIF(P_ACCION='ELI') THEN

      V_MSG:='ERP-ERR';

    SELECT YTBDOCU_USUA_ID INTO V_ID_USUA
    FROM YTRREDO AAA,YTBDOCU  BBB
    WHERE YTRREDO_CODE=v_code_req
    AND AAA.YTBDOCU_CODE=BBB.YTBDOCU_CODE;

        SELECT YTBDOCU_CODE INTO V_DOCU FROM YTRREDO WHERE YTRREDO_CODE=v_code_req ;

        SELECT  COUNT(*) INTO V_CERRADO
        FROM YTBDOCU WHERE YTBDOCU_CODE=V_DOCU AND YTBDOCU_ESTA_CODE IN('AT','TR','CO');

        IF(V_CERRADO=0) THEN
            SELECT COUNT(*) INTO V_VALIDADO FROM YTRREDO WHERE YTRREDO_CODE=v_code_req AND YTRREDO_IND_ESTADO='V';

            IF (V_VALIDADO=0) THEN
                DELETE YTRREPA WHERE YTRREPA_CODE_APP=v_code_req AND YTRREPA_APPL=V_APPL_CODE;
                UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='N' WHERE YTRREDO_CODE=v_code_req;

                    IF(SQL%ROWCOUNT>0) THEN
                        v_msg := 'TRANSACCIÓN APLICADA';
                    ELSE
                        v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
                    END IF;
            ELSE
                V_MSG:='ERP-ERR NO PUEDES QUITAR EL PAGO DEL DOCUMENTO SI EL REQUISITO YA ESTA VALIDADO';
             END IF;
        ELSE
            V_MSG:='ERP-ERR DOCUMENTO ESTA EN PROCESO DE EVALUACIÓN/CERRADO NO SE PUEDEN HACER CAMBIOS';
        END IF;





   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;




/*FIN METODOS DE TABLA YTRUSUN*/




/*METODOS DE TABLA YTRDOOC(tabla de ocurrencias la entregar documento)*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRUSUN_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_codigo varchar2(10);
    v_usuario varchar2(40);
    v_organizacion varchar2(40);
    v_desc varchar2(40);
    v_estado varchar2(10);
    v_rol varchar2(10);
    v_unidad varchar(10);
    v_sub_uni varchar(10);
    v_f varchar2(30);
    v_fi date;
    v_ff date;
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR

        SELECT  XX.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') NOM_USUA
        FROM (
                SELECT
                YTRUSUN_CODE PK_ACCION,YTRUSUN_CODE CODE, YTRUSUN_USUA_ID USUA_ID, YTRUSUN_FECHA_ACTIVIDAD FECHA,
                YTRUSUN_USUA_ID_REG USUA_ID_REG, YTRUSUN_IND_ESTADO ESTADO, YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                YTRUSUN_COAS_CODE ORGN_COAS,YTRUNID_DESCRIPCION ORGANIZACION,YTRUSUN_UNID_CODE UNID_CODE,YTRUSUN_ROLU_CODE  ROL
                FROM COMUMGR.YTRUSUN ,YTRUNID
                WHERE YTRUSUN_CODE=P_DATA
                AND YTRUSUN_UNID_CODE=YTRUNID_CODE) XX;
               -- AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRUNID_ORGN_UPAO;

           /* SELECT
                YTRUSUN_CODE PK_ACCION,YTRUSUN_CODE CODE, YTRUSUN_USUA_ID USUA_ID, YTRUSUN_FECHA_ACTIVIDAD FECHA,
                YTRUSUN_USUA_ID_REG USUA_ID_REG, YTRUSUN_IND_ESTADO ESTADO, YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                YTRUSUN_COAS_CODE ORGN_COAS,FTVORGN_TITLE ORGANIZACION,YTRUSUN_UNID_CODE UNID_CODE
                FROM COMUMGR.YTRUSUN ,FTVORGN@PROD.INT.UPAO.EDU.PE
                WHERE YTRUSUN_CODE=P_DATA
                AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=FTVORGN_COAS_CODE||FTVORGN_ORGN_CODE;*/

    ELSIF(P_ACCION='LIP') THEN
       OPEN CURSOR_OUT  FOR
        /*SELECT YTRUNID_CODE UNID_CODE,YTRUNID_RUTA UNID_RUTA FROM COMUMGR.YTRUNID       WHERE     YTRUNID_PADRE='0' AND YTRUNID_ORGN_UPAO IN(
                SELECT DISTINCT YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE FROM COMUMGR.YTRUSUN
                        WHERE YTRUSUN_USUA_ID=P_DATA AND YTRUSUN_IND_ESTADO='A' )
                    AND       YTRUNID_IND_ESTADO='A' ;*/


                    SELECT YTRUNID_CODE UNID_CODE,YTRUNID_RUTA||'('|| YTRUNID_SIGLA||'-'|| YTRUNID_SEDE||')' UNID_RUTA
                    FROM COMUMGR.YTRUNID
                    WHERE     YTRUNID_PADRE<>'0'
                    AND YTRUNID_IND_PRINCIPAL='S' AND YTRUNID_CODE IN( SELECT DISTINCT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN
                                                                       WHERE YTRUSUN_USUA_ID=P_DATA AND YTRUSUN_IND_ESTADO='A' )
                    AND       YTRUNID_IND_ESTADO='A'
                    ORDER BY YTRUNID_RUTA ASC ;

        ELSIF(P_ACCION='LIPV2') THEN
             OPEN CURSOR_OUT  FOR
             SELECT YTRUNID_CODE UNID_CODE,YTRUNID_RUTA||'('|| YTRUNID_SIGLA||'-'|| YTRUNID_SEDE||')' UNID_RUTA
             FROM COMUMGR.YTRUNID
             WHERE     YTRUNID_PADRE<>'0'
             AND YTRUNID_IND_PRINCIPAL='S'
             AND       YTRUNID_IND_ESTADO='A'
             ORDER BY YTRUNID_RUTA ASC;


        ELSIF(P_ACCION='LIUU') THEN

             --jsonObj := json(P_DATA);

               OPEN CURSOR_OUT  FOR
                /*SELECT  XX.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
                        FROM (SELECT
                        YTRUSUN_CODE PK_ACCION,YTRUSUN_CODE CODE, YTRUSUN_USUA_ID USUA_ID, YTRUSUN_FECHA_ACTIVIDAD FECHA,
                        YTRUSUN_USUA_ID_REG USUA_ID_REG, YTRUSUN_IND_ESTADO ESTADO, YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                        YTRUSUN_COAS_CODE ORGN_COAS,YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,YTRUSUN_UNID_CODE UNID_CODE,YTRUSUN_ORGN_DESC ORGN_DESC
                        ,YTVROLU_DESCRIPCION ROL
                        FROM COMUMGR.YTRUSUN,COMUMGR.YTRUNID,COMUMGR.YTVROLU
                        WHERE YTRUNID_PADRE=P_DATA
                        AND YTRUNID_CODE=YTRUSUN_UNID_CODE AND YTRUSUN_ROLU_CODE=YTVROLU_CODE)  XX;*/

                 SELECT  XX.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
                  FROM (SELECT
                  YTRUSUN_CODE PK_ACCION,
                  YTRUSUN_CODE CODE,
                  YTRUSUN_USUA_ID USUA_ID,
                  YTRUSUN_FECHA_ACTIVIDAD FECHA,
                  YTRUSUN_USUA_ID_REG USUA_ID_REG,
                  YTRUSUN_IND_ESTADO ESTADO,
                  YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                  YTRUSUN_COAS_CODE ORGN_COAS,
                  YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,
                  YTRUSUN_UNID_CODE UNID_CODE,
                  YTRUSUN_ORGN_DESC ORGN_DESC
                  ,YTVROLU_DESCRIPCION ROL
                  FROM COMUMGR.YTRUSUN,
                  COMUMGR.YTRUNID,
                  COMUMGR.YTVROLU
                  WHERE --YTRUNID_PADRE=:P_DATA AND
                  YTRUNID_CODE=P_DATA
                  AND YTRUNID_CODE=YTRUSUN_UNID_CODE
                  AND YTRUSUN_ROLU_CODE=YTVROLU_CODE
                  ORDER BY YTRUSUN_USUA_ID) XX
                  ORDER BY NOM_USUA;

       ELSIF(P_ACCION='LIUU2') THEN

             --jsonObj := json(P_DATA);

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_codigo:=ky_json.campo(jsonObj, 'cod');
    v_usuario:=ky_json.campo(jsonObj, 'usu');
    v_rol:=ky_json.campo(jsonObj, 'rol');
    v_unidad:=ky_json.campo(jsonObj, 'unidad');
    v_sub_uni:=ky_json.campo(jsonObj, 'sub_uni');
    v_estado:=ky_json.campo(jsonObj, 'es');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

    SELECT  COUNT(*) INTO  V_NUM_REG
                FROM (SELECT AA.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
                FROM (SELECT
                        YTRUSUN_CODE PK_ACCION,
                        YTRUSUN_CODE CODE,
                        YTRUSUN_USUA_ID USUA_ID,
                        YTRUSUN_FECHA_ACTIVIDAD FECHA,
                        YTRUSUN_USUA_ID_REG USUA_ID_REG,
                        YTRUSUN_IND_ESTADO ESTADO,
                        YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                        YTRUSUN_COAS_CODE ORGN_COAS,
                        YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,
                        YTRUSUN_UNID_CODE UNID_CODE,
                        YTRUSUN_ORGN_DESC ORGN_DESC,
                        YTRUSUN_ROLU_CODE ROLU_CODE,
                        YTVROLU_DESCRIPCION ROL
                        FROM COMUMGR.YTRUSUN,COMUMGR.YTRUNID,COMUMGR.YTVROLU
                        WHERE YTRUNID_PADRE=v_unidad
                        AND YTRUNID_CODE=YTRUSUN_UNID_CODE AND YTRUSUN_ROLU_CODE=YTVROLU_CODE)  AA
                        WHERE ((v_codigo = '%') OR (CODE like '%' || v_codigo || '%'))
                        AND ((v_rol = '%') OR (UPPER(ROLU_CODE) like '%' || UPPER(v_rol) || '%'))
                        AND ((v_sub_uni = '%') OR (UPPER(UNID_CODE) like '%' || UPPER(v_sub_uni) || '%'))
                        AND ((v_estado = '%') OR (ESTADO = v_estado))
                        ) XX
                        WHERE ((v_usuario = '%') OR (UPPER(NOM_USUA) LIKE '%' || UPPER(v_usuario) || '%'));

     OPEN CURSOR_OUT  FOR

     SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT AA.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
                FROM (SELECT
                        YTRUSUN_CODE PK_ACCION,
                        YTRUSUN_CODE CODE,
                        YTRUSUN_USUA_ID USUA_ID,
                        YTRUSUN_FECHA_ACTIVIDAD FECHA,
                        YTRUSUN_USUA_ID_REG USUA_ID_REG,
                        YTRUSUN_IND_ESTADO ESTADO,
                        YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                        YTRUSUN_COAS_CODE ORGN_COAS,
                        YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,
                        YTRUSUN_UNID_CODE UNID_CODE,
                        YTRUSUN_ORGN_DESC ORGN_DESC,
                        YTRUSUN_ROLU_CODE ROLU_CODE,
                        YTVROLU_DESCRIPCION ROL
                        FROM COMUMGR.YTRUSUN,COMUMGR.YTRUNID,COMUMGR.YTVROLU
                        WHERE YTRUNID_PADRE=v_unidad
                        AND YTRUNID_CODE=YTRUSUN_UNID_CODE AND YTRUSUN_ROLU_CODE=YTVROLU_CODE)  AA
                        WHERE ((v_codigo = '%') OR (CODE like '%' || v_codigo || '%'))
                        AND ((v_rol = '%') OR (UPPER(ROLU_CODE) like '%' || UPPER(v_rol) || '%'))
                        AND ((v_sub_uni = '%') OR (UPPER(UNID_CODE) like '%' || UPPER(v_sub_uni) || '%'))
                        AND ((v_estado = '%') OR (ESTADO = v_estado))
                        ORDER BY NOM_USUA
                        ) XX
                        WHERE ((v_usuario = '%') OR (UPPER(NOM_USUA) LIKE '%' || UPPER(v_usuario) || '%'))
            ) TT
            WHERE NUM >= v_Ini AND NUM<= v_Fin;


    ELSIF(P_ACCION='LIUP') THEN
       OPEN CURSOR_OUT  FOR
        SELECT YTRUNID_CODE UNID_CODE,YTRUNID_RUTA UNID_RUTA FROM COMUMGR.YTRUNID       WHERE     YTRUNID_PADRE<>'0' AND YTRUNID_IND_PRINCIPAL='S'
                    AND       YTRUNID_IND_ESTADO='A';

    ELSIF(P_ACCION='LIHI') THEN
                   OPEN CURSOR_OUT  FOR
                    SELECT YTRUNID_CODE CODE,YTRUNID_RUTA DESCRIPCION
                    FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE=P_DATA AND YTRUNID_IND_ESTADO='A';
    ELSIF(P_ACCION='LIHI1') THEN
                   OPEN CURSOR_OUT  FOR
                    SELECT YTRUNID_CODE CODE,YTRUNID_RUTA DESCRIPCION
                    FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE=P_DATA AND YTRUNID_IND_PRINCIPAL='S' AND YTRUNID_IND_ESTADO='A';
                   
    ELSIF P_ACCION = 'LIUADMTES' THEN
        jsonObj := json(P_DATA);
        v_usuario:=ky_json.campo(jsonObj, 'usu');
        v_estado:=ky_json.campo(jsonObj, 'es');
        OPEN CURSOR_OUT FOR
        SELECT AA.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
        FROM (SELECT  YTRUSUN_CODE PK_ACCION,
                                YTRUSUN_CODE CODE,
                                YTRUSUN_USUA_ID USUA_ID,
                                YTRUSUN_FECHA_ACTIVIDAD FECHA,
                                YTRUSUN_USUA_ID_REG USUA_ID_REG,
                                YTRUSUN_IND_ESTADO ESTADO,
                                YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                                YTRUSUN_COAS_CODE ORGN_COAS,
                                YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,
                                YTRUSUN_UNID_CODE UNID_CODE,
                                YTRUSUN_ORGN_DESC ORGN_DESC,
                                YTRUSUN_ROLU_CODE ROLU_CODE,
                                YTVROLU_DESCRIPCION ROL,
                                U2.YTRUNID_PARAMETRO FAC_CODE,
                                U2.YTRUNID_SIGLA SIGLA
                        FROM COMUMGR.YTRUSUN,COMUMGR.YTRUNID U1,COMUMGR.YTVROLU, (SELECT * FROM YTRUNID WHERE (YTRUNID_DESCRIPCION  like '%SECRETARIA%GENERAL%') OR (YTRUNID_DESCRIPCION  like '%OFIC%SISTEMAS%') ) U2
                        WHERE U1.YTRUNID_PADRE = U2.YTRUNID_CODE
                        AND U1.YTRUNID_CODE=YTRUSUN_UNID_CODE
                        AND YTRUSUN_ROLU_CODE=YTVROLU_CODE                        
                        )  AA
        WHERE -- ((:v_codigo = '%') OR (CODE like '%' || :v_codigo || '%'))
        --AND ((v_rol = '%') OR (UPPER(ROLU_CODE) like '%' || UPPER(v_rol) || '%'))
        --AND ((:v_sub_uni = '%') OR (UPPER(UNID_CODE) like '%' || UPPER(:v_sub_uni) || '%'))
        ((v_estado = '%') OR (ESTADO = v_estado))
        AND USUA_ID = v_usuario;
                   
    ELSIF P_ACCION = 'LIUTES' THEN
    jsonObj := json(P_DATA);
    v_usuario:=ky_json.campo(jsonObj, 'usu');
    v_estado:=ky_json.campo(jsonObj, 'es');
        OPEN CURSOR_OUT FOR -- Devolver Datos de Usuario configurados a Facultad para Gestión de Tesis
        SELECT AA.*,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
        FROM (SELECT  YTRUSUN_CODE PK_ACCION,
                                YTRUSUN_CODE CODE,
                                YTRUSUN_USUA_ID USUA_ID,
                                YTRUSUN_FECHA_ACTIVIDAD FECHA,
                                YTRUSUN_USUA_ID_REG USUA_ID_REG,
                                YTRUSUN_IND_ESTADO ESTADO,
                                YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                                YTRUSUN_COAS_CODE ORGN_COAS,
                                YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,
                                YTRUSUN_UNID_CODE UNID_CODE,
                                YTRUSUN_ORGN_DESC ORGN_DESC,
                                YTRUSUN_ROLU_CODE ROLU_CODE,
                                YTVROLU_DESCRIPCION ROL,
                                U2.YTRUNID_PARAMETRO FAC_CODE,
                                U2.YTRUNID_SIGLA SIGLA
                        FROM COMUMGR.YTRUSUN,COMUMGR.YTRUNID U1,COMUMGR.YTVROLU, (SELECT * FROM YTRUNID WHERE (YTRUNID_DESCRIPCION like '%FACULTAD DE%') OR (YTRUNID_DESCRIPCION LIKE '%ESCUELA DE POSGRADO%') ) U2
                        WHERE U1.YTRUNID_PADRE = U2.YTRUNID_CODE
                        AND U1.YTRUNID_CODE=YTRUSUN_UNID_CODE AND YTRUSUN_ROLU_CODE=YTVROLU_CODE                        
                        )  AA
        WHERE -- ((:v_codigo = '%') OR (CODE like '%' || :v_codigo || '%'))
        --AND ((v_rol = '%') OR (UPPER(ROLU_CODE) like '%' || UPPER(v_rol) || '%'))
        --AND ((:v_sub_uni = '%') OR (UPPER(UNID_CODE) like '%' || UPPER(:v_sub_uni) || '%'))
        ((v_estado = '%') OR (ESTADO = v_estado))
        AND USUA_ID = v_usuario;
       

    ELSE   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


    if(v_desc='%') then
        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUSUN ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE,BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT
                YTRUSUN_CODE PK_ACCION,YTRUSUN_CODE CODE, YTRUSUN_USUA_ID USUA_ID, YTRUSUN_FECHA_ACTIVIDAD FECHA,
                YTRUSUN_USUA_ID_REG USUA_ID_REG, YTRUSUN_IND_ESTADO ESTADO, YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                YTRUSUN_COAS_CODE ORGN_COAS,YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,YTRUSUN_UNID_CODE UNID_CODE,YTRUSUN_ORGN_DESC ORGN_DESC
                FROM COMUMGR.YTRUSUN,YTRUNID
                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRUNID_ORGN_UPAO) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
    else

    SELECT COUNT(*) INTO  V_NUM_REG

              FROM(SELECT YTRUSUN_COAS_CODE,FTVORGN_TITLE,YTRUSUN_USUA_ID FROM COMUMGR.YTRUSUN ,FTVORGN@PROD.INT.UPAO.EDU.PE
                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=FTVORGN_COAS_CODE||FTVORGN_ORGN_CODE)
    WHERE (FTVORGN_TITLE LIKE '%'||UPPER(v_desc)||'%' OR  YTRUSUN_USUA_ID =UPPER(v_desc)) ;

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT AA.*, BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(USUA_ID),'X') ||'(<span style="color:red">' || USUA_ID ||'</span>)' NOM_USUA
                FROM(SELECT DISTINCT -- SE AGREGA DISTINCT 16/09/2021 PARA ELIMINAR DUPLICADOS
                YTRUSUN_CODE PK_ACCION,YTRUSUN_CODE CODE, YTRUSUN_USUA_ID USUA_ID, YTRUSUN_FECHA_ACTIVIDAD FECHA,
                YTRUSUN_USUA_ID_REG USUA_ID_REG, YTRUSUN_IND_ESTADO ESTADO, YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE ORGN_CODE,
                YTRUSUN_COAS_CODE ORGN_COAS,YTRUSUN_ORGN_DESC||'(<span style="color:blue;font-weight:bold;">' || YTRUSUN_UNID_CODE ||'</span>)' ORGANIZACION,YTRUSUN_UNID_CODE UNID_CODE,YTRUSUN_ORGN_DESC ORGN_DESC
                FROM COMUMGR.YTRUSUN ,YTRUNID
                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRUNID_ORGN_UPAO) AA
                WHERE replace(ORGN_DESC,' ','') LIKE '%'||UPPER(REPLACE(v_desc,' ',''))||'%' OR  USUA_ID =UPPER(v_desc)) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    end if;

    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRUSUN_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;


    v_tipo varchar2(5);
    v_orden varchar2(8);
    v_conceptopago varchar2(20);
     v_documento varchar2(20);
     v_existe_aprob int;

     V_DOC  varchar2(20);
     V_DOC_SEQ  varchar2(5);
     V_APRO_SEQ  INT;
     V_ENORDEN INT;

     V_ORDEN_COAS VARCHAR2(20);
     V_ORDEN_ORGN VARCHAR2(20);
     v_coas_orgn varchar2(25);

     V_CODE VARCHAR2(10);
     V_COAS VARCHAR2(10);
     V_CODEORG  VARCHAR2(10);
     v_DEPENDENCIA VARCHAR2(20);
     v_DEPENDENCIA_desc VARCHAR2(120);

    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');
V_ENORDEN:=0;
   v_orden:=ky_json.campo(jsonObj, 'orden');
   v_documento:=ky_json.campo(jsonObj, 'documento');
   v_coas_orgn:=ky_json.campo(jsonObj, 'coas_orgn');
   v_DEPENDENCIA:=ky_json.campo(jsonObj, 'p_dependencia_code');
   v_DEPENDENCIA_desc:=ky_json.campo(jsonObj, 'p_dependencia_desc');

   IF(P_ACCION='ADI') THEN

  --Dim YTRUSUN As New Dictionary(Of String, String) From {{"ytrusun_pk", p_pk}, {"p_coas", p_coas},
  --{"usua_id", Me.usuario}, {"ind_estado", UPAO.utilidades.activo_inactivo(p_estado)}, {"p_descorg", p_descorg}, {"p_orgn_code", p_orgn_code}, {"p_nomusuario", p_nomusuario}, {"p_id", p_id}}

    --OBTENER LOS CODIGOS DE LAS ORGANIZACIONES UPAO
    SELECT SUBSTR(TB.YTRUNID_ORGN_UPAO,1,1) COAS,SUBSTR(TB.YTRUNID_ORGN_UPAO,2,10) CODE INTO V_COAS,V_CODEORG FROM YTRUNID TA, YTRUNID TB
        WHERE TA.YTRUNID_CODE=v_DEPENDENCIA
        AND TA.YTRUNID_PADRE=TB.YTRUNID_CODE;

    SELECT LPAD(TO_NUMBER(NVL(MAX(YTRUSUN_CODE),0))+1,5,'0') INTO V_CODE FROM YTRUSUN   ;


        INSERT INTO COMUMGR.YTRUSUN(YTRUSUN_CODE, YTRUSUN_USUA_ID, YTRUSUN_FECHA_ACTIVIDAD,
        YTRUSUN_USUA_ID_REG, YTRUSUN_IND_ESTADO, YTRUSUN_ORGN_CODE,YTRUSUN_COAS_CODE,YTRUSUN_ORGN_DESC,YTRUSUN_UNID_CODE,YTRUSUN_rolu_code)
        VALUES (V_CODE,
                ky_json.campo(jsonObj, 'p_id'),
                SYSDATE,
                ky_json.campo(jsonObj, 'usua_id'),
                ky_json.campo(jsonObj, 'ind_estado'),
                V_CODEORG,
                V_COAS,
                v_DEPENDENCIA_desc,v_DEPENDENCIA,ky_json.campo(jsonObj, 'p_rol'));

     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN



        UPDATE COMUMGR.YTRUSUN
        SET
                YTRUSUN_FECHA_ACTIVIDAD = sysdate,
                YTRUSUN_USUA_ID_REG     = ky_json.campo(jsonObj, 'usua_id'),
                YTRUSUN_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                YTRUSUN_ROLU_CODE       = ky_json.campo(jsonObj, 'p_rol'),
                YTRUSUN_UNID_CODE       = ky_json.campo(jsonObj, 'p_dependencia_code'),
                YTRUSUN_ORGN_DESC       = ky_json.campo(jsonObj, 'p_dependencia_desc')
        WHERE  YTRUSUN_CODE             = ky_json.campo(jsonObj, 'ytrusun_pk');
        IF(SQL%ROWCOUNT>0) THEN
        v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
        v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR REGISTRO SELECCIONADO]' ;
     END IF;




   ELSIF(P_ACCION='ELI') THEN
     DELETE YTRUSUN WHERE YTRUSUN_CODE=trim(ky_json.campo(jsonObj, 'ytrusun_pk'));
     IF(SQL%ROWCOUNT>0) THEN
        v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
        v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
     END IF;

   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTRUSUN*/





/*FIN METODOS DE TABLA YTRUNID*/




/*METODOS DE TABLA YTRDOOC(tabla de ocurrencias la entregar documento)*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRUNID_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_org_upao varchar2(20);
    v_usu varchar2(40);
    v_estado varchar2(40);
    v_conten varchar2(40);
    v_pk varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,
                YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID
                WHERE YTRUNID_CODE=P_DATA;

     ELSIF(P_ACCION='UNI1') THEN   --UNIDADES HIJAS

     OPEN CURSOR_OUT  FOR
     SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
     YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
     ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
     FROM COMUMGR.YTRUNID WHERE YTRUNID_CODE=P_DATA AND YTRUNID_PADRE<>'0';




     ELSIF(P_ACCION='LPU') THEN   --LISTA DE PUESTOS POR UNIDAD

        SELECT YTRUNID_ORGN_UPAO into v_org_upao FROM (SELECT YTRUNID_CODE, YTRUNID_DESCRIPCION, level,YTRUNID_PADRE PADRE,YTRUNID_ORGN_UPAO
        FROM YTRUNID
        START WITH YTRUNID_CODE = P_DATA
        CONNECT BY  PRIOR  YTRUNID_PADRE=YTRUNID_CODE)
        WHERE PADRE='0';

                OPEN CURSOR_OUT  FOR
                  SELECT null CODE, null DESCRIPCION from dual;
                /*SELECT DISTINCT NBBPOSN_POSN CODE,NBBPOSN_TITLE DESCRIPCION
                FROM RRRMPLA ,NBBPOSN@PROD.INT.UPAO.EDU.PE
                WHERE RRRMPLA_COAS||RRRMPLA_ORGA_ORIG=v_org_upao
                AND  RRRMPLA_PUESTO_PRINC=NBBPOSN_POSN;*/

      ELSIF(P_ACCION='LPA') THEN   --LISTA DE PUESTOS POR UNIDAD

                OPEN CURSOR_OUT  FOR
                SELECT null CODE, null DESCRIPCION from dual;
                /*
                SELECT DISTINCT NBBPOSN_POSN CODE,NBBPOSN_TITLE DESCRIPCION
                FROM RRRMPLA ,NBBPOSN@PROD.INT.UPAO.EDU.PE
                WHERE RRRMPLA_COAS||RRRMPLA_ORGA_ORIG=v_org_upao
                AND  RRRMPLA_PUESTO_PRINC=NBBPOSN_POSN;*/




    ELSIF(P_ACCION='PAD') THEN   --LIS
                OPEN CURSOR_OUT  FOR
                SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID
                WHERE YTRUNID_PADRE='0'
                ORDER BY YTRUNID_DESCRIPCION;

    ELSIF(P_ACCION='LIS') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

    v_usu := ky_json.campo(jsonObj, 'usu');
    v_estado := ky_json.campo(jsonObj, 'es');
    v_conten := ky_json.campo(jsonObj, 'cont');

            SELECT COUNT(*) INTO  V_NUM_REG
            FROM COMUMGR.YTRUNID
            WHERE (trim(replace(replace(translate(upper(YTRUNID_RUTA),'áéíóúÁÉÍÓÚüÜ','aeiouAEIOUuU'),chr(10),''),chr(13),'')) LIKE '%'|| UPPER(v_desc) ||'%'
            or YTRUNID_sigla LIKE  '%'||UPPER(v_desc)||'%'
            or YTRUNID_code LIKE  '%'||v_desc||'%'
            or YTRUNID_ORGN_UPAO LIKE '%'||v_desc||'%')
            AND YTRUNID_USUA_ID LIKE '%'||UPPER(v_usu)||'%'
            AND YTRUNID_IND_ESTADO LIKE '%'||UPPER(v_estado)||'%'
            AND YTRUNID_CONTENEDORA LIKE '%'||UPPER(v_conten)||'%'
            AND YTRUNID_PADRE = 0 AND YTRUNID_NIVEL = 1
            ORDER BY YTRUNID_RUTA;

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,
                YTRUNID_CODE CODE,
                YTRUNID_DESCRIPCION DESCRIPCION,
                YTRUNID_PADRE PADRE,
                YTRUNID_FECHA_ACTIVIDAD FECHA,
                YTRUNID_USUA_ID USUA_ID,
                YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO,
                YTRUNID_RUTA RUTA,
                YTRUNID_CORREO CORREO,
                YTRUNID_CONTENEDORA CONTENEDORA,
                YTRUNID_DEPENDE DEPENDE,
                YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,
                YTRUNID_SIGLA SIGLA,
                YTRUNID_SEDE SEDE,
                YTRUNID_NIVEL NIVEL
                FROM COMUMGR.YTRUNID
                WHERE (trim(replace(replace(translate(upper(YTRUNID_RUTA),'áéíóúÁÉÍÓÚüÜ','aeiouAEIOUuU'),chr(10),''),chr(13),'')) LIKE '%'|| UPPER(v_desc) ||'%'
                or YTRUNID_sigla LIKE  '%'||UPPER(v_desc)||'%'
                or YTRUNID_code LIKE  '%'||v_desc||'%'
                or YTRUNID_ORGN_UPAO LIKE '%'||v_desc||'%')
                AND YTRUNID_USUA_ID LIKE '%'||UPPER(v_usu)||'%'
                AND YTRUNID_IND_ESTADO LIKE '%'||UPPER(v_estado)||'%'
                AND YTRUNID_CONTENEDORA LIKE '%'||UPPER(v_conten)||'%'
                AND YTRUNID_PADRE = 0 AND YTRUNID_NIVEL = 1
                ORDER BY YTRUNID_RUTA) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;


    ELSIF(P_ACCION='LISSUNI') THEN   --LISSUNI

        jsonObj := json(P_DATA);
        v_PaginaSize := ky_json.campo(jsonObj, 'nre');
        v_Pagina:=ky_json.campo(jsonObj, 'pag');
        v_pk:=ky_json.campo(jsonObj, 'p_pk');
        v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
        v_Fin:= v_PaginaSize * v_Pagina;

            SELECT COUNT(*) INTO  V_NUM_REG
            FROM COMUMGR.YTRUNID
            WHERE YTRUNID_PADRE=v_pk;

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE,
             (SELECT COUNT(*) FROM COMUMGR.YTRUSUN WHERE YTRUSUN_UNID_CODE = CODE AND YTRUSUN_ROLU_CODE IS NOT NULL ) CANT_USU
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,
                YTRUNID_CODE CODE,
                YTRUNID_DESCRIPCION DESCRIPCION,
                YTRUNID_PADRE PADRE,
                YTRUNID_FECHA_ACTIVIDAD FECHA,
                YTRUNID_USUA_ID USUA_ID,
                YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO,
                YTRUNID_RUTA RUTA,
                YTRUNID_CORREO CORREO,
                YTRUNID_CONTENEDORA CONTENEDORA,
                YTRUNID_DEPENDE DEPENDE,
                YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,
                YTRUNID_SIGLA SIGLA,
                YTRUNID_SEDE SEDE,
                YTRUNID_NIVEL NIVEL
                FROM COMUMGR.YTRUNID
                WHERE YTRUNID_PADRE=v_pk
                ORDER BY YTRUNID_IND_PRINCIPAL DESC, YTRUNID_DESCRIPCION ASC) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;


     ELSIF(P_ACCION='LIUP') THEN   --LIS
                OPEN CURSOR_OUT  FOR
                SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, REPLACE(YTRUNID_RUTA,' / JEFATURA','') DESCRIPCION, YTRUNID_PADRE PADRE,     YTRUNID_USUA_ID USUA_ID,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE<>'0' AND YTRUNID_IND_ESTADO='A' AND YTRUNID_IND_PRINCIPAL='S' order by DESCRIPCION asc;



      ELSIF(P_ACCION='LIP') THEN   --LIS lista solo padres
        jsonObj := json(P_DATA);
        v_PaginaSize := ky_json.campo(jsonObj, 'nre');
        v_Pagina:=ky_json.campo(jsonObj, 'pag');
        v_desc:=ky_json.campo(jsonObj, 'b');
        v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
        v_Fin:= v_PaginaSize * v_Pagina;

        if(v_desc='%') then

        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUNID WHERE YTRUNID_PADRE='0'  AND YTRUNID_IND_ESTADO='A';
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE='0' AND YTRUNID_IND_ESTADO='A' order by DESCRIPCION asc) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
       ELSE

        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUNID WHERE YTRUNID_PADRE='0'   AND YTRUNID_IND_ESTADO='A' AND YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%';
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE='0' AND    YTRUNID_IND_ESTADO='A' AND
                (YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%' OR YTRUNID_CODE LIKE v_desc ||'%')) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

       END IF;

        ELSIF(P_ACCION='LIP1') THEN   --LIS lista solo padres
        jsonObj := json(P_DATA);
        v_PaginaSize := ky_json.campo(jsonObj, 'nre');
        v_Pagina:=ky_json.campo(jsonObj, 'pag');
        v_desc:=ky_json.campo(jsonObj, 'b');
        v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
        v_Fin:= v_PaginaSize * v_Pagina;

        if(v_desc='%') then

        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUNID WHERE YTRUNID_PADRE='0'  ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE='0'  order by DESCRIPCION asc) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
       ELSE

        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUNID WHERE YTRUNID_PADRE='0'   AND  YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%';
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID WHERE YTRUNID_PADRE='0' AND
                (YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%' OR YTRUNID_CODE LIKE v_desc ||'%')) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

       END IF;


    ELSIF(P_ACCION='LIH') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;




    if(v_desc='%') then
        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUNID ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID AA WHERE YTRUNID_PADRE<>'0' AND 'A'=(SELECT YTRUNID_IND_ESTADO FROM YTRUNID BB WHERE BB.YTRUNID_CODE=AA.YTRUNID_PADRE) ORDER BY YTRUNID_RUTA ) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
    else

            SELECT COUNT(*) INTO  V_NUM_REG
            FROM COMUMGR.YTRUNID AA WHERE YTRUNID_PADRE<>'0' AND 'A'=(SELECT YTRUNID_IND_ESTADO FROM YTRUNID BB WHERE BB.YTRUNID_CODE=AA.YTRUNID_PADRE) AND YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%' ;

        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                FROM COMUMGR.YTRUNID AA WHERE YTRUNID_PADRE<>'0' AND 'A'=(SELECT YTRUNID_IND_ESTADO FROM YTRUNID BB WHERE BB.YTRUNID_CODE=AA.YTRUNID_PADRE) AND YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%' ORDER BY YTRUNID_RUTA) XX
          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    end if;


    ELSIF(P_ACCION='LIUN') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


                SELECT COUNT(*) INTO V_NUM_REG
                FROM COMUMGR.YTRUNID
                WHERE   YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%' AND YTRUNID_PADRE<>'0' AND YTRUNID_IND_ESTADO='A' AND YTRUNID_IND_PRINCIPAL='S';

                OPEN CURSOR_OUT  FOR
                SELECT TT.*,
                     V_NUM_REG TOTAL,
                     V_PAGINASIZE PAGINASIZE
                     FROM (SELECT ROWNUM AS NUM,XX.*
                        FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, REPLACE(YTRUNID_RUTA,' / JEFATURA','') DESCRIPCION, YTRUNID_PADRE PADRE,     YTRUNID_USUA_ID USUA_ID,
                        YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA,YTRUNID_CORREO CORREO,YTRUNID_CONTENEDORA CONTENEDORA,YTRUNID_DEPENDE DEPENDE,YTRUNID_PARAMETRO PARAMETRO
                        ,YTRUNID_IND_PRINCIPAL IND_PRINCIPAL,YTRUNID_SIGLA SIGLA,YTRUNID_SEDE SEDE
                        FROM COMUMGR.YTRUNID
                        WHERE   YTRUNID_RUTA LIKE '%'||UPPER(v_desc)||'%' AND YTRUNID_PADRE<>'0' AND YTRUNID_IND_ESTADO='A' AND YTRUNID_IND_PRINCIPAL='S' order by DESCRIPCION asc ) XX


                  ) TT
               WHERE NUM >= v_Ini AND NUM<= v_Fin;

    ELSIF(P_ACCION='LIUE') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;


                SELECT COUNT(*) INTO V_NUM_REG
                FROM COMUMGR.YTVINST
                WHERE   YTVINST_DESCRIPCION LIKE '%'||UPPER(v_desc)||'%'  AND YTVINST_IND_ESTADO='A' ;

                OPEN CURSOR_OUT  FOR
                SELECT TT.*,
                     V_NUM_REG TOTAL,
                     V_PAGINASIZE PAGINASIZE
                     FROM (SELECT ROWNUM AS NUM,XX.*
                        FROM (SELECT YTVINST_CODE PK_ACCION,YTVINST_CODE CODE,YTVINST_DESCRIPCION DESCRIPCION, YTVINST_USUA_ID USUA_ID

                        FROM COMUMGR.YTVINST
                        WHERE   YTVINST_DESCRIPCION LIKE '%'||UPPER(v_desc)||'%' AND YTVINST_IND_ESTADO='A' order by DESCRIPCION asc ) XX


                  ) TT
               WHERE NUM >= v_Ini AND NUM<= v_Fin;


    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRUNID_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;


    v_tipo varchar2(5);
    v_orden varchar2(8);
    v_conceptopago varchar2(20);
     v_documento varchar2(20);
     v_existe_aprob int;

     V_DOC  varchar2(20);
     V_DOC_SEQ  varchar2(5);
     V_APRO_SEQ  INT;
     V_ENORDEN INT;

     V_ORDEN_COAS VARCHAR2(20);
     V_ORDEN_ORGN VARCHAR2(20);
     v_coas_orgn varchar2(25);

     V_CODE VARCHAR2(10);
     v_existe int;
     v_nivel int;
     v_desc_padre varchar2(100);

     V_CODE_1 VARCHAR2(10);
     v_siglas varchar2(30);
     V_YAESTA INT;
     V_CODE_UNID  VARCHAR2(20);

    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');
V_ENORDEN:=0;

   IF(P_ACCION='ADI') THEN

   v_siglas:=ky_json.campo(jsonObj, 'p_siglas');

  --Dim YTRUSUN As New Dictionary(Of String, String) From {{"ytrusun_pk", p_pk}, {"p_coas", p_coas},
  --{"usua_id", Me.usuario}, {"ind_estado", UPAO.utilidades.activo_inactivo(p_estado)}, {"p_descorg", p_descorg}, {"p_orgn_code", p_orgn_code}, {"p_nomusuario", p_nomusuario}, {"p_id", p_id}}

        SELECT LPAD(TO_NUMBER(NVL(MAX(YTRUNID_CODE),0))+1,6,'0') INTO V_CODE FROM YTRUNID   ;
         IF ky_json.campo(jsonObj, 'padre')='0' THEN
         v_nivel:='1';
         ELSE
         v_nivel:='2';
         SELECT YTRUNID_DESCRIPCION||' / ' INTO v_desc_padre FROM YTRUNID  WHERE YTRUNID_CODE=ky_json.campo(jsonObj, 'padre');
         END IF;

         SELECT COUNT(*) INTO V_YAESTA
         FROM COMUMGR.YTRUNID WHERE UPPER(YTRUNID_SIGLA)=UPPER(v_siglas) ;

           IF V_YAESTA=0 THEN

               INSERT INTO COMUMGR.YTRUNID (
               YTRUNID_CODE, YTRUNID_DESCRIPCION, YTRUNID_PADRE,
               YTRUNID_FECHA_ACTIVIDAD, YTRUNID_USUA_ID, YTRUNID_IND_ESTADO,
               YTRUNID_ORGN_UPAO, YTRUNID_RUTA, YTRUNID_NIVEL,YTRUNID_CORREO,YTRUNID_CONTENEDORA,YTRUNID_DEPENDE,
               YTRUNID_PARAMETRO,YTRUNID_IND_PRINCIPAL,YTRUNID_SEDE)
            VALUES ( V_CODE,
                    upper(ky_json.campo(jsonObj, 'descripcion')),
                    UPPER(ky_json.campo(jsonObj, 'padre')),
                    SYSDATE,
                    ky_json.campo(jsonObj, 'usua_id'),
                    ky_json.campo(jsonObj, 'ind_estado'),
                    ky_json.campo(jsonObj, 'org_upao'),
                    UPPER(v_desc_padrE||ky_json.campo(jsonObj, 'descripcion')),
                    v_nivel,ky_json.campo(jsonObj, 'correo'),ky_json.campo(jsonObj, 'contenedora'),
                    ky_json.campo(jsonObj, 'depende'),ky_json.campo(jsonObj, 'parametro'),ky_json.campo(jsonObj, 'principal')
                    ,ky_json.campo(jsonObj, 'p_sede'));

                    IF(v_nivel='1') THEN
                     SELECT LPAD(TO_NUMBER(NVL(MAX(YTRUNID_CODE),0))+1,6,'0') INTO V_CODE_1 FROM YTRUNID   ;
                       INSERT INTO COMUMGR.YTRUNID (
               YTRUNID_CODE, YTRUNID_DESCRIPCION, YTRUNID_PADRE,
               YTRUNID_FECHA_ACTIVIDAD, YTRUNID_USUA_ID, YTRUNID_IND_ESTADO,
               YTRUNID_ORGN_UPAO, YTRUNID_RUTA, YTRUNID_NIVEL,YTRUNID_CORREO,YTRUNID_CONTENEDORA,YTRUNID_DEPENDE,YTRUNID_PARAMETRO,YTRUNID_sigla,
               ytrunid_sede)
            VALUES ( V_CODE_1,
                    upper(ky_json.campo(jsonObj, 'descripcion')),
                    V_CODE,
                    SYSDATE,
                    ky_json.campo(jsonObj, 'usua_id'),
                    ky_json.campo(jsonObj, 'ind_estado'),
                    '',
                    upper(ky_json.campo(jsonObj, 'descripcion')||' / '||ky_json.campo(jsonObj, 'descripcion')),
                    2,ky_json.campo(jsonObj, 'correo'),ky_json.campo(jsonObj, 'contenedora'),ky_json.campo(jsonObj, 'depende'),
                    ky_json.campo(jsonObj, 'parametro'),v_siglas,ky_json.campo(jsonObj, 'p_sede'));
                    END IF;

                 v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
        ELSE
              v_msg := 'ERP-ERR YA EXISTE UNA UNIDAD CON ESAS SIGLAS';
        END IF;

   ELSIF(P_ACCION='ACT') THEN

        v_siglas:=ky_json.campo(jsonObj, 'p_siglas');
        V_CODE_UNID:=ky_json.campo(jsonObj, 'ytrunid_pk');


         SELECT COUNT(*) INTO V_YAESTA
         FROM COMUMGR.YTRUNID WHERE UPPER(YTRUNID_SIGLA)=UPPER(v_siglas) AND YTRUNID_CODE<>V_CODE_UNID ;

         IF V_YAESTA=0 THEN

                     IF ky_json.campo(jsonObj, 'padre')='0' THEN
                     v_nivel:='1';

                     UPDATE COMUMGR.YTRUNID
                        SET
                                YTRUNID_IND_PRINCIPAL='N'
                        WHERE  YTRUNID_CODE            = ky_json.campo(jsonObj, 'padre');


                        UPDATE COMUMGR.YTRUNID
                        SET     YTRUNID_DESCRIPCION=upper(ky_json.campo(jsonObj, 'descripcion')),
                                YTRUNID_PADRE=UPPER(ky_json.campo(jsonObj, 'padre')),
                                YTRUNID_FECHA_ACTIVIDAD = sysdate,
                                YTRUNID_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
                                YTRUNID_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                                YTRUNID_ORGN_UPAO       = ky_json.campo(jsonObj, 'org_upao'),
                                YTRUNID_RUTA            = UPPER(v_desc_padrE||ky_json.campo(jsonObj, 'descripcion')),
                                YTRUNID_NIVEL           = v_nivel,
                                YTRUNID_CORREO           = ky_json.campo(jsonObj, 'correo'),
                                YTRUNID_CONTENEDORA=ky_json.campo(jsonObj, 'contenedora'),
                                YTRUNID_DEPENDE=ky_json.campo(jsonObj, 'depende'),
                                YTRUNID_PARAMETRO=ky_json.campo(jsonObj, 'parametro'),
                                YTRUNID_SIGLA=v_siglas,
                                YTRUNID_SEDE=ky_json.campo(jsonObj, 'p_sede')
                        WHERE  YTRUNID_CODE            = V_CODE_UNID;
                     ELSE
                     v_nivel:='2';
                     SELECT YTRUNID_DESCRIPCION||' / ' INTO v_desc_padre FROM YTRUNID  WHERE YTRUNID_CODE=ky_json.campo(jsonObj, 'padre');

                     UPDATE COMUMGR.YTRUNID
                        SET
                                YTRUNID_IND_PRINCIPAL='N'
                        WHERE  YTRUNID_CODE            = ky_json.campo(jsonObj, 'padre');


                        UPDATE COMUMGR.YTRUNID
                        SET     YTRUNID_DESCRIPCION=upper(ky_json.campo(jsonObj, 'descripcion')),
                                YTRUNID_PADRE=UPPER(ky_json.campo(jsonObj, 'padre')),
                                YTRUNID_FECHA_ACTIVIDAD = sysdate,
                                YTRUNID_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
                                YTRUNID_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                                YTRUNID_ORGN_UPAO       = ky_json.campo(jsonObj, 'org_upao'),
                                YTRUNID_RUTA            = UPPER(v_desc_padrE||ky_json.campo(jsonObj, 'descripcion')),
                                YTRUNID_NIVEL           = v_nivel,
                                YTRUNID_CORREO           = ky_json.campo(jsonObj, 'correo'),
                                YTRUNID_CONTENEDORA=ky_json.campo(jsonObj, 'contenedora'),
                                YTRUNID_DEPENDE=ky_json.campo(jsonObj, 'depende'),
                                YTRUNID_PARAMETRO=ky_json.campo(jsonObj, 'parametro'),
                                YTRUNID_IND_PRINCIPAL=ky_json.campo(jsonObj, 'principal'),
                                YTRUNID_SIGLA=v_siglas,
                                YTRUNID_SEDE=ky_json.campo(jsonObj, 'p_sede')
                        WHERE  YTRUNID_CODE            = V_CODE_UNID;
                     END IF;
                      IF(SQL%ROWCOUNT>0) THEN
                        v_msg := 'TRANSACCIÓN APLICADA' ;
                     ELSE
                        v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR REGISTRO SELECCIONADO]' ;
                     END IF;
        ELSE
              v_msg := 'ERP-ERR YA EXISTE OTRA UNIDAD CON ESAS SIGLAS' ;
        END IF;

   ELSIF(P_ACCION='ELI') THEN
     SELECT COUNT(*) INTO v_existe FROM YTRUNID WHERE YTRUNID_PADRE=trim(ky_json.campo(jsonObj, 'ytrunid_pk'));
     IF(v_existe=0) THEN
        DELETE YTRUNID WHERE YTRUNID_CODE=trim(ky_json.campo(jsonObj, 'ytrunid_pk'));
            IF(SQL%ROWCOUNT>0) THEN
                v_msg := 'TRANSACCIÓN APLICADA' ;
            ELSE
                v_msg := 'ERP-ERR NO SE ENCONTRO EL REGISTRO PARA ELIMINAR' ;
            END IF;
     ELSE
         v_msg := 'ERP-ERR NO SE PUEDE ELIMINAR UN REGISTRO PADRE SI TIENE HIJOS' ;
     END IF;

   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    rollback;
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTRUNID*/








/*METODOS DE TABLA YTRVAMD(VALORES DE METADATOS PARA DOCUMENTO)*/

/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

  PROCEDURE KYT_DOCU_DOCU_PP_YTRVAMD_CUR(P_ACCION   IN VARCHAR2,
                                         P_DATA     IN VARCHAR2,
                                         CURSOR_OUT OUT T_CURSOR)
  
   is
  
    code         varchar2(20);
    v_PaginaSize INT;
    v_Ini        INT;
    v_Fin        INT;
    v_Pagina     INT;
    V_NUM_REG    INT;
    v_desc       varchar2(40);
  begin
  
    IF (P_ACCION = 'UNI') THEN
      OPEN CURSOR_OUT FOR
        SELECT YTRUNID_CODE            PK_ACCION,
               YTRUNID_CODE            CODE,
               YTRUNID_DESCRIPCION     DESCRIPCION,
               YTRUNID_PADRE           PADRE,
               YTRUNID_FECHA_ACTIVIDAD FECHA,
               YTRUNID_USUA_ID         USUA_ID,
               YTRUNID_IND_ESTADO      IND_ESTADO,
               YTRUNID_ORGN_UPAO       ORGN_UPAO,
               YTRUNID_RUTA            RUTA
          FROM COMUMGR.YTRUNID
         WHERE YTRUNID_CODE = P_DATA;
    
    ELSIF (P_ACCION = 'LISD') THEN
      --LISTAR POR DOCUMENTO
      OPEN CURSOR_OUT FOR
        SELECT YTRVAMD_ORDEN         ORDEN,
               YTRVAMD_CAME_CODE     CAME_CODE,
               YTRVAMD_NOM_CAMPO     CAMPO,
               YTRVAMD_REQUERIDO     REQUERIDO,
               YTRVAMD_CONTROL       CONTROL,
               upper(YTRVAMD_VALOR)         VALOR, /*MCL - solicitud de usuario*/
               upper(YTRVAMD_VALOR1)        VALOR1,/*MCL - solicitud de usuario*/
               YTRVAMD_CAME_ID_CAMPO ID_CAMPO,
               YTRVAMD_CODE          CODE,
               YTRVAMD_IND_VALOR     IND_VALOR,
               YTRVAMD_valor_DEFECTO VALOR_DEFECTO,
               YTRVAMD_VALOR_JSON    VALOR_JSON,
               YTRCAME_VALOR_DEFECTO --AGREGADO X JR 202-11-18
          FROM COMUMGR.YTRVAMD
         INNER JOIN COMUMGR.YTRCAME
            ON YTRCAME_CODE = YTRVAMD_CAME_CODE
         where YTRVAMD_DOCU_CODE || '-' || YTRVAMD_DOCU_SEQ = P_DATA
         ORDER BY YTRVAMD_ORDEN;
    
    ELSIF (P_ACCION = 'PAD') THEN
      --LIS
      OPEN CURSOR_OUT FOR
        SELECT YTRUNID_CODE            PK_ACCION,
               YTRUNID_CODE            CODE,
               YTRUNID_DESCRIPCION     DESCRIPCION,
               YTRUNID_PADRE           PADRE,
               YTRUNID_FECHA_ACTIVIDAD FECHA,
               YTRUNID_USUA_ID         USUA_ID,
               YTRUNID_IND_ESTADO      IND_ESTADO,
               YTRUNID_ORGN_UPAO       ORGN_UPAO,
               YTRUNID_RUTA            RUTA
          FROM COMUMGR.YTRUNID
         WHERE YTRUNID_PADRE = '0';
    ELSIF (P_ACCION = 'LIS') THEN
      --LIS
      jsonObj      := json(P_DATA);
      v_PaginaSize := ky_json.campo(jsonObj, 'nre');
      v_Pagina     := ky_json.campo(jsonObj, 'pag');
      v_desc       := ky_json.campo(jsonObj, 'b');
      v_Ini        := (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
      v_Fin        := v_PaginaSize * v_Pagina;
    
      if (v_desc = '%') then
        SELECT COUNT(*) INTO V_NUM_REG FROM YTRUNID;
        OPEN CURSOR_OUT FOR
          SELECT TT.*, V_NUM_REG TOTAL, V_PAGINASIZE PAGINASIZE
            FROM (SELECT ROWNUM AS NUM, XX.*
                    FROM (SELECT YTRUNID_CODE            PK_ACCION,
                                 YTRUNID_CODE            CODE,
                                 YTRUNID_DESCRIPCION     DESCRIPCION,
                                 YTRUNID_PADRE           PADRE,
                                 YTRUNID_FECHA_ACTIVIDAD FECHA,
                                 YTRUNID_USUA_ID         USUA_ID,
                                 YTRUNID_IND_ESTADO      IND_ESTADO,
                                 YTRUNID_ORGN_UPAO       ORGN_UPAO,
                                 YTRUNID_RUTA            RUTA
                            FROM COMUMGR.YTRUNID) XX
                  
                  ) TT
           WHERE NUM >= v_Ini
             AND NUM <= v_Fin;
      else
      
        SELECT COUNT(*)
          INTO V_NUM_REG
          FROM COMUMGR.YTRUNID
         WHERE YTRUNID_RUTA LIKE '%' || UPPER(v_desc) || '%';
      
        OPEN CURSOR_OUT FOR
          SELECT TT.*, V_NUM_REG TOTAL, V_PAGINASIZE PAGINASIZE
            FROM (SELECT ROWNUM AS NUM, XX.*
                    FROM (SELECT YTRUNID_CODE            PK_ACCION,
                                 YTRUNID_CODE            CODE,
                                 YTRUNID_DESCRIPCION     DESCRIPCION,
                                 YTRUNID_PADRE           PADRE,
                                 YTRUNID_FECHA_ACTIVIDAD FECHA,
                                 YTRUNID_USUA_ID         USUA_ID,
                                 YTRUNID_IND_ESTADO      IND_ESTADO,
                                 YTRUNID_ORGN_UPAO       ORGN_UPAO,
                                 YTRUNID_RUTA            RUTA
                            FROM COMUMGR.YTRUNID
                           WHERE YTRUNID_RUTA LIKE
                                 '%' || UPPER(v_desc) || '%') XX) TT
           WHERE NUM >= v_Ini
             AND NUM <= v_Fin;
      
      end if;
    
    ELSIF (P_ACCION = 'LIH') THEN
      --LIS
      jsonObj      := json(P_DATA);
      v_PaginaSize := ky_json.campo(jsonObj, 'nre');
      v_Pagina     := ky_json.campo(jsonObj, 'pag');
      v_desc       := ky_json.campo(jsonObj, 'b');
      v_Ini        := (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
      v_Fin        := v_PaginaSize * v_Pagina;
    
      if (v_desc = '%') then
        SELECT COUNT(*) INTO V_NUM_REG FROM YTRUNID;
        OPEN CURSOR_OUT FOR
          SELECT TT.*, V_NUM_REG TOTAL, V_PAGINASIZE PAGINASIZE
            FROM (SELECT ROWNUM AS NUM, XX.*
                    FROM (SELECT YTRUNID_CODE            PK_ACCION,
                                 YTRUNID_CODE            CODE,
                                 YTRUNID_DESCRIPCION     DESCRIPCION,
                                 YTRUNID_PADRE           PADRE,
                                 YTRUNID_FECHA_ACTIVIDAD FECHA,
                                 YTRUNID_USUA_ID         USUA_ID,
                                 YTRUNID_IND_ESTADO      IND_ESTADO,
                                 YTRUNID_ORGN_UPAO       ORGN_UPAO,
                                 YTRUNID_RUTA            RUTA
                            FROM COMUMGR.YTRUNID
                           WHERE YTRUNID_PADRE <> '0') XX
                  
                  ) TT
           WHERE NUM >= v_Ini
             AND NUM <= v_Fin;
      else
      
        SELECT COUNT(*)
          INTO V_NUM_REG
          FROM COMUMGR.YTRUNID
         WHERE YTRUNID_PADRE <> '0'
           AND YTRUNID_RUTA LIKE '%' || UPPER(v_desc) || '%';
      
        OPEN CURSOR_OUT FOR
          SELECT TT.*, V_NUM_REG TOTAL, V_PAGINASIZE PAGINASIZE
            FROM (SELECT ROWNUM AS NUM, XX.*
                    FROM (SELECT YTRUNID_CODE            PK_ACCION,
                                 YTRUNID_CODE            CODE,
                                 YTRUNID_DESCRIPCION     DESCRIPCION,
                                 YTRUNID_PADRE           PADRE,
                                 YTRUNID_FECHA_ACTIVIDAD FECHA,
                                 YTRUNID_USUA_ID         USUA_ID,
                                 YTRUNID_IND_ESTADO      IND_ESTADO,
                                 YTRUNID_ORGN_UPAO       ORGN_UPAO,
                                 YTRUNID_RUTA            RUTA
                            FROM COMUMGR.YTRUNID
                           WHERE YTRUNID_PADRE <> '0'
                             AND YTRUNID_RUTA LIKE
                                 '%' || UPPER(v_desc) || '%') XX) TT
           WHERE NUM >= v_Ini
             AND NUM <= v_Fin;
      
      end if;
    
    END IF;
  exception
    when OTHERS then
      raise_application_error(-20001, 'Error al listar ' || SQLERRM);
  END;

PROCEDURE KYT_DOCU_DOCU_PP_YTRVAMD_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;


    v_tipo varchar2(5);
    v_orden varchar2(8);
    v_conceptopago varchar2(20);

     v_existe_aprob int;

     V_DOC  varchar2(20);
     V_DOC_SEQ  varchar2(5);
     V_APRO_SEQ  INT;
     V_ENORDEN INT;

     V_ORDEN_COAS VARCHAR2(20);
     V_ORDEN_ORGN VARCHAR2(20);
     v_coas_orgn varchar2(25);

     V_CODE VARCHAR2(10);
     v_existe int;
     v_nivel int;
     v_desc_padre varchar2(100);

     V_CODE_1 VARCHAR2(10);

     V_DOCUMENTO VARCHAR2(20);
     V_DOCUMENTO_SEQ VARCHAR2(3);

      V_PLAN VARCHAR2(20);
     V_PLAN_SEQ VARCHAR2(10);
     V_CODIGO_CAMPO VARCHAR2(34);
      v_id_campo VARCHAR2(67);

      v_MEDA_CODE varchar2(20);
      came_CODE varchar2(20);
      came_seq varchar2(20);

      V_CAMP_IDF varchar2(30);

    BEGIN

   jsonObj := json(P_DATA);
   V_DOCUMENTO:=ky_json.campo(jsonObj, 'docu_code');
   V_DOCUMENTO_SEQ:=ky_json.campo(jsonObj, 'docu_seq');

   v_id_campo:=ky_json.campo(jsonObj, 'id_campo');

  -- code := jsonObj.get_string('code');
V_ENORDEN:=0;

   IF(P_ACCION='ADI') THEN

   SELECT SUBSTR(v_id_campo,1,INSTR(v_id_campo, '_', 1, 1 )-1) INTO V_CODIGO_CAMPO FROM DUAL;

    SELECT YTBDOCU_PLAN_PROC_CODE,YTBDOCU_PLAN_SEQ INTO V_PLAN,V_PLAN_SEQ  FROM YTBDOCU WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=V_DOCUMENTO||'-'||V_DOCUMENTO_SEQ;

    SELECT YTRCAME_MEDA_CODE,YTRCAME_CODE,YTRPLCA_SEQ,YTRCAME_ID_CAMPO       into v_MEDA_CODE,came_CODE,came_seq,V_CAMP_IDF
    FROM YTRPLCA  ,YTRCAME
    WHERE  YTRPLCA_PLAN_PROC_CODE||'-'||YTRPLCA_PLAN_SEQ=V_PLAN||'-'||V_PLAN_SEQ AND YTRPLCA_CAME_CODE||YTRPLCA_SEQ=V_CODIGO_CAMPO AND YTRPLCA_IND_ESTADO='A'
    AND YTRPLCA_CAME_CODE=YTRCAME_CODE;

   /* SELECT YTRCAME_CODE, YTRPLCA_SEQ,YTRPLCA_ORDEN ,YTRCAME_MEDA_CODE,YTRCAME_NOM_CAMPO,YTRCAME_REQUERIDO,YTRCAME_CONTROL,YTRCAME_TIPO_CAMPO,
            YTRCAME_DATA,YTRCAME_VALOR_DEFECTO,YTRCAME_AYUDA,YTRCAME_IND_AYUDA_NEGRITA,YTRCAME_TAMANO,YTRCAME_ID_CAMPO,YTRCAME_ANCHO,YTRCAME_TEXT_POS
    FROM YTRPLCA  ,YTRCAME
    WHERE  YTRPLCA_PLAN_PROC_CODE||'-'||YTRPLCA_PLAN_SEQ=V_PLAN||'-'||V_PLAN_SEQ AND YTRPLCA_CAME_CODE||YTRPLCA_SEQ=V_CODIGO_CAMPO AND YTRPLCA_IND_ESTADO='A'
    AND YTRPLCA_CAME_CODE=YTRCAME_CODE*/

   INSERT INTO COMUMGR.YTRVAMD (
   YTRVAMD_DOCU_CODE, YTRVAMD_DOCU_SEQ, YTRVAMD_CAME_CODE,
    YTRVAMD_NOM_CAMPO,

   YTRVAMD_VALOR, YTRVAMD_FECHA_ACTIVIDAD, YTRVAMD_USUA_ID,
  YTRVAMD_PLCA_SEQ,YTRVAMD_CAME_ID_CAMPO)
VALUES (V_DOCUMENTO ,
 V_DOCUMENTO_SEQ,
 came_CODE,



 ky_json.campo(jsonObj, 'valor'),
 sysdate,
 ky_json.campo(jsonObj, 'usua_id'),
 '',came_seq,V_CAMP_IDF);


     v_msg := 'OK';

   ELSIF(P_ACCION='ACT') THEN



         IF ky_json.campo(jsonObj, 'padre')='0' THEN
         v_nivel:='1';
         ELSE
         v_nivel:='2';
         SELECT YTRUNID_DESCRIPCION||' / ' INTO v_desc_padre FROM YTRUNID  WHERE YTRUNID_CODE=ky_json.campo(jsonObj, 'padre');
         END IF;


            UPDATE COMUMGR.YTRUNID
            SET     YTRUNID_DESCRIPCION=upper(ky_json.campo(jsonObj, 'descripcion')),
                    YTRUNID_PADRE=UPPER(ky_json.campo(jsonObj, 'padre')),
                    YTRUNID_FECHA_ACTIVIDAD = sysdate,
                    YTRUNID_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
                    YTRUNID_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
                    YTRUNID_ORGN_UPAO       = ky_json.campo(jsonObj, 'org_upao'),
                    YTRUNID_RUTA            = UPPER(v_desc_padrE||ky_json.campo(jsonObj, 'descripcion')),
                    YTRUNID_NIVEL           = v_nivel
            WHERE  YTRUNID_CODE            = ky_json.campo(jsonObj, 'ytrunid_pk');
        IF(SQL%ROWCOUNT>0) THEN
        v_msg := 'TRANSACCIÓN APLICADA' ;
     ELSE
        v_msg := 'ERP-ERR[NO SE PUEDE ACTUALIZAR REGISTRO SELECCIONADO]' ;
     END IF;




   ELSIF(P_ACCION='ELI') THEN
     SELECT COUNT(*) INTO v_existe FROM YTRUNID WHERE YTRUNID_PADRE=trim(ky_json.campo(jsonObj, 'ytrunid_pk'));
     IF(v_existe=0) THEN
        DELETE YTRUNID WHERE YTRUNID_CODE=trim(ky_json.campo(jsonObj, 'ytrunid_pk'));
            IF(SQL%ROWCOUNT>0) THEN
                v_msg := 'TRANSACCIÓN APLICADA' ;
            ELSE
                v_msg := 'ERP-ERR NO SE ENCONTRO EL REGISTRO PARA ELIMINAR' ;
            END IF;
     ELSE
         v_msg := 'ERP-ERR NO SE PUEDE ELIMINAR UN REGISTRO PADRE SI TIENE HIJOS' ;
     END IF;

   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    rollback;
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTRVAMD*/



/*INICIO METODOS DE TABLA YTRCOME(TABLA DE COMENTARIOS DE DOCUMENTOS)*/


/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    05-12-2013    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRCOME_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                    YTRCOME_CODE CODE, YTRCOME_DOCU_CODE DOCU, YTRCOME_DOCU_SEQ DOCU_SEQ,
                YTRCOME_FECHA_ACTIVIDAD FECHA, YTRCOME_USUA_ID USUA_ID, YTRCOME_TICO_CODE TICO_CODE,
                YTRCOME_MENSAJE MENSAJE, YTRCOME_NOTI_CORREO NOTI_CORREO
                FROM COMUMGR.YTRCOME
                WHERE YTRCOME_CODE=P_DATA;

    ELSIF(P_ACCION='LIM') THEN   --LIS
                OPEN CURSOR_OUT  FOR
                SELECT YTRCOME_DOCU_CODE||'-'||YTRCOME_DOCU_SEQ||'-'||YTRCOME_APDO_CODE PK_ACCION,
                    YTRCOME_CODE CODE, YTRCOME_DOCU_CODE DOCU, YTRCOME_DOCU_SEQ DOCU_SEQ,
                YTRCOME_FECHA_ACTIVIDAD FECHA, YTRCOME_USUA_ID USUA_ID,YTRCOME_USUA_NOMBRE USUA_NOMBRE, YTRCOME_TICO_CODE TICO_CODE,
                YTRCOME_MENSAJE MENSAJE, YTRCOME_NOTI_CORREO NOTI_CORREO,YTRCOME_APDO_CODE
                FROM COMUMGR.YTRCOME
                WHERE YTRCOME_DOCU_CODE||'-'||YTRCOME_DOCU_SEQ=P_DATA
                ORDER BY YTRCOME_FECHA_ACTIVIDAD ASC;

     ELSIF(P_ACCION='LUM') THEN   --LIS

       jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

      OPEN CURSOR_OUT  FOR
       SELECT TT.*,
             20 TOTAL,
             20 PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
    from(SELECT
                     YTBDOCU_ASUNTO ASUNTO,YTRCOME_CODE CODE, YTRCOME_DOCU_CODE DOCU, YTRCOME_DOCU_SEQ DOCU_SEQ,
                YTRCOME_FECHA_ACTIVIDAD FECHA, YTRCOME_USUA_ID USUA_ID,YTRCOME_USUA_NOMBRE USUA_NOMBRE, YTRCOME_TICO_CODE TICO_CODE,
                YTRCOME_MENSAJE MENSAJE, YTRCOME_NOTI_CORREO NOTI_CORREO
                FROM COMUMGR.YTRCOME         ,YTBDOCU
                WHERE YTRCOME_DOCU_CODE||'-'||YTRCOME_DOCU_SEQ=YTBDOCU_CODE||'-'||YTBDOCU_SEQ
                ORDER BY 2 DESC) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;



    ELSIF(P_ACCION='LIS') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;



        SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUNID ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG TOTAL,
             V_PAGINASIZE PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
                FROM (SELECT YTRUNID_CODE PK_ACCION,YTRUNID_CODE CODE, YTRUNID_DESCRIPCION DESCRIPCION, YTRUNID_PADRE PADRE,    YTRUNID_FECHA_ACTIVIDAD FECHA, YTRUNID_USUA_ID USUA_ID, YTRUNID_IND_ESTADO IND_ESTADO,
                YTRUNID_ORGN_UPAO ORGN_UPAO, YTRUNID_RUTA RUTA
                FROM COMUMGR.YTRUNID) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;


    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;
/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRCOME_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_id_usua varchar2(20);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

v_id_usua:=ky_json.campo(jsonObj, 'usua_id');
   IF(P_ACCION='ADC') THEN


INSERT INTO COMUMGR.YTRCOME (
   YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
   YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
   YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO,YTRCOME_USUA_NOMBRE)
VALUES ( SEQ_YTRCOME_CODE.NEXTVAL,
 ky_json.campo(jsonObj, 'docu_code'),
 ky_json.campo(jsonObj, 'docu_seq'),
 sysdate,
 v_id_usua,
 ky_json.campo(jsonObj, 'tico_code'),
 ky_json.campo(jsonObj, 'mensaje'),
 ky_json.campo(jsonObj, 'noti_correo'),baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(v_id_usua),'X'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

        UPDATE COMUMGR.YTVCOLL
        SET     YTVCOLL_DESCRIPCION      = upper(ky_json.campo(jsonObj, 'descripcion')),
                YTVCOLL_FECHA_ACTIVIDAD  = sysdate,
                YTVCOLL_IND_ESTADO       = ky_json.campo(jsonObj, 'ind_estado'),
                YTVCOLL_USUA_ID          = ky_json.campo(jsonObj, 'usua_id')
        WHERE  YTVCOLL_CODE             = trim(ky_json.campo(jsonObj, 'ytvcoll_pk'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';


   ELSIF(P_ACCION='ELI') THEN
     DELETE YTVCOLL WHERE YTVCOLL_CODE=trim(ky_json.campo(jsonObj, 'ytvcoll_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTrcome*/






/*INICIO METODOS DE TABLA YTBEXPE(TABLA DE EXPEDIENTES LOS EXPEDIENTES SON ASIGNADOS POR USUARIO)*/


/*
USUARIO    FECHA        COMENTARIO
---------- -----------   -----------------------------------------------
RVARASR    14-08-2014    Metodo general que devuelve un cursor

PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores UNI:recibe un parametro y devuelve un registro, LIS:Lista todos los registros de la lista paginada
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON

PARAMETROS DE SALIDA:
 - CURSOR_OUT: Devuelve un cursor con los registros seleccionados de acuerdo a los criterios enviados
*/

PROCEDURE KYT_DOCU_DOCU_PP_YTBEXPE_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_id varchar2(9);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                    YTBEXPE_CODE PK_ACCION,YTBEXPE_CODE CODE, YTBEXPE_FECHA_ACTIVIDAD FECHA, YTBEXPE_IND_ESTADO IND_ESTADO,
                    YTBEXPE_DESCRIPCION DESCRIPCION, YTBEXPE_USUA_ID USUA_ID, YTBEXPE_USUA_ID_CREO USUA_CREO,
                    YTBEXPE_IND_GENERAL IND_GENERAL, YTBEXPE_COMENTARIO COMENTARIO
                    FROM COMUMGR.YTBEXPE
                WHERE YTBEXPE_CODE=P_DATA;

    ELSIF(P_ACCION='LIM') THEN   --LIS
                OPEN CURSOR_OUT  FOR
                SELECT
                    YTBEXPE_CODE PK_ACCION,YTBEXPE_CODE CODE, YTBEXPE_FECHA_ACTIVIDAD FECHA, YTBEXPE_IND_ESTADO IND_ESTADO,
                    YTBEXPE_DESCRIPCION DESCRIPCION, YTBEXPE_USUA_ID USUA_ID, YTBEXPE_USUA_ID_CREO USUA_CREO,
                    YTBEXPE_IND_GENERAL IND_GENERAL, YTBEXPE_COMENTARIO COMENTARIO
                    FROM COMUMGR.YTBEXPE
                WHERE YTBEXPE_CODE=P_DATA;

     ELSIF(P_ACCION='LUM') THEN   --LIS

       jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

      OPEN CURSOR_OUT  FOR
       SELECT TT.*,
             20 TOTAL,
             20 PAGINASIZE
             FROM (SELECT ROWNUM AS NUM,XX.*
    from(SELECT
                    YTBEXPE_CODE PK_ACCION,YTBEXPE_CODE CODE, YTBEXPE_FECHA_ACTIVIDAD FECHA, YTBEXPE_IND_ESTADO IND_ESTADO,
                    YTBEXPE_DESCRIPCION DESCRIPCION, YTBEXPE_USUA_ID USUA_ID, YTBEXPE_USUA_ID_CREO USUA_CREO,
                    YTBEXPE_IND_GENERAL IND_GENERAL, YTBEXPE_COMENTARIO COMENTARIO
                    FROM COMUMGR.YTBEXPE) XX


          ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;



    ELSIF(P_ACCION='LIS') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;



  if v_id<>'%' then  --NO INGRESO ID Y SE BUSCA TODO

  SELECT COUNT(*) INTO  V_NUM_REG FROM YTBEXPE WHERE  YTBEXPE_USUA_ID=v_id;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG total_reg,
             V_PAGINASIZE PAGINASIZE,(SELECT COUNT(*) FROM YTBDOCU WHERE  YTBDOCU_EXPE_CODE=TT.CODE) NUM_DOCUMENTOS,
             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(TT.USUA_ID),'X') NOM_USUARIO
              FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT
                    YTBEXPE_CODE PK_ACCION,YTBEXPE_CODE CODE, YTBEXPE_FECHA_ACTIVIDAD FECHA, YTBEXPE_IND_ESTADO IND_ESTADO,
                    YTBEXPE_DESCRIPCION DESCRIPCION, YTBEXPE_USUA_ID USUA_ID, YTBEXPE_USUA_ID_CREO USUA_CREO,
                    YTBEXPE_IND_GENERAL IND_GENERAL, YTBEXPE_COMENTARIO COMENTARIO
                    FROM COMUMGR.YTBEXPE WHERE  YTBEXPE_USUA_ID=v_id) XX ) TT
              WHERE NUM >= v_Ini AND NUM<= v_Fin;

  else

  SELECT COUNT(*) INTO  V_NUM_REG FROM YTBEXPE ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG total_reg,
             V_PAGINASIZE PAGINASIZE,(SELECT COUNT(*) FROM YTBDOCU WHERE  YTBDOCU_EXPE_CODE=TT.CODE) NUM_DOCUMENTOS,
             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(TT.USUA_ID),'X') NOM_USUARIO
              FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT
                    YTBEXPE_CODE PK_ACCION,YTBEXPE_CODE CODE, YTBEXPE_FECHA_ACTIVIDAD FECHA, YTBEXPE_IND_ESTADO IND_ESTADO,
                    YTBEXPE_DESCRIPCION DESCRIPCION, YTBEXPE_USUA_ID USUA_ID, YTBEXPE_USUA_ID_CREO USUA_CREO,
                    YTBEXPE_IND_GENERAL IND_GENERAL, YTBEXPE_COMENTARIO COMENTARIO
                    FROM COMUMGR.YTBEXPE order BY YTBEXPE_CODE DESC) XX ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
  end if;




    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;
/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTBEXPE_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_id_usua varchar2(20);
    V_CODE_EXPE INT;
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

  v_id_usua:=ky_json.campo(jsonObj, 'usua_id');
   IF(P_ACCION='ADI') THEN

    select decode(MAX(YTBEXPE_CODE),null,1,MAX(YTBEXPE_CODE)+1) into V_CODE_EXPE from  YTBEXPE;

    IF ky_json.campo(jsonObj, 'ind_general')='S' THEN
    UPDATE COMUMGR.YTBEXPE SET YTBEXPE_IND_GENERAL='N'
    WHERE  YTBEXPE_USUA_ID=ky_json.campo(jsonObj, 'usua_id');
    END IF;

   INSERT INTO COMUMGR.YTBEXPE (
   YTBEXPE_CODE, YTBEXPE_FECHA_ACTIVIDAD, YTBEXPE_IND_ESTADO,
   YTBEXPE_DESCRIPCION, YTBEXPE_USUA_ID, YTBEXPE_USUA_ID_CREO,
   YTBEXPE_IND_GENERAL, YTBEXPE_COMENTARIO)
  VALUES (LPAD(V_CODE_EXPE,10,'0'),
  SYSDATE,
   ky_json.campo(jsonObj, 'ind_estado'),
   ky_json.campo(jsonObj, 'descripcion'),
   ky_json.campo(jsonObj, 'usua_id'),
   ky_json.campo(jsonObj, 'id_creo'),
   ky_json.campo(jsonObj, 'ind_general'),
   ky_json.campo(jsonObj, 'comentario'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN


      IF ky_json.campo(jsonObj, 'ind_general')='S' THEN
        UPDATE COMUMGR.YTBEXPE SET YTBEXPE_IND_GENERAL='N'
        WHERE  YTBEXPE_USUA_ID=ky_json.campo(jsonObj, 'usua_id');
        END IF;

        UPDATE COMUMGR.YTBEXPE
        SET    YTBEXPE_FECHA_ACTIVIDAD = sysdate,
       YTBEXPE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado'),
       YTBEXPE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
      -- YTBEXPE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTBEXPE_USUA_ID_CREO    = ky_json.campo(jsonObj, 'id_creo'),
       YTBEXPE_IND_GENERAL     = ky_json.campo(jsonObj, 'ind_general'),
       YTBEXPE_COMENTARIO      = ky_json.campo(jsonObj, 'comentario')
        WHERE  YTBEXPE_CODE            = trim(ky_json.campo(jsonObj, 'ytbexpe_pk'));


        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';


   ELSIF(P_ACCION='ELI') THEN
     DELETE YTBEXPE WHERE YTBEXPE_CODE=trim(ky_json.campo(jsonObj, 'ytbexpe_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTBEXPE*/




PROCEDURE KYT_DOCU_DOCU_PP_PER_EST_ALU(P_PIDM IN VARCHAR2,P_CARRERA in varchar2,V_MSG OUT varchar2) IS

V_TEXTO VARCHAR2(4000);
CURSOR DT(P_PIDM VARCHAR2,P_CARRERA VARCHAR2) IS
SELECT
       SHRTCKN_TERM_CODE "PERIODO",
       TO_CHAR(STVTERM_START_DATE,'DD')||' de '||BANINST1.FG_UPAO_MES_TITLE@PROD.INT.UPAO.EDU.PE(TO_CHAR(STVTERM_START_DATE,'MM'))||' del'||TO_CHAR(STVTERM_START_DATE,'YYYY') "INICIO",
       TO_CHAR(STVTERM_END_DATE,'DD')||' de '||BANINST1.FG_UPAO_MES_TITLE@PROD.INT.UPAO.EDU.PE(TO_CHAR(STVTERM_END_DATE,'MM'))||' del'||TO_CHAR(STVTERM_END_DATE,'YYYY') "FIN",
       'Trujillo, '||TO_CHAR(SYSDATE,'DD')||' de '||BANINST1.FG_UPAO_MES_TITLE@PROD.INT.UPAO.EDU.PE(TO_CHAR(SYSDATE,'MM')) ||' del '||TO_CHAR(SYSDATE,'YYYY') AS FECHA
FROM SHRTCKN@PROD.INT.UPAO.EDU.PE, SCBCRSE@PROD.INT.UPAO.EDU.PE Y, STVTERM@PROD.INT.UPAO.EDU.PE, SGBSTDN@PROD.INT.UPAO.EDU.PE, SCRRMAJ@PROD.INT.UPAO.EDU.PE
WHERE
      SHRTCKN_PIDM = P_PIDM AND
      SHRTCKN_SUBJ_CODE=Y.SCBCRSE_SUBJ_CODE AND
      SHRTCKN_CRSE_NUMB=Y.SCBCRSE_CRSE_NUMB AND
      SHRTCKN_TERM_CODE = STVTERM_CODE AND
      SHRTCKN_TERM_CODE >= Y.SCBCRSE_EFF_TERM AND
      Y.SCBCRSE_EFF_TERM = (SELECT MAX(X.SCBCRSE_EFF_TERM)
                                      FROM SCBCRSE@PROD.INT.UPAO.EDU.PE X
                                  WHERE X.SCBCRSE_SUBJ_CODE=Y.SCBCRSE_SUBJ_CODE AND
                                          X.SCBCRSE_CRSE_NUMB=Y.SCBCRSE_CRSE_NUMB AND
                                        X.SCBCRSE_EFF_TERM <= SHRTCKN_TERM_CODE) AND
      SHRTCKN_SUBJ_CODE=SCRRMAJ_SUBJ_CODE AND
      SHRTCKN_CRSE_NUMB=SCRRMAJ_CRSE_NUMB AND
      SCRRMAJ_MAJR_CODE=P_CARRERA AND
      SHRTCKN_PIDM = SGBSTDN_PIDM AND
      SGBSTDN_TERM_CODE_EFF =
      (SELECT MAX(SGBSTDN_TERM_CODE_EFF)
              FROM SGBSTDN@PROD.INT.UPAO.EDU.PE
              WHERE SGBSTDN_PIDM=P_PIDM AND SGBSTDN_MAJR_CODE_1=P_CARRERA)
         AND NOT EXISTS(SELECT 'S' FROM SZACRNC@PROD.INT.UPAO.EDU.PE WHERE SZACRNC_PROGRAM = SGBSTDN_PROGRAM_1
                                AND SZACRNC_SUBJ_CODE || ' -  ' || SZACRNC_CRSE_NUMB = SHRTCKN_SUBJ_CODE || ' -  ' || SHRTCKN_CRSE_NUMB)
GROUP BY     SHRTCKN_TERM_CODE,STVTERM_START_DATE,STVTERM_END_DATE
ORDER BY PERIODO, INICIO, FIN;

DT_ROW DT%ROWTYPE;

V_HTML VARCHAR2(4000);

BEGIN

  V_HTML:='<table border="1" cellpadding="7" cellspacing="3"><tbody>';
  V_HTML:= V_HTML || '<tr bgcolor="#666" style="color:#fff;">';
  V_HTML:= V_HTML || '<td>PERIODO</td>';
  V_HTML:= V_HTML || '<td>INICIO</td>';
  V_HTML:= V_HTML || '<td>FIN</td>';
  V_HTML:= V_HTML || '</tr>';

 OPEN DT(P_PIDM,P_CARRERA);
    LOOP
     FETCH DT INTO DT_ROW;
     EXIT WHEN DT%NOTFOUND;
        V_HTML:= V_HTML || '<tr>';

             V_HTML:= V_HTML || '<td>'||DT_ROW.PERIODO||'</td>';
             V_HTML:= V_HTML || '<td>'||DT_ROW.INICIO||'</td>';
             V_HTML:= V_HTML || '<td>'||DT_ROW.FIN||'</td>';

        V_HTML:= V_HTML || '</tr>';
    END LOOP;
 CLOSE  DT;



    V_HTML:= V_HTML || '</tbody></table>';


    V_MSG:=V_HTML;








END;

/* TABLA YTRUSSI:== ADMINISTRADORES  DEL SISTEMA*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRUSSI_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_id varchar2(9);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                 baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(YTRUSSI_USUA_ID),'X') NOM_USUARIO,
                    YTRUSSI_CODE PK_ACCION,YTRUSSI_CODE CODE, YTRUSSI_FECHA_ACTIVIDAD FECHA,YTRUSSI_USUA_ID USUA_ID, YTRUSSI_IND_ESTADO IND_ESTADO,
                     YTRUSSI_USUA_CREO USUA_CREO,YTRUSSI_ROL ROL
                    FROM COMUMGR.YTRUSSI
                WHERE YTRUSSI_CODE=P_DATA;




    ELSIF(P_ACCION='LIS') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;



  if v_desc <>'%' then  --NO INGRESO ID Y SE BUSCA TODO

  SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUSSI WHERE   YTRUSSI_USUA_ID like '%' || v_desc ||'%';
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG total,
             V_PAGINASIZE PAGINASIZE,
             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(TT.USUA_ID),'X') NOM_USUARIO
              FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT
                    YTRUSSI_CODE PK_ACCION,YTRUSSI_CODE CODE,YTRUSSI_USUA_ID USUA_ID, YTRUSSI_FECHA_ACTIVIDAD FECHA, YTRUSSI_IND_ESTADO IND_ESTADO,
                     YTRUSSI_USUA_CREO USUA_CREO,YTRUSSI_ROL ROL
                    FROM COMUMGR.YTRUSSI WHERE  YTRUSSI_USUA_ID like '%' || v_desc ||'%') XX ) TT
              WHERE NUM >= v_Ini AND NUM<= v_Fin;

  else

  SELECT COUNT(*) INTO  V_NUM_REG FROM YTRUSSI ;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG total,
             V_PAGINASIZE PAGINASIZE,
             baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(TT.USUA_ID),'X') NOM_USUARIO
              FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT YTRUSSI_CODE PK_ACCION,YTRUSSI_CODE CODE,YTRUSSI_USUA_ID USUA_ID, YTRUSSI_FECHA_ACTIVIDAD FECHA, YTRUSSI_IND_ESTADO IND_ESTADO,
                     YTRUSSI_USUA_CREO USUA_CREO,YTRUSSI_ROL ROL
                    FROM COMUMGR.YTRUSSI ) XX ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;
  end if;




    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;
/*
USUARIO    FECHA        COMENTARIO
---------- ------       -------------------------------------------------------------------
RVARASR    29-11-2013   METODO GENERAL PARA REALIZAR ACTUALIZACION, INSERTAR, ELIMINAR
PARAMETROS ENTRADA:
 - P_ACCION: Puede tomar los siguientes valores ADI:Adicionar, ACT:Actualizar, ELI:Eliminar
 - P_DATA: Variables donde se recibe todos los parametros adicionales estan en formato JSON
PARAMETROS DE SALIDA:
 - V_SMG: Pamametro por donde devuelve el mensaje de respuesta

*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRUSSI_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_id_usua varchar2(20);
     v_id_usua_adm varchar2(20);
    V_CODE_USUA INT;
    v_existe int;
    EXP_USUA EXCEPTION;
    V_MENSAJE VARCHAR2(200);
    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

  v_id_usua:=ky_json.campo(jsonObj, 'usua_id');
  v_id_usua_adm:=ky_json.campo(jsonObj, 'usua_id_adm');
   IF(P_ACCION='ADI') THEN


   select count(*) into v_existe from spriden@prod.int.upao.edu.pe where spriden_id=v_id_usua_adm;
        IF v_existe=0 THEN
            V_MENSAJE:='ERP-ERR ID DE USUARIO NO EXISTE';
            RAISE EXP_USUA;
        END IF;

    select COUNT(*) into  v_existe from  YTRUSSI WHERE YTRUSSI_USUA_ID=v_id_usua_adm;
        IF v_existe>0 THEN
            V_MENSAJE:='ERP-ERR USUARIO YA EXISTE EN LA TABLA DE ADMINISTRADORES';
            RAISE EXP_USUA;
        END IF;

     select decode(MAX(YTRUSSI_CODE),null,1,MAX(YTRUSSI_CODE)+1) into V_CODE_USUA from  YTRUSSI;
   INSERT INTO COMUMGR.YTRUSSI (
   YTRUSSI_CODE, YTRUSSI_USUA_ID, YTRUSSI_IND_ESTADO,
   YTRUSSI_FECHA_ACTIVIDAD, YTRUSSI_USUA_CREO, YTRUSSI_ROL)
VALUES ( lpad(V_CODE_USUA,3,'0'), v_id_usua_adm, ky_json.campo(jsonObj, 'p_estado'),
 SYSDATE, v_id_usua, ky_json.campo(jsonObj, 'p_rol'));

        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN


                 UPDATE COMUMGR.YTRUSSI
                    SET

                           YTRUSSI_IND_ESTADO      = ky_json.campo(jsonObj, 'p_estado'),
                           YTRUSSI_USUA_CREO       = v_id_usua
                    WHERE  YTRUSSI_CODE            = trim(ky_json.campo(jsonObj, 'ytrussi_pk'))            ;


        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';


   ELSIF(P_ACCION='ELI') THEN
     DELETE YTRUSSI WHERE YTRUSSI_CODE=trim(ky_json.campo(jsonObj, 'ytrussi_pk'));
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception
    WHEN EXP_USUA THEN
      v_msg := V_MENSAJE;
    when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTRUSSI*/





/* TABLA YTRNDUN:== documentos por unidad*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRNDUN_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_id varchar2(9);
    V_UNIDAD VARCHAR2(20);
    V_anno VARCHAR2(20);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                  YTRNDUN_UNID_CODE||'-'||YTRNDUN_VAAN_CODE||'-'||YTRNDUN_TIDO_CODE PK_ACCION,
                   YTRNDUN_UNID_CODE UNID_CODE, YTRNDUN_VAAN_CODE VAAN_CODE, YTRNDUN_TIDO_CODE TIDO_CODE,
                   YTRNDUN_FECHA_ACTIVIDAD FECHA, YTRNDUN_IND_ESTADO IND_ESTADO, YTRNDUN_NUM_INI NUM_INI,
                   YTRNDUN_NUM_ACT NUM_ACT, YTRNDUN_USUA_ID USUA_ID
                    FROM COMUMGR.YTRNDUN
                WHERE YTRNDUN_UNID_CODE||'-'||YTRNDUN_VAAN_CODE||'-'||YTRNDUN_TIDO_CODE=P_DATA;




    ELSIF(P_ACCION='DATI') THEN   --LIS
    jsonObj := json(P_DATA);

            OPEN CURSOR_OUT  FOR
                 SELECT LPAD(YTRNDUN_NUM_ACT+1,4,'0') NUM_ACT FROM  COMUMGR.YTRNDUN
                 WHERE YTRNDUN_UNID_CODE=ky_json.campo(jsonObj, 'p_unidad')
                 AND YTRNDUN_TIDO_CODE=ky_json.campo(jsonObj, 'p_tipodoc')
                 AND YTRNDUN_IND_ESTADO='A'
                 AND YTRNDUN_VAAN_CODE=TO_CHAR(SYSDATE,'YYYY');


    ELSIF(P_ACCION='LIS') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
    V_UNIDAD:=TRIM(ky_json.campo(jsonObj, 'p_unidad'));
     V_anno:=TRIM(ky_json.campo(jsonObj, 'p_anno'));


  SELECT COUNT(*) INTO  V_NUM_REG FROM YTRNDUN WHERE   YTRNDUN_UNID_CODE in( select ytrunid_code from COMUMGR.ytrunid
                                                where ytrunid_padre=V_UNIDAD and ytrunid_ind_principal='S') AND YTRNDUN_VAAN_CODE=V_anno;
        OPEN CURSOR_OUT  FOR
        SELECT TT.*,
             V_NUM_REG total,
             V_PAGINASIZE PAGINASIZE
              FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT
                    YTRNDUN_UNID_CODE||'-'||YTRNDUN_VAAN_CODE||'-'||YTRNDUN_TIDO_CODE PK_ACCION,
                   YTRNDUN_UNID_CODE UNID_CODE, YTRNDUN_VAAN_CODE VAAN_CODE, YTRNDUN_TIDO_CODE TIDO_CODE,
                   YTRNDUN_FECHA_ACTIVIDAD FECHA, YTRNDUN_IND_ESTADO IND_ESTADO, YTRNDUN_NUM_INI NUM_INI,
                   YTRNDUN_NUM_ACT NUM_ACT, YTRNDUN_USUA_ID USUA_ID,YTVTIDO_DESCRIPCION DOCUMENTO
                    FROM COMUMGR.YTRNDUN ,comumgr.ytvtido
                    WHERE   YTRNDUN_UNID_CODE in( select ytrunid_code from COMUMGR.ytrunid
                                                where ytrunid_padre=V_UNIDAD and ytrunid_ind_principal='S') AND YTRNDUN_VAAN_CODE=V_anno
                    AND YTRNDUN_TIDO_CODE=YTVTIDO_CODE
                    ) XX ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;


    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


PROCEDURE KYT_DOCU_DOCU_PP_YTRNDUN_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_id_usua varchar2(20);
     v_id_usua_adm varchar2(20);
    V_CODE_USUA INT;
    v_existe int;
    EXP_USUA EXCEPTION;
    V_MENSAJE VARCHAR2(200);
    BEGIN

   jsonObj := json(P_DATA);

   IF(P_ACCION='ADI') THEN


          /* select count(*) into v_existe from spriden@prod.int.upao.edu.pe where spriden_id=v_id_usua_adm;
                IF v_existe=0 THEN
                    V_MENSAJE:='ERP-ERR ID DE USUARIO NO EXISTE';
                    RAISE EXP_USUA;
                END IF;

            select COUNT(*) into  v_existe from  YTRUSSI WHERE YTRUSSI_USUA_ID=v_id_usua_adm;
                IF v_existe>0 THEN
                    V_MENSAJE:='ERP-ERR USUARIO YA EXISTE EN LA TABLA DE ADMINISTRADORES';
                    RAISE EXP_USUA;
                END IF;
              */

             INSERT INTO COMUMGR.YTRNDUN (
               YTRNDUN_UNID_CODE, YTRNDUN_VAAN_CODE, YTRNDUN_TIDO_CODE,
               YTRNDUN_FECHA_ACTIVIDAD, YTRNDUN_IND_ESTADO, YTRNDUN_NUM_INI,
               YTRNDUN_NUM_ACT, YTRNDUN_USUA_ID)
            VALUES ( ky_json.campo(jsonObj, 'p_unid_code'),
             to_char(sysdate,'YYYY'),
             ky_json.campo(jsonObj, 'p_tido_code'),
             sysdate,
             ky_json.campo(jsonObj, 'p_estado'),
             ky_json.campo(jsonObj, 'p_num_ini'),
             ky_json.campo(jsonObj, 'p_num_act'),
             ky_json.campo(jsonObj, 'p_usua_id'));

                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN


                 UPDATE COMUMGR.YTRNDUN
                    SET

                           YTRNDUN_NUM_INI      = ky_json.campo(jsonObj, 'p_num_ini'),
                           YTRNDUN_NUM_ACT      = ky_json.campo(jsonObj, 'p_num_ini'),
                           YTRNDUN_USUA_ID       = ky_json.campo(jsonObj, 'p_usua_id'),
                           YTRNDUN_IND_ESTADO=ky_json.campo(jsonObj, 'p_estado')
                    WHERE  YTRNDUN_UNID_CODE||'-'||YTRNDUN_VAAN_CODE||'-'||YTRNDUN_TIDO_CODE= trim(ky_json.campo(jsonObj, 'ytrndun_pk'))            ;


        v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';


   ELSIF(P_ACCION='ELI') THEN
     DELETE YTRNDUN WHERE  YTRNDUN_UNID_CODE||'-'||YTRNDUN_VAAN_CODE||'-'||YTRNDUN_TIDO_CODE= trim(ky_json.campo(jsonObj, 'ytrndun_pk')) ;
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception
    WHEN EXP_USUA THEN
      v_msg := V_MENSAJE;
    when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


/*FIN METODOS DE TABLA YTRUSSI*/



/*YTBCAEX: TABLA DE CARPETA DE EXPEDIENTES*/

PROCEDURE KYT_DOCU_DOCU_PP_YTBCAEX_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_id varchar2(9);
    V_documento VARCHAR2(20);
    V_anno VARCHAR2(20);
    V_PROC VARCHAR2(20);
    V_USUA VARCHAR2(60);
    v_estado varchar2(40);

    V_FECHA  VARCHAR2(200);

    V_FECHA_INICIO  VARCHAR2(200);
    V_FECHA_FIN  VARCHAR2(200);


    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
            SELECT YTBCAEX_CODE CODE,YTBCAEX_CODE PK_ACCION,YTBCAEX_DESCRIPCION DESCRIPCION,
           DECODE(YTBCAEX_IND_ESTADO,'A','<span class="label label-success">ACTIVO</span>','I','<span class="label label-danger">INACTIVO</span>','C','<span class="label label-primary">CERRADO</span>') IND_ESTADO,YTBCAEX_FECHA_ACTIVIDAD FECHA,
                   YTBCAEX_USUA_ID USUA_ID,(SELECT COUNT(*) FROM COMUMGR.YTRDOCA,COMUMGR.YTBDOCU WHERE YTRDOCA_CAEX_CODE=YTBCAEX_CODE AND YTRDOCA_DOCU_CODE=YTBDOCU_CODE
                    AND YTBDOCU_ESTA_CODE<>'AR' AND YTBDOCU_ESTA_CODE<>'NA' AND  YTBDOCU_ESTA_CODE<>'EX') CANT_EXP,YTBCAEX_PLAN_CODE PROCESO,
                   YTBCAEX_IND_ESTADO IND_ESTADO_1
           FROM COMUMGR.YTBCAEX
           WHERE YTBCAEX_CODE=P_DATA;

    ELSIF(P_ACCION='CPO') THEN   --CARPETAS POR PROCESO
            jsonObj := json(P_DATA);
            V_documento:=ky_json.campo(jsonObj, 'p_documento');
             V_USUA:=Ky_json.campo(jsonObj, 'usua_id');

            SELECT YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ INTO V_PROC
            FROM COMUMGR.YTBDOCU WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=TRIM(V_documento);

            OPEN CURSOR_OUT  FOR
                SELECT YTBCAEX_CODE CODE,YTBCAEX_DESCRIPCION DESCRIPCION
                FROM COMUMGR.YTBCAEX
                WHERE YTBCAEX_PLAN_CODE=V_PROC AND YTBCAEX_IND_ESTADO='A' AND YTBCAEX_IND_ADJUNTO='N'
                AND EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA WHERE YTRPECA_USUA_ID=V_USUA AND YTRPECA_CAEX_CODE=YTBCAEX_CODE);

            /*SELECT YTBCAEX_CODE CODE,YTBCAEX_DESCRIPCION DESCRIPCION
            FROM COMUMGR.YTBCAEX
            WHERE YTBCAEX_USUA_ID=V_USUA
            AND YTBCAEX_PLAN_CODE=V_PROC AND YTBCAEX_IND_ESTADO='A' AND YTBCAEX_IND_ADJUNTO='N';*/

     ELSIF(P_ACCION='LISA') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
    V_USUA:=Ky_json.campo(jsonObj, 'usua_id');



  SELECT COUNT(*) INTO  V_NUM_REG FROM COMUMGR.YTBCAEX WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                        WHERE YTRPECA_USUA_ID=V_USUA
                                                                                        AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                    AND UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%';
        OPEN CURSOR_OUT  FOR
             SELECT TT.*,V_NUM_REG total,V_PAGINASIZE PAGINASIZE
              FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT YTBCAEX_CODE CODE,YTBCAEX_CODE PK_ACCION,YTBCAEX_DESCRIPCION DESCRIPCION,YTBCAEX_IND_ESTADO IND_ESTADO,YTBCAEX_FECHA_ACTIVIDAD FECHA,
                                                    YTBCAEX_USUA_ID USUA_ID,(SELECT COUNT(*) FROM YTRDOCA WHERE YTRDOCA_CAEX_CODE=YTBCAEX_CODE) CANT_EXP,YTBCAEX_PLAN_CODE PROCESO
                                                    FROM COMUMGR.YTBCAEX WHERE  YTBCAEX_USUA_ID=V_USUA
                                                    AND YTBCAEX_IND_ESTADO='C'  AND YTBCAEX_IND_ADJUNTO='N'
                    order by YTBCAEX_SEQ ASC) XX ) TT
       WHERE NUM >= v_Ini AND NUM<= v_Fin;

    ELSIF(P_ACCION='LIS') THEN   --LIS
     jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=ky_json.campo(jsonObj, 'b');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

    V_USUA:=Ky_json.campo(jsonObj, 'usua_id');

    v_estado:=Ky_json.campo(jsonObj, 'estado');

    V_FECHA:=Ky_json.campo(jsonObj, 'fe');
    V_FECHA_INICIO :=Ky_json.campo(jsonObj, 'fecha_inicio');
    V_FECHA_FIN :=Ky_json.campo(jsonObj, 'fecha_fin');



    IF (v_estado = '%' ) THEN




            IF (V_FECHA = '%') THEN


                SELECT COUNT(*) INTO  V_NUM_REG FROM COMUMGR.YTBCAEX  WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%';

                            OPEN CURSOR_OUT  FOR
                                 SELECT TT.*,V_NUM_REG total,V_PAGINASIZE PAGINASIZE,( SELECT YTRPLAN_TITULO FROM COMUMGR.YTRPLAN WHERE YTRPLAN_PROC_CODE||'-'||YTRPLAN_SEQ=TT.YTBCAEX_PLAN_CODE) DESC_PROCESO
                                  FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT YTBCAEX_CODE CODE,YTBCAEX_DESCRIPCION DESCRIPCION,YTBCAEX_IND_ESTADO IND_ESTADO,YTBCAEX_FECHA_ACTIVIDAD FECHA,
                                                                        YTBCAEX_USUA_ID USUA_ID,YTBCAEX_PLAN_CODE,(SELECT COUNT(*) FROM YTRDOCA WHERE YTRDOCA_CAEX_CODE=YTBCAEX_CODE) CANT_EXP,YTBCAEX_PLAN_CODE PROCESO
                                                                        FROM COMUMGR.YTBCAEX WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%'
                                        order by YTBCAEX_SEQ ASC ) XX ) TT
                           WHERE NUM >= v_Ini AND NUM<= v_Fin;


            ELSE


                SELECT COUNT(*) INTO  V_NUM_REG FROM COMUMGR.YTBCAEX  WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%'
                                                                        AND TO_CHAR(YTBCAEX_FECHA_ACTIVIDAD, 'DD/MM/YYYY')  BETWEEN TO_DATE (V_FECHA_INICIO, 'DD/MM/YYYY') AND TO_DATE (V_FECHA_FIN, 'DD/MM/YYYY');

                            OPEN CURSOR_OUT  FOR
                                 SELECT TT.*,V_NUM_REG total,V_PAGINASIZE PAGINASIZE,( SELECT YTRPLAN_TITULO FROM COMUMGR.YTRPLAN WHERE YTRPLAN_PROC_CODE||'-'||YTRPLAN_SEQ=TT.YTBCAEX_PLAN_CODE) DESC_PROCESO
                                  FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT YTBCAEX_CODE CODE,YTBCAEX_DESCRIPCION DESCRIPCION,YTBCAEX_IND_ESTADO IND_ESTADO,YTBCAEX_FECHA_ACTIVIDAD FECHA,
                                                                        YTBCAEX_USUA_ID USUA_ID,YTBCAEX_PLAN_CODE,(SELECT COUNT(*) FROM YTRDOCA WHERE YTRDOCA_CAEX_CODE=YTBCAEX_CODE) CANT_EXP,YTBCAEX_PLAN_CODE PROCESO
                                                                        FROM COMUMGR.YTBCAEX WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%'
                                                                        AND TO_CHAR(YTBCAEX_FECHA_ACTIVIDAD, 'DD/MM/YYYY')  BETWEEN TO_DATE (V_FECHA_INICIO, 'DD/MM/YYYY') AND TO_DATE (V_FECHA_FIN, 'DD/MM/YYYY')
                                        order by YTBCAEX_SEQ ASC ) XX ) TT
                           WHERE NUM >= v_Ini AND NUM<= v_Fin;





            END IF;





    ELSE



        IF (V_FECHA = '%') THEN


            SELECT COUNT(*) INTO  V_NUM_REG FROM COMUMGR.YTBCAEX  WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND (UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%' OR UPPER(YTBCAEX_CODE) LIKE '%'||UPPER(v_desc)||'%') AND YTBCAEX_IND_ESTADO IN (v_estado);

                            OPEN CURSOR_OUT  FOR
                                 SELECT TT.*,V_NUM_REG total,V_PAGINASIZE PAGINASIZE,( SELECT YTRPLAN_TITULO FROM COMUMGR.YTRPLAN WHERE YTRPLAN_PROC_CODE||'-'||YTRPLAN_SEQ=TT.YTBCAEX_PLAN_CODE) DESC_PROCESO
                                  FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT YTBCAEX_CODE CODE,YTBCAEX_DESCRIPCION DESCRIPCION,YTBCAEX_IND_ESTADO IND_ESTADO,YTBCAEX_FECHA_ACTIVIDAD FECHA,
                                                                        YTBCAEX_USUA_ID USUA_ID,YTBCAEX_PLAN_CODE,(SELECT COUNT(*) FROM YTRDOCA WHERE YTRDOCA_CAEX_CODE=YTBCAEX_CODE) CANT_EXP,YTBCAEX_PLAN_CODE PROCESO
                                                                        FROM COMUMGR.YTBCAEX WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND (UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%' OR UPPER(YTBCAEX_CODE) LIKE '%'||UPPER(v_desc)||'%') AND YTBCAEX_IND_ESTADO IN (v_estado)
                                        order by YTBCAEX_SEQ ASC ) XX ) TT
                           WHERE NUM >= v_Ini AND NUM<= v_Fin;

        ELSE


            SELECT COUNT(*) INTO  V_NUM_REG FROM COMUMGR.YTBCAEX  WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND (UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%' OR UPPER(YTBCAEX_CODE) LIKE '%'||UPPER(v_desc)||'%') AND YTBCAEX_IND_ESTADO IN (v_estado)
                                                                        AND TO_CHAR(YTBCAEX_FECHA_ACTIVIDAD, 'DD/MM/YYYY')  BETWEEN TO_DATE (V_FECHA_INICIO, 'DD/MM/YYYY') AND TO_DATE (V_FECHA_FIN, 'DD/MM/YYYY');

                            OPEN CURSOR_OUT  FOR
                                 SELECT TT.*,V_NUM_REG total,V_PAGINASIZE PAGINASIZE,( SELECT YTRPLAN_TITULO FROM COMUMGR.YTRPLAN WHERE YTRPLAN_PROC_CODE||'-'||YTRPLAN_SEQ=TT.YTBCAEX_PLAN_CODE) DESC_PROCESO
                                  FROM (SELECT ROWNUM AS NUM,XX.* FROM (SELECT YTBCAEX_CODE CODE,YTBCAEX_DESCRIPCION DESCRIPCION,YTBCAEX_IND_ESTADO IND_ESTADO,YTBCAEX_FECHA_ACTIVIDAD FECHA,
                                                                        YTBCAEX_USUA_ID USUA_ID,YTBCAEX_PLAN_CODE,(SELECT COUNT(*) FROM YTRDOCA WHERE YTRDOCA_CAEX_CODE=YTBCAEX_CODE) CANT_EXP,YTBCAEX_PLAN_CODE PROCESO
                                                                        FROM COMUMGR.YTBCAEX WHERE  EXISTS (SELECT 'Y' FROM COMUMGR.YTRPECA
                                                                                                            WHERE YTRPECA_USUA_ID=V_USUA
                                                                                                            AND YTRPECA_CAEX_CODE=YTBCAEX_CODE)
                                                                        AND (UPPER(YTBCAEX_DESCRIPCION) LIKE '%'||UPPER(v_desc)||'%' OR UPPER(YTBCAEX_CODE) LIKE '%'||UPPER(v_desc)||'%')AND YTBCAEX_IND_ESTADO IN (v_estado)
                                                                        AND TO_CHAR(YTBCAEX_FECHA_ACTIVIDAD, 'DD/MM/YYYY')  BETWEEN TO_DATE (V_FECHA_INICIO, 'DD/MM/YYYY') AND TO_DATE (V_FECHA_FIN, 'DD/MM/YYYY')
                                        order by YTBCAEX_SEQ ASC ) XX ) TT
                           WHERE NUM >= v_Ini AND NUM<= v_Fin;



        END IF;






    END IF;






    END IF;
    exception
    when no_data_found then
     raise_application_error(-20001,'ERROR' || SQLERRM || V_documento);
    when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;
PROCEDURE KYT_DOCU_DOCU_PP_YTBCAEX_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS


    --jsonArray        json_list;

    v_code varchar2(20);
    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_id_usua varchar2(20);
    V_CODE_USUA INT;
    V_PIDM INT;
    v_existe int;
    V_SEQ INT;
     V_SEQ_1 INT;
    V_DESCRIPCION VARCHAR2(300);
    EXP_USUA EXCEPTION;
    V_MENSAJE VARCHAR2(200);
    BEGIN

   jsonObj := json(P_DATA);
        v_id_usua:=ky_json.campo(jsonObj, 'p_usua_id');
        V_DESCRIPCION:=ky_json.campo(jsonObj, 'p_descripcion');
   IF(P_ACCION='ADI') THEN

        V_PIDM:=baninst1.FG_UPAO_GET_PIDM@prod.int.upao.edu.pe(v_id_usua);
        SELECT  NVL(MAX(YTBCAEX_SEQ),0)+1 INTO V_SEQ FROM  COMUMGR.YTBCAEX WHERE YTBCAEX_USUA_ID=v_id_usua;
          /* select count(*) into v_existe from spriden@prod.int.upao.edu.pe where spriden_id=v_id_usua_adm;
                IF v_existe=0 THEN
                    V_MENSAJE:='ERP-ERR ID DE USUARIO NO EXISTE';
                    RAISE EXP_USUA;
                END IF;

            select COUNT(*) into  v_existe from  YTRUSSI WHERE YTRUSSI_USUA_ID=v_id_usua_adm;
                IF v_existe>0 THEN
                    V_MENSAJE:='ERP-ERR USUARIO YA EXISTE EN LA TABLA DE ADMINISTRADORES';
                    RAISE EXP_USUA;
                END IF;
              */
              SELECT COUNT(*) INTO  v_existe FROM COMUMGR.YTBCAEX
              WHERE YTBCAEX_USUA_ID=v_id_usua AND UPPER(YTBCAEX_DESCRIPCION)=UPPER(V_DESCRIPCION);

              IF v_existe=0 THEN
                      INSERT INTO COMUMGR.YTBCAEX (
                       YTBCAEX_CODE, YTBCAEX_DESCRIPCION, YTBCAEX_IND_ESTADO,
                       YTBCAEX_FECHA_ACTIVIDAD, YTBCAEX_USUA_ID, YTBCAEX_CANT_EXP,YTBCAEX_PLAN_CODE,YTBCAEX_SEQ)
                            VALUES ( V_PIDM||'-'||V_SEQ,
                             V_DESCRIPCION,
                             ky_json.campo(jsonObj, 'p_estado'),
                             sysdate,
                             v_id_usua,
                             ky_json.campo(jsonObj, 'p_cantidad'),ky_json.campo(jsonObj, 'p_proceso'),V_SEQ);

                       --//////INSERTANDO EN LA TABLA DE USUARIOS CON PERMISO A LA CARPETA
                               SELECT COUNT(*)+1 INTO V_SEQ_1 FROM  COMUMGR.YTRPECA WHERE YTRPECA_CAEX_CODE=V_PIDM||'-'||V_SEQ;
                               INSERT INTO COMUMGR.YTRPECA (
                                   YTRPECA_CAEX_CODE, YTRPECA_SEQ, YTRPECA_USUA_ID,
                                   YTRPECA_ORGN_CODE, YTRPECA_FECHA_ACTIVIDAD, YTRPECA_IND_ESTADO,
                                   YTRPECA_TIPO)
                                VALUES ( V_PIDM||'-'||V_SEQ,V_SEQ_1,v_id_usua,'',SYSDATE,'A','A');

                            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
              ELSE
                    v_msg := 'ERP-ERR YA EXISTE UNA CARPETA CON ESE NOMBRE';
              END IF;

              --//////////////CERRAR CARPETA
    ELSIF(P_ACCION='CECA') THEN

            UPDATE COMUMGR.YTBCAEX
            SET    YTBCAEX_IND_ESTADO       = ky_json.campo(jsonObj, 'p_estado'),
                   YTBCAEX_FECHA_CERRO      = sysdate,
                   YTBCAEX_USUA_CERRO       = ky_json.campo(jsonObj, 'usua_id')
            WHERE  YTBCAEX_CODE             = ky_json.campo(jsonObj, 'ytbcaex_pk')
            AND YTBCAEX_IND_ESTADO<>'C';

            IF SQL%ROWCOUNT >0 THEN
                v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
            ELSE
                v_msg := 'ERP-ERR REGISTRO NO FUE ACTUALIZADO... VERIFIQUE SI LA CARPETA YA ESTA CERRADA';
            END IF;

   ELSIF(P_ACCION='ACT') THEN



        UPDATE COMUMGR.YTBCAEX
        SET    YTBCAEX_DESCRIPCION     = ky_json.campo(jsonObj, 'p_descripcion'),
               YTBCAEX_IND_ESTADO      = ky_json.campo(jsonObj, 'p_estado'),
               YTBCAEX_FECHA_ACTIVIDAD = sysdate,
               YTBCAEX_PLAN_CODE=ky_json.campo(jsonObj, 'p_proceso')
        WHERE  YTBCAEX_CODE            = ky_json.campo(jsonObj, 'ytbcaex_pk');

        IF SQL%ROWCOUNT >0 THEN
            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
        ELSE
            v_msg := 'ERP-ERR REGISTRO NO FUE ACTUALIZADO';
        END IF;



   ELSIF(P_ACCION='ELI') THEN
    DELETE COMUMGR.YTRPECA WHERE  YTRPECA_CAEX_CODE = ky_json.campo(jsonObj, 'ytbcaex_pk') ;
     DELETE COMUMGR.YTBCAEX WHERE  YTBCAEX_CODE = ky_json.campo(jsonObj, 'ytbcaex_pk') ;
     v_msg := 'TRANSACCIÓN APLICADA' ;
   ELSE
     v_msg := 'ERP-ERR NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception
    WHEN EXP_USUA THEN
      v_msg := V_MENSAJE;
    when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;



/*YTRPECA: TABLA DE DE PERSONAS QUE TIENEN ACCESO A LA CARPETA*/

PROCEDURE KYT_DOCU_DOCU_PP_YTRPECA_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_id varchar2(9);
    V_UNIDAD VARCHAR2(20);
    V_anno VARCHAR2(20);
    begin


    IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
                SELECT
                YTRPECA_CAEX_CODE, YTRPECA_SEQ,YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ PK_ACCION, YTRPECA_USUA_ID USUA_ID,
                   YTRPECA_ORGN_CODE ORGN_CODE, YTRPECA_FECHA_ACTIVIDAD FECHA, YTRPECA_IND_ESTADO IND_ESTADO,YTRPECA_SEQ SEQ,
                   YTRPECA_TIPO TIPO
                FROM COMUMGR.YTRPECA
                WHERE YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ=P_DATA;
    ELSIF(P_ACCION='LIS') THEN   --LIS
        OPEN CURSOR_OUT  FOR
             SELECT YTRPECA_CAEX_CODE, YTRPECA_SEQ,YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ PK_ACCION, YTRPECA_USUA_ID USUA_ID,
                   YTRPECA_ORGN_CODE ORGN_CODE, YTRPECA_FECHA_ACTIVIDAD FECHA, DECODE(YTRPECA_IND_ESTADO,'A','<span class="label label-success">ACTIVO</span>','I','<span class="label label-danger">INACTIVO</span>') IND_ESTADO,
                   decode(YTRPECA_TIPO,'A','ADMINISTRADOR','L','LECTURA','P','PUEDE DAR PERMISOS') TIPO,YTRPECA_TIPO TIPO_1,YTRPECA_SEQ SEQ,
                   BANINST1.FG_UPAO_APE_NOM@PROD.INT.UPAO.EDU.PE(BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(YTRPECA_USUA_ID),'X') NOMBRE
                FROM COMUMGR.YTRPECA
                WHERE YTRPECA_CAEX_CODE=P_DATA;



    END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


PROCEDURE KYT_DOCU_DOCU_PP_YTRPECA_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS


    --jsonArray        json_list;


    v_tipo varchar2(5);
    v_conceptopago varchar2(20);
    v_id_usua varchar2(20);
    V_CODE_USUA INT;
    V_PIDM INT;
    v_existe int;
    V_SEQ INT;
     V_SEQ_1 INT;
    V_CODE VARCHAR2(20);
    EXP_USUA EXCEPTION;
    V_MENSAJE VARCHAR2(200);
    BEGIN

   jsonObj := json(P_DATA);

   IF(P_ACCION='ADI') THEN

        v_id_usua:=ky_json.campo(jsonObj, 'p_usua_id');
        V_CODE:=ky_json.campo(jsonObj, 'p_code');

        SELECT max(ytrpeca_seq)+1 INTO V_SEQ FROM  COMUMGR.YTRPECA WHERE YTRPECA_CAEX_CODE=V_CODE;

              SELECT COUNT(*) INTO  v_existe FROM COMUMGR.YTRPECA
              WHERE YTRPECA_USUA_ID=v_id_usua AND YTRPECA_CAEX_CODE=V_CODE;

              IF v_existe=0 THEN

                          INSERT INTO COMUMGR.YTRPECA (
                           YTRPECA_CAEX_CODE, YTRPECA_SEQ, YTRPECA_USUA_ID,
                           YTRPECA_ORGN_CODE, YTRPECA_FECHA_ACTIVIDAD, YTRPECA_IND_ESTADO,
                           YTRPECA_TIPO)
                        VALUES ( V_CODE,V_SEQ,
                         v_id_usua,'',SYSDATE,ky_json.campo(jsonObj, 'p_estado'),ky_json.campo(jsonObj, 'p_tipo'));

                            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
              ELSE
                    v_msg := 'ERP-ERR YA EXISTE UN USUARIO ASIGNADO A LA CARPETA';
              END IF;

   ELSIF(P_ACCION='ACT') THEN



            UPDATE COMUMGR.YTRPECA
            SET    YTRPECA_ORGN_CODE       = ky_json.campo(jsonObj, 'p_orgn'),
                   YTRPECA_FECHA_ACTIVIDAD = sysdate,
                   YTRPECA_IND_ESTADO      = ky_json.campo(jsonObj, 'p_estado'),
                   YTRPECA_TIPO            = ky_json.campo(jsonObj, 'p_tipo')
            WHERE  YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ       = ky_json.campo(jsonObj, 'ytrpeca_pk');

            IF SQL%ROWCOUNT >0 THEN
                v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
            ELSE
                v_msg := 'ERP-ERR REGISTRO NO FUE ACTUALIZADO';
            END IF;



   ELSIF(P_ACCION='ELI') THEN
            DELETE COMUMGR.YTRPECA
            WHERE  YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ = ky_json.campo(jsonObj, 'ytrpeca_pk')
            and  YTRPECA_TIPO<>'A';
                  IF SQL%ROWCOUNT >0 THEN
                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                ELSE
                    v_msg := 'ERP-ERR NO PUEDES ELIMINAR ESTE REGISTRO';
                END IF;

   ELSE
     v_msg := 'ERP-ERR NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception
    WHEN EXP_USUA THEN
      v_msg := V_MENSAJE;
    when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;



/*YTRDOCA: TABLA DE DE EXPEDIENTES POR CARPETA*/
PROCEDURE KYT_DOCU_DOCU_PP_YTRDOCA_CUR(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR) is
    code varchar2(20);
    v_PaginaSize INT;
    v_Ini INT;
    v_Fin INT;
    v_Pagina INT;
    V_NUM_REG INT;
    v_desc varchar2(40);
    v_id varchar2(9);
    V_UNIDAD VARCHAR2(20);
    V_anno VARCHAR2(20);

BEGIN

            IF(P_ACCION='UNI') THEN
                OPEN CURSOR_OUT  FOR
                        SELECT
                        YTRPECA_CAEX_CODE, YTRPECA_SEQ,YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ PK_ACCION, YTRPECA_USUA_ID USUA_ID,
                           YTRPECA_ORGN_CODE ORGN_CODE, YTRPECA_FECHA_ACTIVIDAD FECHA, YTRPECA_IND_ESTADO IND_ESTADO,YTRPECA_SEQ SEQ,
                           YTRPECA_TIPO TIPO
                        FROM COMUMGR.YTRPECA
                        WHERE YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ=P_DATA;

            --//////////LISTAR DOCUMENTOS POR CARPETA///////////////////////////////////////////////////////////////////////////////
            ELSIF(P_ACCION='LIS') THEN   --LIS
                OPEN CURSOR_OUT  FOR
                     SELECT  YTBDOCU_CODE DOCU_CODE,YTBDOCU_NUM_REG||'-'||YTBDOCU_VAAN_CODE DOCU_CODE_1, YTRDOCA_DOCU_SEQ DOCU_SEQ, YTRDOCA_CAEX_CODE CAEX_CODE,
                        YTRDOCA_SEQ SEQ, YTRDOCA_USUA_ID USUA_ID, YTRDOCA_FECHA_ACTIVIDAD FECHA,
                        YTRDOCA_IND_ESTADO IND_ESTADO, YTRDOCA_COMENTARIO COMENTARIO,YTBDOCU_ASUNTO ASUNTO,YTBDOCU_USUA_ID SOLICITANTE_ID,
                        baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(YTBDOCU_PIDM,'X') SOLICITANTE_NOMBRE,TO_CHAR(YTBDOCU_FECHA_ACTIVIDAD,'DD/MM/YYYY') FECHA_DOCU,
                        YTBDOCU_PERS_DNI DNI,YTBDOCU_MAJR_CODE MAJR,YTBDOCU_ESTA_CODE ESTADO,
                        DECODE(YTBDOCU_ESTA_CODE,'NU','SOLICITANTE',FKYT_DOCU_DOCU_PP_QT_DOCU(YTRDOCA_DOCU_CODE)) FALTA_APROBAR,DECODE(YTBDOCU_CAMP_CODE,'M','TRUJILLO','PI','PIURA',YTBDOCU_CAMP_CODE) CAMPUS
                        FROM COMUMGR.YTRDOCA ,YTBDOCU
                        WHERE YTRDOCA_CAEX_CODE=P_DATA
                        AND YTRDOCA_DOCU_CODE=YTBDOCU_CODE AND YTRDOCA_DOCU_SEQ=YTBDOCU_SEQ
                        AND YTBDOCU_ESTA_CODE <> 'AR'
                        AND YTBDOCU_ESTA_CODE <> 'AN'
                        AND YTBDOCU_ESTA_CODE <> 'EX'
                        ORDER BY YTRDOCA_SEQ;
                       
                       
            ELSIF(P_ACCION='LIS2') THEN   --LIS X FECHA ASCENDENTE
                OPEN CURSOR_OUT  FOR
                     SELECT  YTBDOCU_CODE DOCU_CODE,YTBDOCU_NUM_REG||'-'||YTBDOCU_VAAN_CODE DOCU_CODE_1, YTRDOCA_DOCU_SEQ DOCU_SEQ, YTRDOCA_CAEX_CODE CAEX_CODE,
                        YTRDOCA_SEQ SEQ, YTRDOCA_USUA_ID USUA_ID, YTRDOCA_FECHA_ACTIVIDAD FECHA,
                        YTRDOCA_IND_ESTADO IND_ESTADO, YTRDOCA_COMENTARIO COMENTARIO,YTBDOCU_ASUNTO ASUNTO,YTBDOCU_USUA_ID SOLICITANTE_ID,
                        baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(YTBDOCU_PIDM,'X') SOLICITANTE_NOMBRE,TO_CHAR(YTBDOCU_FECHA_ACTIVIDAD,'DD/MM/YYYY') FECHA_DOCU,
                        YTBDOCU_PERS_DNI DNI,YTBDOCU_MAJR_CODE MAJR,YTBDOCU_ESTA_CODE ESTADO,
                        DECODE(YTBDOCU_ESTA_CODE,'NU','SOLICITANTE',FKYT_DOCU_DOCU_PP_QT_DOCU(YTRDOCA_DOCU_CODE)) FALTA_APROBAR,DECODE(YTBDOCU_CAMP_CODE,'M','TRUJILLO','PI','PIURA',YTBDOCU_CAMP_CODE) CAMPUS
                        FROM COMUMGR.YTRDOCA ,YTBDOCU
                        WHERE YTRDOCA_CAEX_CODE=P_DATA
                        AND YTRDOCA_DOCU_CODE=YTBDOCU_CODE AND YTRDOCA_DOCU_SEQ=YTBDOCU_SEQ
                        AND YTBDOCU_ESTA_CODE <> 'AR'
                        AND YTBDOCU_ESTA_CODE <> 'AN'
                        AND YTBDOCU_ESTA_CODE <> 'EX'
                        ORDER BY YTBDOCU_FECHA_ACTIVIDAD  ASC;      
                       
                       
            ELSIF(P_ACCION='LIS3') THEN   --LIS X FECHA DESCENDENTE
                OPEN CURSOR_OUT  FOR
                     SELECT  YTBDOCU_CODE DOCU_CODE,YTBDOCU_NUM_REG||'-'||YTBDOCU_VAAN_CODE DOCU_CODE_1, YTRDOCA_DOCU_SEQ DOCU_SEQ, YTRDOCA_CAEX_CODE CAEX_CODE,
                        YTRDOCA_SEQ SEQ, YTRDOCA_USUA_ID USUA_ID, YTRDOCA_FECHA_ACTIVIDAD FECHA,
                        YTRDOCA_IND_ESTADO IND_ESTADO, YTRDOCA_COMENTARIO COMENTARIO,YTBDOCU_ASUNTO ASUNTO,YTBDOCU_USUA_ID SOLICITANTE_ID,
                        baninst1.FG_UPAO_APE_NOM@prod.int.upao.edu.pe(YTBDOCU_PIDM,'X') SOLICITANTE_NOMBRE,TO_CHAR(YTBDOCU_FECHA_ACTIVIDAD,'DD/MM/YYYY') FECHA_DOCU,
                        YTBDOCU_PERS_DNI DNI,YTBDOCU_MAJR_CODE MAJR,YTBDOCU_ESTA_CODE ESTADO,
                        DECODE(YTBDOCU_ESTA_CODE,'NU','SOLICITANTE',FKYT_DOCU_DOCU_PP_QT_DOCU(YTRDOCA_DOCU_CODE)) FALTA_APROBAR,DECODE(YTBDOCU_CAMP_CODE,'M','TRUJILLO','PI','PIURA',YTBDOCU_CAMP_CODE) CAMPUS
                        FROM COMUMGR.YTRDOCA ,YTBDOCU
                        WHERE YTRDOCA_CAEX_CODE=P_DATA
                        AND YTRDOCA_DOCU_CODE=YTBDOCU_CODE AND YTRDOCA_DOCU_SEQ=YTBDOCU_SEQ
                        AND YTBDOCU_ESTA_CODE <> 'AR'
                        AND YTBDOCU_ESTA_CODE <> 'AN'
                        AND YTBDOCU_ESTA_CODE <> 'EX'
                        ORDER BY YTBDOCU_FECHA_ACTIVIDAD  DESC;            
                   
            END IF;
            exception when OTHERS then
                raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


PROCEDURE KYT_DOCU_DOCU_PP_YTRDOCA_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS


    --jsonArray        json_list;


    v_tipo varchar2(5);
    v_DOCUMENTO varchar2(20);
    v_id_usua varchar2(20);
    V_CODE_USUA INT;
    V_PIDM INT;
    v_existe int;
    V_SEQ INT;
     V_SEQ_1 INT;
    V_CODE VARCHAR2(20);
    EXP_USUA EXCEPTION;
    V_MENSAJE VARCHAR2(200);
    V_APERTURADO INT;

    --////////////////////////7ADJUNTAR MASIVO
    V_CAEX_CODE VARCHAR2(20);
    V_SEQ_CARPETA INT;
    V_CANTIDAD INT;
    V_DE INT;
    V_APROBADO VARCHAR2(10);

    --//////////////////CURSOR PARA OBTENER DOCUMENTOS DE LA CARPETA///////////////////////////
      CURSOR C_DOC_CARP(P_CARPETA VARCHAR2) IS
            SELECT YTRDOCA_DOCU_CODE,YTRDOCA_DOCU_SEQ
            FROM COMUMGR.YTRDOCA
            WHERE YTRDOCA_CAEX_CODE=P_CARPETA;

     C_DOC_CARP_ROW C_DOC_CARP%ROWTYPE;


    BEGIN

   jsonObj := json(P_DATA);
        v_id_usua:=ky_json.campo(jsonObj, 'usua_id');
        V_CODE:=ky_json.campo(jsonObj, 'p_carpeta');
        v_DOCUMENTO:=ky_json.campo(jsonObj, 'p_documento');

        V_CANTIDAD:=0;
        V_DE:=0;
   IF(P_ACCION='ADI') THEN



           SELECT COUNT(*) INTO V_APERTURADO FROM YTBCAEX WHERE YTBCAEX_CODE=V_CODE AND YTBCAEX_IND_ESTADO='A' ;

            IF V_APERTURADO>0 THEN

                  SELECT COUNT(*) INTO  v_existe FROM COMUMGR.YTRDOCA
                  WHERE YTRDOCA_DOCU_CODE||'-'||YTRDOCA_DOCU_SEQ=v_DOCUMENTO AND YTRDOCA_CAEX_CODE=V_CODE;

                  IF v_existe=0 THEN

                            --///////////////// QUITAMOS DOCUMENTO DE LA CARPETA A APROBAR
                            DELETE COMUMGR.YTRDOCA WHERE YTRDOCA_DOCU_CODE||'-'||YTRDOCA_DOCU_SEQ=v_DOCUMENTO;

                            SELECT COUNT(*)+1 INTO V_SEQ FROM  COMUMGR.YTRDOCA WHERE YTRDOCA_CAEX_CODE=V_CODE;

                           INSERT INTO COMUMGR.YTRDOCA (
                               YTRDOCA_DOCU_CODE, YTRDOCA_DOCU_SEQ, YTRDOCA_CAEX_CODE,
                               YTRDOCA_SEQ, YTRDOCA_USUA_ID, YTRDOCA_FECHA_ACTIVIDAD,
                               YTRDOCA_IND_ESTADO, YTRDOCA_COMENTARIO)
                            VALUES ( SUBSTR(v_DOCUMENTO,1,10),
                             SUBSTR(v_DOCUMENTO,12,3),
                             ky_json.campo(jsonObj, 'p_carpeta'), V_SEQ,v_id_usua,sysdate,'A','');

                                v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
                  ELSE
                        v_msg := 'ERP-ERR DOCUMENTO YA ESTA ASIGNADO A LA CARPETA';
                  END IF;
           ELSE
                   v_msg := 'ERP-ERR CARPETA NO ESTA HABILITADA PARA EJECUTAR LA ACCIÓN SOLICITADA';
           END IF;


   ELSIF(P_ACCION='LINK') THEN
    --////////////OBTENER EL CAEX DEL DOCUMENTO
      SELECT YTBDOCU_CAEX_CODE INTO V_CAEX_CODE
      FROM YTBDOCU WHERE    YTBDOCU_CODE||'-'||YTBDOCU_SEQ=SUBSTR(v_DOCUMENTO,0,12);

    --///////////OBTENER LA SECUENCIA DE LA COLA DE LOS DOCUMENTOS DE LA CARPETA
       SELECT  YTRAPDO_SEQ_DCA INTO V_SEQ_CARPETA FROM YTRAPDO
       WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ||'-'||YTRAPDO_SEQ=v_DOCUMENTO;

    --//////////ABRIR CURSOR DE CARPETA PARA RECORRER Y IR YTRAPAD A ADJUNTAR REQUISOTO

       OPEN C_DOC_CARP(V_CAEX_CODE);
            LOOP
               FETCH C_DOC_CARP INTO C_DOC_CARP_ROW;
                  EXIT WHEN C_DOC_CARP%NOTFOUND;


                SELECT COUNT(*) INTO  V_APROBADO FROM COMUMGR.YTRAPDO
                WHERE YTRAPDO_DOCU_CODE||'-'||YTRAPDO_DOCU_SEQ||'-'||YTRAPDO_SEQ=C_DOC_CARP_ROW.YTRDOCA_DOCU_CODE||'-'||C_DOC_CARP_ROW.YTRDOCA_DOCU_SEQ||'-'||V_SEQ_CARPETA
                AND YTRAPDO_IND_ESTADO='A';

                IF V_APROBADO=0 THEN
                      --////////ELIMINAMOS TODOS LOS ADJUNTOS
                      DELETE YTRAPAD
                      WHERE YTRAPAD_APPL_CODE=C_DOC_CARP_ROW.YTRDOCA_DOCU_CODE||'-'||C_DOC_CARP_ROW.YTRDOCA_DOCU_SEQ||'-'||V_SEQ_CARPETA
                      AND YTRAPAD_APPL_REFERENCIA='DOCAPRO'  ;

                      --///////CLONAMOS LOS ADJUNTOS DEL DOCUMENTO DE REFERENCIA
                      INSERT INTO COMUMGR.YTRAPAD (
                       YTRAPAD_ADJU_CODE, YTRAPAD_APPL_CODE, YTRAPAD_APPL_REFERENCIA,
                       YTRAPAD_FECHA_ACTIVIDAD, YTRAPAD_USUA_ID, YTRAPAD_IND_ESTADO,
                        YTRAPAD_SEQ) (

                    SELECT YTRAPAD_ADJU_CODE,C_DOC_CARP_ROW.YTRDOCA_DOCU_CODE||'-'||C_DOC_CARP_ROW.YTRDOCA_DOCU_SEQ||'-'||V_SEQ_CARPETA,YTRAPAD_APPL_REFERENCIA,SYSDATE,YTRAPAD_USUA_ID,'A',YTRAPAD_SEQ
                    FROM COMUMGR.YTRAPAD WHERE YTRAPAD_APPL_CODE=v_DOCUMENTO AND YTRAPAD_IND_ESTADO='A');
                    V_CANTIDAD:=V_CANTIDAD+1;
               END IF;
                V_DE:=V_DE+1;
           END LOOP;
       CLOSE C_DOC_CARP;

       IF SQL%ROWCOUNT >0 THEN
            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA  SE CLONARON ' || V_CANTIDAD ||' DE '|| V_DE ||' DOCUMENTO(S)';
        ELSE
            v_msg := 'ERP-ERR NO SE PUDIERON CLONAR LOS ARCHIVOS';
        END IF;


   ELSIF(P_ACCION='ACT') THEN



                                UPDATE COMUMGR.YTRPECA
                                SET    YTRPECA_ORGN_CODE       = ky_json.campo(jsonObj, 'p_orgn'),
                                       YTRPECA_FECHA_ACTIVIDAD = sysdate,
                                       YTRPECA_IND_ESTADO      = ky_json.campo(jsonObj, 'p_estado'),
                                       YTRPECA_TIPO            = ky_json.campo(jsonObj, 'p_tipo')
                                WHERE  YTRPECA_CAEX_CODE||'-'||YTRPECA_SEQ       = ky_json.campo(jsonObj, 'ytrpeca_pk');

        IF SQL%ROWCOUNT >0 THEN
            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
        ELSE
            v_msg := 'ERP-ERR REGISTRO NO FUE ACTUALIZADO';
        END IF;



   ELSIF(P_ACCION='ELI') THEN
    --///////////////// QUITAMOS DOCUMENTO DE LA CARPETA A APROBAR
                            DELETE COMUMGR.YTRDOCA WHERE YTRDOCA_DOCU_CODE||'-'||YTRDOCA_DOCU_SEQ=v_DOCUMENTO;
        IF SQL%ROWCOUNT>0 THEN
            v_msg := 'TRANSACCIÓN APLICADA' ;
         ELSE
            v_msg := 'ERP-ERR NO SE ENCONTRO INFORNMACIÓN PARA ELIMINAR ' || v_DOCUMENTO ;
        END IF;


   ELSE
     v_msg := 'ERP-ERR NO HAY CAMBIOS POR APLICAR';
   END IF;

  COMMIT;


    exception
    WHEN EXP_USUA THEN
      v_msg := V_MENSAJE;
    when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;



PROCEDURE KYT_DOCU_DOCU_PP_PAGO(P_DOC IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is


    begin


        OPEN CURSOR_OUT  FOR
        SELECT DISTINCT TZRPADH_FIN_DATE, TZRPADT_DOCU_CODE
        FROM TAISMGR.TZRPADT@PROD.INT.UPAO.EDU.PE,TAISMGR.TZRPADH@PROD.INT.UPAO.EDU.PE
        WHERE
        TZRPADT_DOCU_CODE||'-'||TZRPADT_DOCU_SEQ=P_DOC
        AND  TZRPADH_CODE=TZRPADT_PADH_CODE
        AND TZRPADH_STATUS=1;


    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;


/*PROCEDIMIENTO DE PAGO*/


PROCEDURE KYT_DOCU_DOCU_PP_BANCO_AUD(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS

    v_seq int;
    --jsonArray        json_list;
    V_CODE_USUA INT;
    v_existe int;
    V_NUM_DIAS INT;
    EXP_USUA EXCEPTION;
    V_MENSAJE VARCHAR2(200);
    V_MSG1 VARCHAR2(500);
    V_DOCUMENTO VARCHAR2(20);
    V_USUA VARCHAR2(10);
    V_ALERTA VARCHAR2(300);

    CURSOR C_PAGOS(P_CODE VARCHAR2) IS
     SELECT YTRREDO_PADH_CODE FROM COMUMGR.YTRREDO WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=P_CODE AND YTRREDO_TIRE_CODE='REC';

        C_PAGOS_REC C_PAGOS%ROWTYPE;

    BEGIN

   jsonObj := json(P_DATA);

   IF(P_ACCION='ADI') THEN

             INSERT INTO COMUMGR.YTRNDUN (
               YTRNDUN_UNID_CODE, YTRNDUN_VAAN_CODE, YTRNDUN_TIDO_CODE,
               YTRNDUN_FECHA_ACTIVIDAD, YTRNDUN_IND_ESTADO, YTRNDUN_NUM_INI,
               YTRNDUN_NUM_ACT, YTRNDUN_USUA_ID)
            VALUES ( ky_json.campo(jsonObj, 'p_unid_code'),
             to_char(sysdate,'YYYY'),
             ky_json.campo(jsonObj, 'p_tido_code'),
             sysdate,
             ky_json.campo(jsonObj, 'p_estado'),
             ky_json.campo(jsonObj, 'p_num_ini'),
             ky_json.campo(jsonObj, 'p_num_act'),
             ky_json.campo(jsonObj, 'p_usua_id'));

                    v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';

   ELSIF(P_ACCION='ACT') THEN

   /* procedure PYG_CARGO_UPD_AMPLIAR_VENC(    P_CODE            IN OUT NUMBER    ,
      P_DIAS      IN INT  ,      P_USER                IN VARCHAR2  ,      V_MSG                OUT varchar2  )*/
      V_DOCUMENTO:=ky_json.campo(jsonObj, 'code');
      V_USUA:=ky_json.campo(jsonObj, 'id_usua_reg');
      V_NUM_DIAS:=KYG_UTILIDADES.FYS_DAME_PARAMETRO('T05');
      OPEN C_PAGOS(V_DOCUMENTO);
        LOOP
            FETCH C_PAGOS INTO C_PAGOS_REC;
            EXIT WHEN C_PAGOS%NOTFOUND;
            BANINST1.PKG_UPAO_DEUDA_TEMPORAL.PYG_CARGO_UPD_AMPLIAR_VENC@PROD.INT.UPAO.EDU.PE(C_PAGOS_REC.YTRREDO_PADH_CODE,V_NUM_DIAS,
            V_USUA,V_MENSAJE);
          END LOOP;
          CLOSE C_PAGOS;

        IF V_MENSAJE='OK' THEN
        V_MENSAJE:='<span style="color:blue;font-size:14px;font-weight:bold;">Ampliaste el pago de banco en ' || V_NUM_DIAS || ' días ya puedes ir a pagar </span>';

        --//ADICIONAR COMENTARIO EN EL TRACKING DEL DOCUMENTO
        comumgr.kyt_tramite_comunicacion.FYT_REG_COMENTARIO_DOC(SUBSTR(V_DOCUMENTO,1,10),V_USUA,'USUA',V_MENSAJE,0,V_MSG1);
            v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
        else
             v_msg := 'ERP-ERR ' || V_MENSAJE;
        END IF;



   END IF;

  COMMIT;


    exception
    WHEN EXP_USUA THEN
      v_msg := V_MENSAJE;
    when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;



procedure KYT_DOCU_DOCU_PP_PAGO_REQ(P_CODE_DOC IN VARCHAR2,P_SEQ_DOC INT,P_CODE_REQ in varchar2,P_APPL_CODE IN VARCHAR2,P_NUM_RECIBO IN VARCHAR2,P_ID IN VARCHAR2,P_COMENTARIO IN VARCHAR2,P_AUTOAP IN VARCHAR2,V_MSG OUT VARCHAR2)is


V_UTILIZADO INT;
V_IND_ENTREGA VARCHAR2(10);
V_DOC_CODE  VARCHAR2(20);
V_DOC_SEQ INT;
V_EXISTE_RECIBO INT;
V_PAGO_BANCO VARCHAR2(30);
V_MSG_1 VARCHAR2(300);
V_FECHA_PROC VARCHAR2(20);
V_ENCONTRO INT;

--/////////ERROR

EXP_GLOBAL EXCEPTION;
EXP_MENSAJE VARCHAR2(200);


CURSOR DT(P_NUM_RECIBO VARCHAR2,P_ID VARCHAR2,V_FECHA_PROC VARCHAR2) IS

    SELECT YYY.*
    FROM(SELECT TBRACCD_RECEIPT_NUMBER RECIBO,TBRACCD_TRAN_NUMBER TRAN_NUMBER,
         TBRACCD_TERM_CODE PERIODO,
         TBBDETC_DETAIL_CODE AS CONCEPTO,
         TBRACCD_DESC DESCRIPCION,
         FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) PAGO,
         FT_UPAO_GET_FECHA_PAGO@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER) FECHA,
         SPRIDEN_ID ID,
         SPRIDEN_FIRST_NAME ||' '||spriden_mi NOMBRES, spriden_last_name APELLIDOS
    FROM TBRACCD@PROD.INT.UPAO.EDU.PE,TBBDETC@PROD.INT.UPAO.EDU.PE,SPRIDEN@PROD.INT.UPAO.EDU.PE
   WHERE  TBRACCD_RECEIPT_NUMBER=P_NUM_RECIBO
   AND TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
        AND TBRACCD_PIDM=SPRIDEN_PIDM
     AND TBRACCD_AMOUNT > 0
     --comentado momentanamente para no verificar que este pagado
     AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'
     --AND (TBRACCD_DESC LIKE '%BIBLIO%' OR TBRACCD_DETAIL_CODE = '0125' )-- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET -- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET
     AND TBBDETC_TYPE_IND='C'
     AND SPRIDEN_CHANGE_IND IS NULL
     AND SPRIDEN_ID=P_ID) YYY
      WHERE TO_date(FECHA,'dd/mm/yyyy')>=TO_date(V_FECHA_PROC,'dd/mm/yyyy');

DT_ROW DT%ROWTYPE;

V_RECIBO INT;

 begin
 V_MSG:='ERP-ERR RECIBO DE PAGO ENVIADO NO EXISTE';
 V_ENCONTRO:=0;

--VERIFICAMOS SI EL RECIBO NO FUE UTILIZADO
 /*SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
     WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO;*/

        SELECT COUNT(*) INTO  V_RECIBO FROM YTRREPA
        WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO AND YTRREPA_IND_ESTADO='A';
--//VERIFICAMOS SI RECIBO YA FUE UTILIZADO
    IF( V_RECIBO=0) THEN
             SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
             WHERE YTRREPA_CODE_APP=P_CODE_REQ AND YTRREPA_APPL=P_APPL_CODE AND YTRREPA_IND_ESTADO='A';

             SELECT YTBDOCU_IND_ENTREGA,YTBDOCU_CODE,YTBDOCU_SEQ INTO V_IND_ENTREGA,V_DOC_CODE,V_DOC_SEQ FROM YTBDOCU
            WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=(SELECT YTBDOCU_CODE||'-'||YTBDOCU_SEQ FROM YTRREDO WHERE YTRREDO_CODE=P_CODE_REQ);
--//VERIFICAMOS SI NO TIENE UN PAGO ASIGNADO
            IF(V_UTILIZADO=0) THEN

                    SELECT  NVL(MAX(YTRREPA_SEQ),0) INTO  V_EXISTE_RECIBO FROM YTRREPA
                            WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO;

                            --///////OBTENER FECHA DESDE LA QUE VALIDARA LOS RECIBOS

                            SELECT TO_CHAR(NVL(YTAPROC_FECHA_INI_APL_PAGO,SYSDATE),'DD/MM/YYYY') INTO V_FECHA_PROC
                            FROM COMUMGR.YTAPROC
                            WHERE YTAPROC_CODE IN(SELECT YTBDOCU_PLAN_PROC_CODE
                            FROM COMUMGR.YTBDOCU XX WHERE XX.YTBDOCU_CODE||'-'||XX.YTBDOCU_SEQ=P_CODE_DOC||'-'||P_SEQ_DOC);

                            IF V_FECHA_PROC IS NULL THEN
                            EXP_MENSAJE:='ERP-ERR EL PROCESO NO TIENE FECHA DE INICIO ASIGNADO';
                             RAISE EXP_GLOBAL;
                            END IF;


                        OPEN DT(P_NUM_RECIBO,P_ID,V_FECHA_PROC);
                          --V_ENCONTRO:=DT%ROWCOUNT ;
                            LOOP
                             FETCH DT INTO DT_ROW;
                             EXIT WHEN DT%NOTFOUND;

                                V_ENCONTRO:=1;
                            --DESCOMENTAR LINEA AL COLOCAR EN PRODUCCIÓN
                            IF(kyt_tramite_administrador.FYT_VALIDA_CONCEPTO_PAGO(P_CODE_REQ,DT_ROW.CONCEPTO)='1') THEN
                            --IF('1'='1') THEN


                                INSERT INTO COMUMGR.YTRREPA (
                                            YTRREPA_ACCD_RECEIPT_NUMBER, YTRREPA_ACCD_TRAN_NUMBER, YTRREPA_PIDM,
                                            YTRREPA_TERM_CODE, YTRREPA_DETC_DETAIL_CODE, YTRREPA_ACCD_DESC,
                                            YTRREPA_MONTO, YTRREPA_FECHA_PAGO, YTRREPA_FECHA_ACTIVIDAD,YTRREPA_CODE_APP, YTRREPA_APPL, YTRREPA_USUA_ID,YTRREPA_USUA_ID_REG,YTRREPA_SEQ)
                                VALUES (DT_ROW.RECIBO,DT_ROW.TRAN_NUMBER, BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(P_ID),
                                        DT_ROW.PERIODO, DT_ROW.CONCEPTO, DT_ROW.DESCRIPCION, DT_ROW.PAGO, DT_ROW.FECHA, SYSDATE,P_CODE_REQ, P_APPL_CODE, P_ID, P_ID,V_EXISTE_RECIBO+1 );

                                 UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=P_CODE_REQ;



                                         --SI L ENTREGA ES VIRTUAL
                                         IF V_IND_ENTREGA='W' OR P_AUTOAP='1' THEN
                                               UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=P_CODE_REQ;

                                                 --VALIDAMOS REQUISITOS AUTOMATICAMENTE POR SER VIRTUAL
                                              UPDATE YTRREDO SET YTRREDO_IND_ESTADO='V',YTRREDO_COMENTARIO='VALIDACIÓN AUTOMÁTICA(SISTEMA)',YTRREDO_FECHA_ACEPTADO=SYSDATE
                                              WHERE YTRREDO_CODE=P_CODE_REQ;
                                         END IF;
                                V_MSG:='OK';

                            ELSE
                                V_MSG:='ERP-ERR CONCEPTO DE PAGO NO ES APLICABLE A ESTE TIPO DOCUMENTO VERIFICA LOS REQUISITOS DEL DOCUMENTO';
                            END IF;
                END LOOP;
             CLOSE  DT;

             IF V_ENCONTRO=0 THEN
                V_MSG:='ERP-ERR CONCEPTO DE PAGO NO ENCONTRADO O ESTA FUERA DE FECHA... INICIO DESDE: ' || V_FECHA_PROC ||' VERIFICA LA FECHA DE PAGO DE TU RECIBO' ||V_ENCONTRO;
             END IF;
                --INDOICA QUE EVALUACIÓN DE RECIBO SE ACETA
            ELSE
            V_MSG:='ERP-ERR Ya existe un pago asignado a este requisito elimine primero el pago para asignar otro';
            END IF;

    ELSE
    V_MSG:='ERP-ERR EL RECIBO YA FUE UTILIZADO';
    END IF;


EXCEPTION

 WHEN EXP_GLOBAL THEN
    V_MSG:=EXP_MENSAJE;
 WHEN OTHERS THEN

    V_MSG:='ERP-ERR ERROR: '|| SQLERRM;
END;


--//////SOLO VALIDAR QUE ESTE SEMBRADO COMO DEUDA

procedure KYT_DOCU_DOCU_PP_PAGO_REQ_D(P_CODE_DOC IN VARCHAR2,P_SEQ_DOC INT,P_CODE_REQ in varchar2,P_APPL_CODE IN VARCHAR2,P_NUM_RECIBO IN VARCHAR2,P_ID IN VARCHAR2,P_COMENTARIO IN VARCHAR2,P_AUTOAP IN VARCHAR2,V_MSG OUT VARCHAR2)is


V_UTILIZADO INT;
V_IND_ENTREGA VARCHAR2(10);
V_DOC_CODE  VARCHAR2(20);
V_DOC_SEQ INT;
V_EXISTE_RECIBO INT;
V_PAGO_BANCO VARCHAR2(30);
V_MSG_1 VARCHAR2(300);
V_FECHA_PROC VARCHAR2(20);
V_ENCONTRO INT;

--/////////ERROR

EXP_GLOBAL EXCEPTION;
EXP_MENSAJE VARCHAR2(200);


CURSOR DT(P_NUM_RECIBO VARCHAR2,P_ID VARCHAR2,V_FECHA_PROC VARCHAR2) IS

    SELECT TBRACCD_RECEIPT_NUMBER RECIBO,TBRACCD_TRAN_NUMBER TRAN_NUMBER,
         TBRACCD_TERM_CODE PERIODO,
         TBBDETC_DETAIL_CODE AS CONCEPTO,
         TBRACCD_DESC DESCRIPCION,
         FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) PAGO,
         FT_UPAO_GET_FECHA_PAGO@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER) FECHA,
         SPRIDEN_ID ID,
         SPRIDEN_FIRST_NAME ||' '||spriden_mi NOMBRES, spriden_last_name APELLIDOS
    FROM TBRACCD@PROD.INT.UPAO.EDU.PE,TBBDETC@PROD.INT.UPAO.EDU.PE,SPRIDEN@PROD.INT.UPAO.EDU.PE
   WHERE  TBRACCD_RECEIPT_NUMBER=P_NUM_RECIBO
   AND TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
        AND TBRACCD_PIDM=SPRIDEN_PIDM
     AND TBRACCD_AMOUNT > 0
     AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'
     --AND (TBRACCD_DESC LIKE '%BIBLIO%' OR TBRACCD_DETAIL_CODE = '0125' )-- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET -- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET
     AND TBBDETC_TYPE_IND='C'
     AND SPRIDEN_CHANGE_IND IS NULL
     AND SPRIDEN_ID=P_ID;

DT_ROW DT%ROWTYPE;

V_RECIBO INT;

 begin
 V_MSG:='ERP-ERR RECIBO DE PAGO ENVIADO NO EXISTE';
 V_ENCONTRO:=0;

--VERIFICAMOS SI EL RECIBO NO FUE UTILIZADO
 /*SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
     WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO;*/

        SELECT COUNT(*) INTO  V_RECIBO FROM YTRREPA
        WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO AND YTRREPA_IND_ESTADO='A';
--//VERIFICAMOS SI RECIBO YA FUE UTILIZADO
    IF( V_RECIBO=0) THEN
             SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
             WHERE YTRREPA_CODE_APP=P_CODE_REQ AND YTRREPA_APPL=P_APPL_CODE AND YTRREPA_IND_ESTADO='A';

             SELECT YTBDOCU_IND_ENTREGA,YTBDOCU_CODE,YTBDOCU_SEQ INTO V_IND_ENTREGA,V_DOC_CODE,V_DOC_SEQ FROM YTBDOCU
            WHERE YTBDOCU_CODE||'-'||YTBDOCU_SEQ=(SELECT YTBDOCU_CODE||'-'||YTBDOCU_SEQ FROM YTRREDO WHERE YTRREDO_CODE=P_CODE_REQ);
--//VERIFICAMOS SI NO TIENE UN PAGO ASIGNADO
            IF(V_UTILIZADO=0) THEN

                    SELECT  NVL(MAX(YTRREPA_SEQ),0) INTO  V_EXISTE_RECIBO FROM YTRREPA
                            WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO;

                            --///////OBTENER FECHA DESDE LA QUE VALIDARA LOS RECIBOS

                            SELECT TO_CHAR(NVL(YTAPROC_FECHA_INI_APL_PAGO,SYSDATE),'DD/MM/YYYY') INTO V_FECHA_PROC
                            FROM COMUMGR.YTAPROC
                            WHERE YTAPROC_CODE IN(SELECT YTBDOCU_PLAN_PROC_CODE
                            FROM COMUMGR.YTBDOCU XX WHERE XX.YTBDOCU_CODE||'-'||XX.YTBDOCU_SEQ=P_CODE_DOC||'-'||P_SEQ_DOC);

                            IF V_FECHA_PROC IS NULL THEN
                            EXP_MENSAJE:='ERP-ERR EL PROCESO NO TIENE FECHA DE INICIO ASIGNADO';
                             RAISE EXP_GLOBAL;
                            END IF;


                        OPEN DT(P_NUM_RECIBO,P_ID,V_FECHA_PROC);
                          --V_ENCONTRO:=DT%ROWCOUNT ;
                            LOOP
                             FETCH DT INTO DT_ROW;
                             EXIT WHEN DT%NOTFOUND;

                                V_ENCONTRO:=1;
                            --DESCOMENTAR LINEA AL COLOCAR EN PRODUCCIÓN
                            IF(kyt_tramite_administrador.FYT_VALIDA_CONCEPTO_PAGO(P_CODE_REQ,DT_ROW.CONCEPTO)='1') THEN
                            --IF('1'='1') THEN


                                INSERT INTO COMUMGR.YTRREPA (
                                            YTRREPA_ACCD_RECEIPT_NUMBER, YTRREPA_ACCD_TRAN_NUMBER, YTRREPA_PIDM,
                                            YTRREPA_TERM_CODE, YTRREPA_DETC_DETAIL_CODE, YTRREPA_ACCD_DESC,
                                            YTRREPA_MONTO, YTRREPA_FECHA_PAGO, YTRREPA_FECHA_ACTIVIDAD,YTRREPA_CODE_APP, YTRREPA_APPL, YTRREPA_USUA_ID,YTRREPA_USUA_ID_REG,YTRREPA_SEQ)
                                VALUES (DT_ROW.RECIBO,DT_ROW.TRAN_NUMBER, BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(P_ID),
                                        DT_ROW.PERIODO, DT_ROW.CONCEPTO, DT_ROW.DESCRIPCION, DT_ROW.PAGO, DT_ROW.FECHA, SYSDATE,P_CODE_REQ, P_APPL_CODE, P_ID, P_ID,V_EXISTE_RECIBO+1 );

                                 UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=P_CODE_REQ;



                                         --SI L ENTREGA ES VIRTUAL
                                         IF V_IND_ENTREGA='W' OR P_AUTOAP='1' THEN
                                               UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=P_CODE_REQ;

                                                 --VALIDAMOS REQUISITOS AUTOMATICAMENTE POR SER VIRTUAL
                                              UPDATE YTRREDO SET YTRREDO_IND_ESTADO='V',YTRREDO_COMENTARIO='VALIDACIÓN AUTOMÁTICA(SISTEMA)',YTRREDO_FECHA_ACEPTADO=SYSDATE
                                              WHERE YTRREDO_CODE=P_CODE_REQ;
                                         END IF;
                                V_MSG:='OK';

                            ELSE
                                V_MSG:='ERP-ERR CONCEPTO DE PAGO NO ES APLICABLE A ESTE TIPO DOCUMENTO VERIFICA LOS REQUISITOS DEL DOCUMENTO';
                            END IF;
                END LOOP;
             CLOSE  DT;

             IF V_ENCONTRO=0 THEN
                V_MSG:='ERP-ERR CONCEPTO DE PAGO NO ENCONTRADO O ESTA FUERA DE FECHA... INICIO DESDE: ' || V_FECHA_PROC ||' VERIFICA LA FECHA DE PAGO DE TU RECIBO' ||V_ENCONTRO;
             END IF;
                --INDOICA QUE EVALUACIÓN DE RECIBO SE ACETA
            ELSE
            V_MSG:='ERP-ERR Ya existe un pago asignado a este requisito elimine primero el pago para asignar otro';
            END IF;

    ELSE
    V_MSG:='ERP-ERR EL RECIBO YA FUE UTILIZADO';
    END IF;


EXCEPTION

 WHEN EXP_GLOBAL THEN
    V_MSG:=EXP_MENSAJE;
 WHEN OTHERS THEN

    V_MSG:='ERP-ERR ERROR: '|| SQLERRM;
END;
FUNCTION FKYT_DOCU_DOCU_PP_YT_NUM_COME(P_CODE IN VARCHAR2,p_SEQ IN INT) return varchar2
IS

V_TEXTO VARCHAR2(20);


BEGIN
V_TEXTO:='0';

SELECT COUNT(*) INTO V_TEXTO FROM YTRCOME WHERE YTRCOME_DOCU_CODE=P_CODE AND YTRCOME_DOCU_SEQ=p_SEQ;

 RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0';

   when OTHERS then
         RETURN '0';
end;

PROCEDURE KYT_DOCU_DOCU_PP_YTBDOCU_CUR_U(P_ACCION IN VARCHAR2,P_DATA IN VARCHAR2,CURSOR_OUT OUT T_CURSOR)

    is

    code varchar2(20);
    v_PIDM int;
v_PaginaSize INT;
v_Pagina INT;
V_INI INT;
V_FIN INT;
V_TOTAL INT;
v_estado varchar2(10);
v_desc varchar2(100);
v_usua_id varchar2(30);
v_d varchar2(20);
v_id varchar2(20);
v_f varchar2(30);
v_fi date;
v_ff date;
v_expediente varchar2(30);
V_NOFECHA VARCHAR2(1);

V_CADENA1 VARCHAR2(150);
V_CADENA2 VARCHAR2(150);
V_CADENA3 VARCHAR2(150);
V_CADENA4 VARCHAR2(100);
V_POS1 INT;
V_POS2 INT;
V_POS3 INT;
V_NUM_REG VARCHAR2(20);

v_pro varchar2(50);
    begin
    V_NOFECHA:='N';





  IF(P_ACCION='UNI') THEN
        OPEN CURSOR_OUT  FOR
        SELECT
YTBDOCU_CODE, YTBDOCU_SEQ, YTBDOCU_ESTA_CODE,
   YTBDOCU_EXPE_CODE, YTBDOCU_COLL_CODE, YTBDOCU_PLAN_PROC_CODE,
   YTBDOCU_PLAN_SEQ, YTBDOCU_USUA_ID USUA_ID, YTBDOCU_USUA_ID_REG,
   YTBDOCU_FECHA_ACTIVIDAD, YTBDOCU_FECHA_RECEPCION, YTBDOCU_FECHA_EMISION,
   YTBDOCU_LEIDO, YTBDOCU_CAMP_CODE, YTBDOCU_DATA,
   YTBDOCU_BUSCA, YTBDOCU_PLANTILLA, YTBDOCU_OBSERVACIONES COMENTARIOS,
   YTBDOCU_ASUNTO ASUNTO, YTBDOCU_NUMERO_FOLIOS FOLIOS, YTBDOCU_IND_VIRTUAL,
   YTBDOCU_MAJR_CODE, YTBDOCU_LEVL_CODE, YTBDOCU_CONDICION,
   YTBDOCU_APELLIDOS, YTBDOCU_NOMBRES, YTBDOCU_PIDM,
   YTBDOCU_MAJR_DESC, YTBDOCU_COLL_CODE_1, YTBDOCU_COLL_DESC,
   YTBDOCU_PERS_DNI, YTBDOCU_PERS_SEXO, YTBDOCU_FECHA_ENTREGA,
   YTBDOCU_ID_USUA_ENT, YTBDOCU_NUMERO, YTBDOCU_ID_USUA_VALIDO,
   YTBDOCU_FECHA_VALIDO, YTBDOCU_FECHA_COMPLETO, YTBDOCU_CODIGO_BARRAS CODIGO_BARRAS,
   YTBDOCU_UNIDAD_ENTREGAR, YTBDOCU_ID_USUA_RECIBE, YTBDOCU_UNIDAD_ENTREGAR_COAS,
   YTBDOCU_TIPO_CODE, YTBDOCU_SOLI_CODE, YTBDOCU_TIDO_CODE TIDO_CODE,
   YTBDOCU_NUM_EXT NUM_EXT, YTBDOCU_VAAN_CODE, YTBDOCU_PRIO_CODE PRIORIDAD,
   --FKYT_DOCU_DOCU_PP_TIEMPO_FALTA(YTBDOCU_FECHA_APROX_RESULT,DECODE(YTBDOCU_FECHA_ENTREGA,NULL,SYSDATE,YTBDOCU_FECHA_ENTREGA)) HORAS,
   '' HORAS,
   YTBDOCU_DOC_REFERENCIA DOC_REFERENCIA,YTBDOCU_TIDO_CODE TIDO_CODE,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
FROM COMUMGR.YTBDOCU
WHERE YTBDOCU_CODE=P_DATA
AND YTBDOCU_SEQ=1;


ELSIF(P_ACCION='LPA') THEN  --LISTADO DE DOCUMENTOS PENDIENTES DE APROBACIÓN POR UNIDADES ADMINISTRATIVAS(recibidos)

jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_id:=ky_json.campo(jsonObj, 'id');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_f:=ky_json.campo(jsonObj, 'fe');
    v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

     --if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','NU','AR')) then

      if(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
      ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
       ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
       END IF;
       

    IF(LENGTH(v_d)>0) THEN  --INDICA QUE INGRESO UN CODIGO DE DOCUMENTO
     


                    -- SELECT '1' INTO V_TOTAL  FROM DUAL;
                        V_TOTAL:=1;
                        
                      V_NUM_REG:=V_D;
                      IF LENGTH(V_NUM_REG)<10 THEN
                       V_NUM_REG:=LPAD(V_D,6,'0');
                      END IF;

                    OPEN CURSOR_OUT  FOR
                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                        '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE  (YTBDOCU_CODE= v_d OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG||'%')
                                AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                        AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                        --AND YTRAPDO_NIVEL<>1
                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                    WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                    --AND
                                                    YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                order by YTBDOCU_CODE DESC) XX) TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
        
    
    ELSE --INDICA UE INGRESO UN ASUNTO DE BUSQUEDA /ID
    

            IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO


               IF V_NOFECHA<>'S' THEN   --************** INDICA QUE EL USUARIO PROPORCIONO FECHA

                         OPEN CURSOR_OUT  FOR

                              WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM (SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE YTBDOCU_USUA_ID=V_ID
                                AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                AND YTBDOCU_ESTA_CODE IN('TR','OB')
                               AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                    AND  (SELECT count(*) FROM YTRAPDO
                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                    --AND YTRAPDO_NIVEL<>1
                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                        --AND
                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0
                                order by YTBDOCU_CODE DESC) XX)

                                SELECT TT.*,  v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS,(SELECT COUNT(*) FROM TEMP) TOTAL_REG
                                FROM TEMP TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

               ELSE   --************** NO PROPORCIONO FECHA


                        OPEN CURSOR_OUT  FOR


                             WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM (SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ||'aqui'   ASUNTO,
                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE YTBDOCU_USUA_ID=V_ID
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                    AND  (SELECT count(*) FROM YTRAPDO
                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                    --AND YTRAPDO_NIVEL<>1
                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                        --AND
                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                order by YTBDOCU_CODE DESC) XX)

                                SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS,(SELECT COUNT(*)  FROM TEMP) TOTAL_REG
                                FROM TEMP TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                 END IF;

            ELSE   --INDICA QUE SOLO INGRESO ASUNTO

                  IF V_NOFECHA<>'S' THEN --***********INGRESO FECHA

                        OPEN CURSOR_OUT  FOR
                                WITH TEMP AS (SELECT XX.*,rownum as ROWNRO FROM (SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO||'feccchhh' ASUNTO,
                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                YTBDOCU_USUA_ID USUA_ID,
                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                    AND  (SELECT count(*) FROM YTRAPDO
                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                    --AND YTRAPDO_NIVEL<>1
                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND
                                        EXISTS(SELECT 'Y' FROM YTRUSUN
                                        WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE)

                                        --YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')

                                        )>0

                                order by YTBDOCU_CODE DESC) XX)

                                SELECT /*+ FIRST_ROWS(n) */ TT.*,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS,(SELECT COUNT(*)  FROM TEMP) TOTAL_REG

                                FROM TEMP TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                        --*************NO PROPORCIONA NINGUN PARAMETOR NI FECHA
                  ELSE --***********NO INGRESO FECHA    ||'XXXX'

                            IF v_desc<>'%'  OR V_PRO<>'%' THEN


                                            SELECT COUNT(*) INTO V_TOTAL
                                            FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                            WHERE   YTRUSUN_USUA_ID=v_usua_id
                                            AND YTRUSUN_IND_ESTADO='A'
                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                            AND YTRAPDO_IND_ESTADO='P'
                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                    FROM COMUMGR.YTRAPDO
                                                                                    WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                    AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                    AND YTRAPDO_IND_ESTADO='P')
                                             AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                            AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                            OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                           AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%';


                                            OPEN CURSOR_OUT  FOR

                                                   SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                    '' RATIO,
                                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                   FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                   --'CCCC' SN_APROB,
                                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO ,
                                                   --'XX' COMO_LLEGO,
                                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                   -- ,'VVV' TIPO_CODE,
                                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                    '0' NUM_REQUISITOS,V_TOTAL TOTAL_REG
                                                    FROM (SELECT XX.*,rownum as ROWNRO FROM (
                                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO||'46' ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                    FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                                     LEFT JOIN YTVESTA ON YTBDOCU_ESTA_CODE=YTVESTA_CODE
                                                     LEFT JOIN YTVPRIO ON YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                    WHERE   YTRUSUN_USUA_ID=v_usua_id
                                                    AND YTRUSUN_IND_ESTADO='A'
                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                                    AND YTRAPDO_IND_ESTADO='P'
                                                    AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                            AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                            AND YTRAPDO_IND_ESTADO='P')
                                                     AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                          OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')

                                                     AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'

                                                    order by YTBDOCU_CODE DESC) XX)  TT
                                                    WHERE ROWNRO >= v_Ini AND ROWNRO<= v_Fin;


                            ELSE  --NO ENVIA DESCRIPCION PARA BUSCAR
                                        SELECT COUNT(*) INTO V_TOTAL
                                            FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                            WHERE   YTRUSUN_USUA_ID=v_usua_id
                                            AND YTRUSUN_IND_ESTADO='A'
                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                            AND YTRAPDO_IND_ESTADO='P'
                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                    FROM COMUMGR.YTRAPDO
                                                                                    WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                    AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                    AND YTRAPDO_IND_ESTADO='P')
                                             AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                            --AND YTBDOCU_ESTA_CODE IN('TR','OB');
                                            AND YTBDOCU_ESTA_CODE IN(v_estado);
                                            



                                           OPEN CURSOR_OUT  FOR
                                           /*SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                                    '' RATIO,
                                                   comumgr.kyt_docu_docu.FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                    comumgr.kyt_docu_docu.FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,
                                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                    ,comumgr.kyt_docu_docu.FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                    '0' NUM_REQUISITOS,V_TOTAL TOTAL_REG
                                                    FROM (SELECT XX.*,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVPRIO_DESCRIPCION PRIORIDAD,
                                                    YTVESTA_ESTILO ESTILO,rownum as ROWNRO FROM (
                                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO||'5656' ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTBDOCU_PRIO_CODE,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG,YTRAPDO_NIVEL,YTRAPDO_DOCU_CODE,YTRAPDO_DOCU_SEQ
                                                    FROM comumgr.YTRUSUN ,comumgr.YTRAPDO CCC, comumgr.YTBDOCU

                                                    WHERE   YTRUSUN_USUA_ID=v_usua_id
                                                    AND YTRUSUN_IND_ESTADO='A'
                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                                    AND YTRAPDO_IND_ESTADO='P'

                                                     AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                                    order by YTBDOCU_CODE DESC
                                                    ) XX
                                                     LEFT JOIN comumgr.YTVESTA ON xx.ESTADO_CODE=YTVESTA_CODE
                                                     LEFT JOIN comumgr.YTVPRIO ON xx.YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                     where  xx.YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=xx.YTRAPDO_DOCU_CODE
                                                                                            AND YTRAPDO_DOCU_SEQ=xx.YTRAPDO_DOCU_SEQ
                                                                                            AND YTRAPDO_IND_ESTADO='P')

                                                    )  TT
                                                    WHERE ROWNRO >= v_Ini AND ROWNRO<= v_Fin;*/

                                                   SELECT TT.*,v_PaginaSize "PAGINASIZE",
                                                    '' RATIO,
                                                   FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,
                                                    INITCAP(YTVESTA_DESCRIPCION) ESTADO,
                                                    DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                    '0' NUM_REQUISITOS,V_TOTAL TOTAL_REG
                                                    FROM (SELECT XX.*,rownum as ROWNRO FROM (
                                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO||'5656' ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                    FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                                     LEFT JOIN YTVESTA ON YTBDOCU_ESTA_CODE=YTVESTA_CODE
                                                     LEFT JOIN YTVPRIO ON YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                    WHERE   YTRUSUN_USUA_ID=v_usua_id
                                                    AND YTRUSUN_IND_ESTADO='A'
                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                                    AND YTRAPDO_IND_ESTADO='P'
                                                    AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                            AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                            AND YTRAPDO_IND_ESTADO='P')
                                                     AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTBDOCU_ESTA_CODE IN('TR','OB')
                                                    AND YTBDOCU_ESTA_CODE IN(v_estado)                                                    
                                                    order by YTBDOCU_CODE DESC) XX  )  TT
                                                    WHERE ROWNRO >= v_Ini AND ROWNRO<= v_Fin;

                            END IF;
                  END IF;



            END IF;

        END IF;



ELSIF(P_ACCION='ENTR') THEN  --LISTADO DE DOCUMENTOS PENDIENTES DE ENTREGA

jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_id:=ky_json.campo(jsonObj, 'id');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_f:=ky_json.campo(jsonObj, 'fe');
    v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;

     --if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','NU','AR')) then

      if(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
      ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
       ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
       END IF;

     IF(LENGTH(v_d)>0) THEN  --INDICA QUE INGRESO UN CODIGO DE DOCUMENTO


            --SELECT '1' INTO V_TOTAL  FROM DUAL;
                                V_TOTAL:=1;
                                V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

        OPEN CURSOR_OUT  FOR
            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                    --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                    '' RATIO,
                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                    '0' NUM_REQUISITOS
                    FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE  (YTBDOCU_CODE= v_d OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG ||'%')
                                AND YTBDOCU_ESTA_CODE ='CO'
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                        AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                        --AND YTRAPDO_NIVEL<>1
                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                    WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                    --AND
                                                    YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                order by YTBDOCU_CODE DESC) XX) TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

     ELSE --INDICA UE INGRESO UN ASUNTO DE BUSQUEDA /ID

            IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO


               IF V_NOFECHA<>'S' THEN
                 SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  YTBDOCU_USUA_ID=V_ID
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            and YTBDOCU_ESTA_CODE ='CO'
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                        OPEN CURSOR_OUT  FOR
                                SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS
                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                            YTBDOCU_USUA_ID USUA_ID,
                                            YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                            YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                WHERE YTBDOCU_USUA_ID=V_ID
                                                AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                AND YTBDOCU_ESTA_CODE ='CO'
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTRAPDO_NIVEL<>1
                                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        --AND
                                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                 ELSE

                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  YTBDOCU_USUA_ID=V_ID
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            AND YTBDOCU_ESTA_CODE ='CO'
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                        OPEN CURSOR_OUT  FOR
                                SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS
                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                            WHERE YTBDOCU_USUA_ID=V_ID
                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                    OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                            AND YTBDOCU_ESTA_CODE ='CO'
                                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                AND  (SELECT count(*) FROM YTRAPDO
                                                     WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                        AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                --AND YTRAPDO_NIVEL<>1
                                                --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                    AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                    AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                    WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                    --AND
                                                    YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                            order by YTBDOCU_CODE DESC) XX) TT
                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                 END IF;

            ELSE   --INDICA  QUE NO INGRESO NADA

                  IF V_NOFECHA<>'S' THEN
                         SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                            WHERE  TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                            and YTBDOCU_ESTA_CODE ='CO'
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND  (SELECT count(*) FROM YTRAPDO
                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                         --AND YTRAPDO_NIVEL<>1
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                         AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                --AND
                                                YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                        OPEN CURSOR_OUT  FOR
                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                               '' RATIO,
                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                '0' NUM_REQUISITOS
                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                            YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                            YTBDOCU_USUA_ID USUA_ID,
                                            YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                            YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                            ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                            YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                AND YTBDOCU_ESTA_CODE ='CO'
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                         WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    --AND YTRAPDO_NIVEL<>1
                                                    --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                        WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        --AND
                                                        YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;


                       ELSE  --NO INGRESA NADA NI FECHA

                            IF  v_desc<>'%' OR V_PRO<>'%' THEN
                                       SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE   ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                    OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        and YTBDOCU_ESTA_CODE ='CO'
                                        AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                        AND  (SELECT count(*) FROM YTRAPDO
                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                     --AND YTRAPDO_NIVEL<>1
                                                    AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')

                                                     AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                            WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                            --AND
                                                            YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'  AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;

                                        OPEN CURSOR_OUT  FOR
                                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                               '' RATIO,
                                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS
                                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO||'CRITERIO' ASUNTO,
                                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                YTBDOCU_USUA_ID USUA_ID,
                                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                    WHERE ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                                    AND YTBDOCU_ESTA_CODE ='CO'
                                                                    AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                        AND  (SELECT count(*) FROM YTRAPDO
                                                                             WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                                AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                                        --AND YTRAPDO_NIVEL<>1
                                                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                            WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                            --AND
                                                                            YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                              ELSE


                                       /* SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                        WHERE YTBDOCU_ESTA_CODE ='CO'
                                          AND  (SELECT count(*) FROM YTRAPDO
                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                    AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                    AND YTRAPDO_IND_ESTADO='P'
                                                    AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ)
                                                                        FROM COMUMGR.YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                        AND YTRAPDO_IND_ESTADO='P')
                                                     AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                            WHERE YTRUSUN_USUA_ID=v_usua_id
                                                            AND YTRUSUN_IND_ESTADO='A'
                                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0;*/

                                        SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU,YTRAPDO
                                        WHERE YTBDOCU_ESTA_CODE ='CO'
                                        AND YTBDOCU_CODE =YTRAPDO_DOCU_CODE
                                        AND YTBDOCU_SEQ=YTRAPDO_DOCU_SEQ
                                        AND YTRAPDO_IND_ESTADO='P'
                                        AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ)
                                                                        FROM COMUMGR.YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                        AND YTRAPDO_IND_ESTADO='P')
                                                     AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                            WHERE YTRUSUN_USUA_ID=v_usua_id
                                                            AND YTRUSUN_IND_ESTADO='A'
                                                            AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE);

                                       /* SELECT COUNT(*) INTO V_TOTAL
                                        FROM YTRUSUN ,YTRAPDO CCC, YTBDOCU
                                        WHERE   YTRUSUN_USUA_ID=v_usua_id
                                        AND YTRUSUN_IND_ESTADO='A'
                                        AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE
                                        AND YTRAPDO_IND_ESTADO='P'
                                        AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                    FROM COMUMGR.YTRAPDO
                                                                                    WHERE  YTRAPDO_DOCU_CODE=CCC.YTRAPDO_DOCU_CODE
                                                                                    AND YTRAPDO_DOCU_SEQ=CCC.YTRAPDO_DOCU_SEQ
                                                                                    AND YTRAPDO_IND_ESTADO='P')
                                             AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                            AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                            AND YTBDOCU_ESTA_CODE ='CO';*/



                                            OPEN CURSOR_OUT  FOR
                                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                               '' RATIO,
                                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS
                                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO ASUNTO,
                                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                YTBDOCU_USUA_ID USUA_ID,
                                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                    FROM YTBDOCU,YTRAPDO,YTVESTA YY,YTVPRIO
                                                                    WHERE YTBDOCU_ESTA_CODE ='CO'
                                                                    AND   YTBDOCU_CODE=YTRAPDO_DOCU_CODE
                                                                    AND   YTBDOCU_SEQ=YTRAPDO_DOCU_SEQ
                                                                    AND   YTRAPDO_IND_ESTADO='P'
                                                                    AND   YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL)
                                                                                            FROM COMUMGR.YTRAPDO
                                                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                                            AND YTRAPDO_IND_ESTADO='P')
                                                                    AND   EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                    WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'
                                                                                    AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE)

                                                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;





                                      /*  OPEN CURSOR_OUT  FOR
                                               SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                               --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                               '' RATIO,
                                                --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                '0' NUM_REQUISITOS
                                                FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                    SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                    YTBDOCU_ASUNTO||'nada1111' ASUNTO,
                                                                YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                YTBDOCU_USUA_ID USUA_ID,
                                                                YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE

                                                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                    WHERE YTBDOCU_ESTA_CODE ='CO'
                                                                     AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                        AND  (SELECT count(*) FROM YTRAPDO
                                                                             WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE
                                                                                AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                                        --AND YTRAPDO_NIVEL<>1
                                                                        --AND  YTRAPDO_SEQ=(SELECT DISTINCT MIN(YTRAPDO_SEQ) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND  YTRAPDO_NIVEL=(SELECT DISTINCT MIN(YTRAPDO_NIVEL) FROM COMUMGR.YTRAPDO WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE  AND YTRAPDO_IND_ESTADO='P')
                                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                            WHERE --YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                            --AND
                                                                            YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A' AND YTRUSUN_UNID_CODE=YTRAPDO_UNID_CODE))>0

                                                                    order by YTBDOCU_CODE DESC) XX) TT
                                                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;*/


                              END IF;

                       END IF;



                   END IF;
END IF;







ELSIF(P_ACCION='LYE') THEN  --DOCUMENTOS ENVIADOS POR UNIDAD

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_expediente:=ky_json.campo(jsonObj, 'p_expediente');
    v_estado:=ky_json.campo(jsonObj, 'estado');
     v_id:=ky_json.campo(jsonObj, 'id');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
     v_f:=ky_json.campo(jsonObj, 'fe');
     v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
    v_f:=ky_json.campo(jsonObj, 'fe');


     IF(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;
      ELSIF (v_f='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
      ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
      END IF;


        IF(LENGTH(v_d)>0) THEN  --INDICA QUE INGRESO UN CODIGO DE DOCUMENTO

                    --SELECT '1' INTO V_TOTAL  FROM DUAL;
                        V_TOTAL:=1;
                         V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

                    OPEN CURSOR_OUT  FOR
                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                        '0' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        ,'0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                    YTBDOCU_USUA_ID USUA_ID,
                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                            WHERE (YTBDOCU_CODE= v_d OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG||'%')
                            AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')

                           -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                            order by YTBDOCU_CODE DESC) XX) TT
                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

       --*************INGRESO ASUNTO PARA CONSULTA

       ELSE

          IF V_NOFECHA<>'S' THEN     --************* PROPORCIONO FECHA

            IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO
                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE YTBDOCU_USUA_ID=v_Id
                     AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                     AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                     AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                    --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                        AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                        AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                        AND (select COUNT(*) from COMUMGR.YTRAPDO
                              where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0;

                    OPEN CURSOR_OUT  FOR
                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                       '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                    YTBDOCU_USUA_ID USUA_ID,
                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                    FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                    WHERE YTBDOCU_USUA_ID=v_Id
                                    AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                    AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                    AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                    -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)

                                    AND (select COUNT(*) from COMUMGR.YTRAPDO
                                      where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0
                                    AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                    AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                    order by YTBDOCU_CODE DESC) XX) TT
                                    WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

           ELSE  --***********NO INGRESA FECHA

               SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE  TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                    --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                    AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                    AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                    AND upper(YTBDOCU_asunto) like '%'|| v_desc ||'%';

                    OPEN CURSOR_OUT  FOR
                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                        '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                    YTBDOCU_USUA_ID USUA_ID,
                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                            WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                            AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                            AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                           -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                            AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                            order by YTBDOCU_CODE DESC) XX) TT
                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

           END IF;

           ELSE --BUSCAR SIN FECHA

              IF LENGTH(V_ID)>2 THEN   --INGRESA ID Y VERIFA TAMBIEN POR ASUNTO
                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE  ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                        AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                    --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                        AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                        AND YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                        AND (select COUNT(*) from COMUMGR.YTRAPDO
                              where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0;

                    OPEN CURSOR_OUT  FOR
                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                       '0' RATIO,
                            --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                            FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                            FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                            ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                            FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,
                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                        FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                        WHERE YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                        AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                        AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                        -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                        AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                        AND (select COUNT(*) from COMUMGR.YTRAPDO
                                          where YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND (YTRAPDO_UNID_CODE=V_ID OR  YTRAPDO_ORGN_CODE=V_ID))>0
                                        AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                        AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                        order by YTBDOCU_CODE DESC) XX) TT
                                        WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

           ELSE --BUSCA SIN FECHA Y SIN ID PROPORCIONA NUMERO DE PROCESO

                IF v_desc<>'%' OR V_PRO<>'%' OR V_ESTADO <>'%' THEN

                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                     WHERE                 --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                         YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                         AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)                                        ;

                    --V_TOTAL:=200;

                    OPEN CURSOR_OUT  FOR
                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                       '' RATIO,
                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                        '0' NUM_REQUISITOS
                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                            YTBDOCU_ASUNTO ASUNTO,
                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                        YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,YTBDOCU_TIPO_CODE,
                                        YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                WHERE YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')
                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                           --  EXISTS (SELECT 'Y' FROM COMUMGR.YTRUSUN
                               --                  WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_UNID_CODE=YTBDOCU_USUA_ID AND YTRUSUN_IND_ESTADO='A')
                             --YTBDOCU_USUA_ID='000002'

                              -- and upper(YTBDOCU_asunto) like '%'|| v_desc ||'%'
                               -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                order by YTBDOCU_CODE DESC) XX) TT
                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN order by CODE DESC;

                    ELSE --NO ENVIA NINGUN PARAMETRO
                                     SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                     WHERE                 --  and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                     YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A');

                                --V_TOTAL:=200;

                                OPEN CURSOR_OUT  FOR
                                   SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                   --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                   '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                    '0' NUM_REQUISITOS
                                    FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                        YTBDOCU_ASUNTO ASUNTO,
                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                    YTBDOCU_USUA_ID USUA_ID,YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,YTBDOCU_TIPO_CODE,
                                                    YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                            WHERE YTBDOCU_USUA_ID IN(SELECT YTRUSUN_UNID_CODE FROM COMUMGR.YTRUSUN
                                            WHERE YTRUSUN_USUA_ID=v_usua_id AND YTRUSUN_IND_ESTADO='A')

                                       --  EXISTS (SELECT 'Y' FROM COMUMGR.YTRUSUN
                                           --                  WHERE YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_UNID_CODE=YTBDOCU_USUA_ID AND YTRUSUN_IND_ESTADO='A')
                                         --YTBDOCU_USUA_ID='000002'

                                          -- and upper(YTBDOCU_asunto) like '%'|| v_desc ||'%'
                                           -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                            order by YTBDOCU_CODE DESC) XX) TT
                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN order by CODE DESC;
                   END IF;

           END IF;

           END IF;


    END IF;

 ELSIF(P_ACCION='LIU')  THEN --/////////////////MI CUADERNO////////////////////////////////////

    V_PIDM:=0;

    jsonObj := json(P_DATA);
    v_PaginaSize := ky_json.campo(jsonObj, 'nre');
    v_Pagina:=ky_json.campo(jsonObj, 'pag');
    v_desc:=REPLACE(UPPER(ky_json.campo(jsonObj, 'b')),' ','');
    v_d:=ky_json.campo(jsonObj, 'd');
    v_id:=ky_json.campo(jsonObj, 'id');
    v_estado:=ky_json.campo(jsonObj, 'estado');
    v_usua_id:=ky_json.campo(jsonObj, 'usua_id');
    v_pro:=ky_json.campo(jsonObj, 'pro');
    v_Ini:= (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
    v_Fin:= v_PaginaSize * v_Pagina;
     v_f:=ky_json.campo(jsonObj, 'fe');



        IF(v_f IN('HOY',',') OR length(v_f)<>21) THEN
          v_fi:=sysdate-7;
          v_ff:=sysdate;

         ELSIF (V_F='01-01-1900,01-01-1900') THEN
          V_NOFECHA:='S';
        ELSE
          select to_date(replace(substr( v_f ,1,10),'-','/'),'dd/mm/yyyy'),to_date(replace(substr( v_f ,12,10),'-','/'),'dd/mm/yyyy') into v_fi,v_ff from dual;
        END IF;

  if(v_estado='%' OR v_estado IN('EV','TR','CO','AT','OB','RE','AR','NU')) then

  -- v_estado:='''EV','TR','CO','AT','OB','RE','AR''';

  --IF(v_estado='%') then
                IF(LENGTH(v_d)>0) THEN --CONSULTA cuando usuario proporciona codigo de documento

                              V_TOTAL:=1;

                                V_NUM_REG:=V_D;
                              IF LENGTH(V_NUM_REG)<10 THEN
                               V_NUM_REG:=LPAD(V_D,6,'0');
                              END IF;

                                    OPEN CURSOR_OUT  FOR
                                       SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                       --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                       '' RATIO,
                                    --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                    FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                    ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                    --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                    '0' NUM_REQUISITOS
                                            FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                        YTBDOCU_USUA_ID USUA_ID,
                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                --WHERE YTBDOCU_CODE=LPAD(V_D,10,'0')
                                                WHERE (YTBDOCU_CODE= LPAD(V_D,10,'0') OR YTBDOCU_NUM_REG||YTBDOCU_VAAN_CODE like V_NUM_REG|| '%')
                                                AND YTBDOCU_ESTA_CODE<>'AN'
                                               -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                AND  (SELECT count(*) FROM YTRAPDO
                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1
                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;





                  ELSE --PARA TODOS LOS ID ingresa cuando no se proporciona ningun parametro

                     IF(v_Id='%') THEN   --cuando no se envia ningun parametro
                         IF V_NOFECHA<>'S' THEN  --PROPORCIONA RANGO DE FECHAS PARA BUSCAR

                                    SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                    WHERE YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ LIKE V_PRO||'%'
                                    AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                   -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                    AND  (SELECT count(*) FROM YTRAPDO
                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;

                                    OPEN CURSOR_OUT  FOR
                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                        '' RATIO,
                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D'))||'XXXXXXX' SN_APROB,
                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                        '0' NUM_REQUISITOS
                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                        YTBDOCU_USUA_ID USUA_ID,
                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                WHERE YTBDOCU_ESTA_CODE<>'AN'
                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                               -- AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                AND  (SELECT count(*) FROM YTRAPDO
                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0

                                                order by YTBDOCU_CODE DESC) XX) TT
                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                         --************NO PROPORCIONA NINGUN PARAMETRO, NI FECHAS
                          ELSE --NO PROPORCIONA FECHAS BUSCARA EN TODOS LOS DOCUMENTOS

                                 IF v_desc<>'%' OR V_PRO<>'%' OR V_ESTADO <>'%' THEN

                                                 SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                                    WHERE YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                    --AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                   -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;
                                                               --V_TOTAL:=100;

                                                    OPEN CURSOR_OUT  FOR
                                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                        '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                            YTBDOCU_ASUNTO||'XXXXX' ASUNTO,
                                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                        YTBDOCU_USUA_ID USUA_ID,
                                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                WHERE  YTBDOCU_ESTA_CODE<>'AN'
                                                                AND YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                                AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) LIKE '%'|| v_desc ||'%')
                                                                AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)

                                                              -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                                --Where regexp_like(name,'^sasho$|^rags$|^shashi*');
                                                                --AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')
                                                                AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                AND  (SELECT count(*) FROM YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0

                                                                order by YTBDOCU_CODE DESC) XX) TT
                                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                                     ELSE   --NADA DE NADA CERO PARAMETROS SIN FECHA
                                                  /*  SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                                    WHERE YTBDOCU_ESTA_CODE<>'AN'
                                                   -- AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                   -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                      AND (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;*/


                                                        SELECT COUNT(*) INTO V_TOTAL FROM(SELECT DISTINCT YTBDOCU_CODE
                                                        FROM YTRUSUN,YTRAPDO,YTBDOCU
                                                        WHERE  YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'
                                                        AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE = YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                        AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                        AND YTBDOCU_ESTA_CODE<>'AN');

                                                               --V_TOTAL:=100;

                                                        OPEN CURSOR_OUT  FOR
                                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                        '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                            YTBDOCU_ASUNTO ASUNTO,
                                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                        YTBDOCU_USUA_ID USUA_ID,
                                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                        ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                                FROM (SELECT DISTINCT CC.YTBDOCU_CODE CODE
                                                                                                        FROM YTRUSUN,YTRAPDO,YTBDOCU CC
                                                                                                        WHERE  YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'
                                                                                                        AND YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE = YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                                        AND YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ
                                                                                                        AND YTBDOCU_ESTA_CODE<>'AN') PP,
                                                                                                        YTBDOCU XXX,YTVESTA YY,YTVPRIO MMM
                                                                WHERE  PP.CODE=YTBDOCU_CODE
                                                                        AND XXX.YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                        AND XXX.YTBDOCU_PRIO_CODE=MMM.YTVPRIO_CODE
                                                                order by YTBDOCU_CODE DESC) XX) TT
                                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                                                  /*  OPEN CURSOR_OUT  FOR
                                                        SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                        --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                        '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                            SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                            YTBDOCU_ASUNTO||'XXXXX1111' ASUNTO,
                                                                        YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                        YTBDOCU_USUA_ID USUA_ID,
                                                                        YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                        YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                        ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                        YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                                WHERE  YTBDOCU_ESTA_CODE<>'AN'

                                                              -- AND  regexp_like(YTBDOCU_ESTA_CODE,DECODE(V_ESTADO,'%','^EV|^TR|^CO|^AT|^OB|^RE|^AR', V_ESTADO))
                                                                --Where regexp_like(name,'^sasho$|^rags$|^shashi*');
                                                                --AND YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','AR')

                                                                AND  (SELECT count(*) FROM YTRAPDO
                                                                        WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                        AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                    WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                    AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                                 AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                                AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE

                                                                order by YTBDOCU_CODE DESC) XX) TT
                                                                WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;      */

                                     END IF;

                             END IF;


                     ELSE   --PROPORCIONA ID PARA BUSCAR

                         IF V_NOFECHA<>'S' THEN  --PROPORCIONA RANGO DE FECHAS PARA BUSCAR

                                      SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                         WHERE   YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                         AND YTBDOCU_USUA_ID=v_Id
                                         AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                    AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                    --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;

                                       -- V_TOTAL:=10;

                                        OPEN CURSOR_OUT  FOR
                                            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                          --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                          '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,YTBDOCU_ASUNTO ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                            WHERE YTBDOCU_USUA_ID=v_Id
                                                            AND YTBDOCU_ESTA_CODE<>'AN'
                                                            AND  YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                            AND TRUNC(YTBDOCU_FECHA_ACTIVIDAD) BETWEEN TRUNC(v_fi) AND TRUNC(v_ff)
                                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                            --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                            AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                            AND  (SELECT count(*) FROM YTRAPDO
                                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                    AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                            order by YTBDOCU_CODE DESC) XX) TT
                                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;
                                 ELSE -- NO PROPORCIONA FECHA

                                       SELECT COUNT(*) INTO V_TOTAL  FROM YTBDOCU
                                         WHERE YTBDOCU_USUA_ID=v_Id
                                         AND  YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                               AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                        OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                    --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                    AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                    AND  (SELECT count(*) FROM YTRAPDO
                                                            WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                            AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                        WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                        AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0;

                                       -- V_TOTAL:=10;

                                        OPEN CURSOR_OUT  FOR
                                            SELECT TT.*,  V_TOTAL as TOTAL_REG,v_PaginaSize "PAGINASIZE",
                                                          --FKYT_DOCU_DOCU_PP_YT_RAT_APROB(CODE||'-'||SEQ) RATIO,
                                                          '' RATIO,
                                                        --DECODE(ESTADO_CODE,'AT','',FKYT_DOCU_DOCU_PP_YT_SN_APROB(CODE||'-'||SEQ,'D')) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_PARA(CODE,SEQ) SN_APROB,
                                                        FKYT_DOCU_DOCU_PP_COMO_LLEGO(YTBDOCU_COLL_CODE) COMO_LLEGO,INITCAP(YTVESTA_DESCRIPCION) ESTADO,DECODE(YTBDOCU_CONDICION,'ES','ESTUDIANTE','EG','EGRESADO','BA','BACHILLER') CONDICION
                                                        ,FKYT_DOCU_DOCU_PP_DAME_TIDO(YTBDOCU_TIPO_CODE) TIPO_CODE,
                                                        --kyt_tramite_usuario.FYT_NUMEROO_REQUISITOS(CODE,SEQ) NUM_REQUISITOS
                                                        '0' NUM_REQUISITOS
                                                        FROM (SELECT rownum as ROWNRO,XX.* FROM (
                                                        SELECT YTBDOCU_COLL_CODE,YTBDOCU_CODE CODE,YTBDOCU_SEQ SEQ,YTBDOCU_ESTA_CODE ESTADO_CODE,YTBDOCU_FECHA_ACTIVIDAD FECHA,
                                                        YTBDOCU_ASUNTO ASUNTO,
                                                                    YTBDOCU_APELLIDOS ||' ' || YTBDOCU_NOMBRES  NOMBRE,YTVESTA_DESCRIPCION,YTVESTA_CODE CODE_ESTADO,YTVESTA_COLOR COLOR,YTVESTA_ESTILO ESTILO,
                                                                    YTBDOCU_USUA_ID USUA_ID,
                                                                    YTBDOCU_CONDICION,YTBDOCU_MAJR_DESC MAJR_DESC,
                                                                    YTBDOCU_PERS_DNI DNI,YTBDOCU_PERS_SEXO SEXO,YTBDOCU_DATA DATA,YTBDOCU_APELLIDOS ||' '|| YTBDOCU_NOMBRES NOMBRES,YTBDOCU_FECHA_VALIDO FECHA_VALIDO,YTBDOCU_ID_USUA_VALIDO ID_USUA_VALIDO
                                                                    ,YTBDOCU_CAMP_CODE CAMPUS,YTVPRIO_DESCRIPCION PRIORIDAD,YTBDOCU_NUM_EXT NUM_EXT,
                                                                    YTBDOCU_TIPO_CODE,YTBDOCU_TIPO_CODE TIPO_CODE_1,YTBDOCU_TIDO_CODE TIDO_CODE
                                                                    ,YTBDOCU_VAAN_CODE VAAN_CODE,YTBDOCU_NUM_REG NUM_REG
                                                            FROM YTBDOCU,YTVESTA YY,YTVPRIO
                                                            WHERE YTBDOCU_USUA_ID=v_Id
                                                            AND YTBDOCU_ESTA_CODE<>'AN'
                                                            AND  YTBDOCU_PLAN_PROC_CODE||'-'||YTBDOCU_PLAN_SEQ  LIKE V_PRO||'%'
                                                            AND ((UPPER(YTBDOCU_NUM_EXT)LIKE v_desc ||'%')
                                                                                OR upper(REPLACE(YTBDOCU_asunto || YTBDOCU_APELLIDOS||YTBDOCU_NOMBRES,' ','')) like '%'|| v_desc ||'%')
                                                            --and YTBDOCU_ESTA_CODE IN('EV','TR','CO','AT','OB','RE','NU','AR')
                                                            AND YTBDOCU_ESTA_CODE LIKE DECODE(V_ESTADO,'%','%', V_ESTADO)
                                                            AND YTBDOCU_ESTA_CODE=YY.YTVESTA_CODE
                                                            AND YTBDOCU_PRIO_CODE=YTVPRIO_CODE
                                                            AND  (SELECT count(*) FROM YTRAPDO
                                                                    WHERE  YTRAPDO_DOCU_CODE=YTBDOCU_CODE AND YTRAPDO_DOCU_SEQ=YTBDOCU_SEQ --AND YTRAPDO_NIVEL<>1

                                                                    AND EXISTS(SELECT 'Y' FROM YTRUSUN
                                                                                WHERE YTRUSUN_COAS_CODE||YTRUSUN_ORGN_CODE=YTRAPDO_COAS_CODE||YTRAPDO_ORGN_CODE
                                                                                AND YTRUSUN_USUA_ID=v_usua_id  AND YTRUSUN_IND_ESTADO='A'))>0
                                                            order by YTBDOCU_CODE DESC) XX) TT
                                                            WHERE ROWNRO>=V_INI and ROWNRO<=V_FIN;

                                 END IF;

                     END IF;

                 END IF;

/*ELSE  --PROPORCIONO ESTADO

 SELECT COUNT(*) INTO V_TOTAL
 FROM YTBDOCU,YTRUSDO
 WHERE YTBDOCU_ESTA_CODE =v_ESTADO
 AND  YTBDOCU_PLAN_PROC_CODE=YTRUSDO_PROC_CODE
   AND  YTRUSDO_USUA_ID=v_usua_id AND ytrusdo_IND_ESTADO='A';




 END IF;*/
 END IF; --FIN DE ESTADOS

 END IF;
    exception when OTHERS then
        raise_application_error(-20001,'Error al listar ' || SQLERRM);
END ;
   -- Enter further code below as specified in the Package spec.
FUNCTION FKYT_DOCU_DOCU_ESTA_ARCHI(P_CODE IN VARCHAR2,P_PIDM IN INT) return varchar2
IS

V_TEXTO VARCHAR2(20);
V_SPRIDEN_ID VARCHAR2(20 CHAR);
V_NOMBRES VARCHAR2(4000 CHAR);



BEGIN

V_TEXTO:='1';

    UPDATE COMUMGR.YTBDOCU SET YTBDOCU_ESTA_CODE = 'AR' WHERE YTBDOCU_CODE = P_CODE;
   
 --V_TEXTO:='12';  
   
    SELECT SPRIDEN_ID,SPRIDEN_LAST_NAME || ', '||SPRIDEN_FIRST_NAME||' '||SPRIDEN_MI   INTO  V_SPRIDEN_ID,V_NOMBRES
     FROM SPRIDEN@PROD.INT.UPAO.EDU.PE  LEFT OUTER JOIN SPBPERS@PROD.INT.UPAO.EDU.PE ON SPRIDEN_PIDM=SPBPERS_PIDM
     WHERE SPRIDEN_PIDM=P_PIDM AND SPRIDEN_CHANGE_IND IS NULL;
   
   
   
    INSERT INTO COMUMGR.YTRCOME (
                YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ,
                YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE,
                YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
            VALUES (SEQ_YTRCOME_CODE.NEXTVAL, P_CODE, 1,SYSDATE,V_SPRIDEN_ID, 'AUTO','DOCUMENTO FUE ARCHIVADO POR UN PROCESO AUTOMATICO DE AULA VIRTUAL',0,V_NOMBRES);
           
           
           
            COMMIT;
   

    RETURN V_TEXTO;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN 'ERP-ERR ERROR: ' || V_TEXTO || SQLERRM;

   when OTHERS then
         RETURN 'ERP-ERR ERROR: ' || V_TEXTO || SQLERRM;
end;

PROCEDURE KYT_DOCU_DOCU_PP_ADJ_REC_PAG(P_ACCION IN VARCHAR2,P_DATA in varchar2,V_MSG OUT varchar2)
    IS


     V_APPL_CODE VARCHAR2(12);
     v_id_usua varchar2(20);
     v_code_req varchar2(20);
     V_UTILIZADO int;
     v_num_recibo varchar2(30);
     v_id_usua_reg varchar2(20);
     v_tipo varchar2(20);
     v_conceptopago varchar2(300);
     V_DOCU varchar2(20);
V_CERRADO varchar2(4);
V_VALIDADO varchar2(3);
V_EXISTE_RECIBO INT;
V_ENTRA_CURSOR NUMBER;
   --  P_CODE_REQ in varchar2,P_APPL_CODE IN VARCHAR2,P_NUM_RECIBO IN VARCHAR2,P_ID IN VARCHAR2,P_COMENTARIO IN VARCHAR2



      CURSOR DT(P_NUM_RECIBO VARCHAR2,P_ID VARCHAR2) IS
            SELECT TBRACCD_RECEIPT_NUMBER RECIBO,TBRACCD_TRAN_NUMBER TRAN_NUMBER,
         TBRACCD_TERM_CODE PERIODO,
         TBBDETC_DETAIL_CODE AS CONCEPTO,
         TBRACCD_DESC DESCRIPCION,
         --FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM, TBRACCD_TRAN_NUMBER) PAGO, COMENTADO PORQUE EL VALOR QUE RETORNA ES 0
         BANINST1.kyt_plan_docu.FT_Upao_Calcula_Suma_Parcial@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,P_NUM_RECIBO) PAGO,
         FT_UPAO_GET_FECHA_PAGO@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER) FECHA,
         SPRIDEN_ID ID,
         SPRIDEN_FIRST_NAME ||' '||spriden_mi NOMBRES, spriden_last_name APELLIDOS
        FROM TBRACCD@PROD.INT.UPAO.EDU.PE,TBBDETC@PROD.INT.UPAO.EDU.PE,SPRIDEN@PROD.INT.UPAO.EDU.PE
        WHERE  TBRACCD_RECEIPT_NUMBER=P_NUM_RECIBO
        AND TBRACCD_DETAIL_CODE = TBBDETC_DETAIL_CODE
        AND TBRACCD_PIDM=SPRIDEN_PIDM
        AND TBRACCD_AMOUNT > 0
        AND FT_Upao_Get_Cod_Detalle_Pago@PROD.INT.UPAO.EDU.PE(TBRACCD_PIDM,TBRACCD_TRAN_NUMBER)  <> 'C'
        --AND (TBRACCD_DESC LIKE '%BIBLIO%' OR TBRACCD_DETAIL_CODE = '0125' )-- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET -- SE ADICIONO PARA SACAR OTRO CONCEPTO DE CARNET
        AND TBBDETC_TYPE_IND='C'
        AND SPRIDEN_CHANGE_IND IS NULL
        AND SPRIDEN_ID=P_ID;
        DT_ROW DT%ROWTYPE;

        V_RECIBO INT;

    BEGIN

   jsonObj := json(P_DATA);
  -- code := jsonObj.get_string('code');

    V_APPL_CODE:=ky_json.campo(jsonObj, 'appl_code');
    v_code_req:=ky_json.campo(jsonObj, 'code_req');
   v_num_recibo:=ky_json.campo(jsonObj, 'num_recibo');
   v_id_usua_reg:=ky_json.campo(jsonObj, 'id_usua_reg');

   IF(P_ACCION='ADI') THEN


    SELECT YTBDOCU_USUA_ID INTO V_ID_USUA
    FROM YTRREDO AAA,YTBDOCU  BBB
    WHERE YTRREDO_CODE=v_code_req
    AND AAA.YTBDOCU_CODE=BBB.YTBDOCU_CODE;

        V_MSG:='Registro no pudo ser creado';
        V_ENTRA_CURSOR := 0;
       
       
        --INSERT INTO COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), 'PROCEDIMIENTO : 11489');

        --VERIFICAMOS SI EL RECIBO NO FUE UTILIZADO
            /*SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
            WHERE YTRREPA_ACCD_RECEIPT_NUMBER=P_NUM_RECIBO;*/

        SELECT COUNT(*) INTO  V_RECIBO FROM YTRREPA
        WHERE YTRREPA_ACCD_RECEIPT_NUMBER=v_num_recibo AND YTRREPA_IND_ESTADO='A';

        IF( V_RECIBO=0) THEN
                    SELECT COUNT(*) INTO  V_UTILIZADO FROM YTRREPA
                    WHERE YTRREPA_CODE_APP=v_code_req AND YTRREPA_APPL=V_APPL_CODE AND YTRREPA_IND_ESTADO='A';

            IF(V_UTILIZADO=0) THEN

                    SELECT NVL(MAX(YTRREPA_SEQ),0) INTO  V_EXISTE_RECIBO FROM YTRREPA
                            WHERE YTRREPA_ACCD_RECEIPT_NUMBER=v_num_recibo;
                           
                           
                            --INSERT INTO COMUMGR.YTRTEMPR (YTRTEMPR_FECHA,YTRTEMPR_STRING) VALUES (SYSDATE(), 'PROCEDIMIENTO : 11508 - ' || v_num_recibo || '-' || V_ID_USUA);


                    OPEN DT(v_num_recibo,V_ID_USUA);
                    LOOP
                        FETCH DT INTO DT_ROW;
                        EXIT WHEN DT%NOTFOUND;

                       -- IF(FYT_VALIDA_CONCEPTO_PAGO1(v_code_req,DT_ROW.CONCEPTO)='1') THEN
                       
                       
                       IF DT_ROW.PAGO > 0 THEN
                       
                            INSERT INTO COMUMGR.YTRREPA (
                                    YTRREPA_ACCD_RECEIPT_NUMBER, YTRREPA_ACCD_TRAN_NUMBER, YTRREPA_PIDM,
                                    YTRREPA_TERM_CODE, YTRREPA_DETC_DETAIL_CODE, YTRREPA_ACCD_DESC,
                                    YTRREPA_MONTO, YTRREPA_FECHA_PAGO, YTRREPA_FECHA_ACTIVIDAD,YTRREPA_CODE_APP, YTRREPA_APPL, YTRREPA_USUA_ID,YTRREPA_USUA_ID_REG,YTRREPA_SEQ)
                                VALUES (DT_ROW.RECIBO,DT_ROW.TRAN_NUMBER, BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(V_ID_USUA),
                                    DT_ROW.PERIODO, DT_ROW.CONCEPTO, DT_ROW.DESCRIPCION, DT_ROW.PAGO, DT_ROW.FECHA, SYSDATE,v_code_req, V_APPL_CODE, V_ID_USUA, v_id_usua_reg,V_EXISTE_RECIBO+1 );

                                UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=v_code_req;
                                --COMMIT;
                                V_MSG:='OK';
                               
                                V_ENTRA_CURSOR := 1;
                               
                       ELSE
                            V_ENTRA_CURSOR := 2;
                            V_MSG:='ERP-ERR EL MONTO DEBE SER MAYOR A 0 ::: N° RECIBO ' || v_num_recibo || ' ::: ID' || V_ID_USUA;
                       
                       END IF;
                       
                       /*
                       IF('1'='1') THEN
                            INSERT INTO COMUMGR.YTRREPA (
                                YTRREPA_ACCD_RECEIPT_NUMBER, YTRREPA_ACCD_TRAN_NUMBER, YTRREPA_PIDM,
                                YTRREPA_TERM_CODE, YTRREPA_DETC_DETAIL_CODE, YTRREPA_ACCD_DESC,
                                YTRREPA_MONTO, YTRREPA_FECHA_PAGO, YTRREPA_FECHA_ACTIVIDAD,YTRREPA_CODE_APP, YTRREPA_APPL, YTRREPA_USUA_ID,YTRREPA_USUA_ID_REG,YTRREPA_SEQ)
                            VALUES (DT_ROW.RECIBO,DT_ROW.TRAN_NUMBER, BANINST1.FG_UPAO_GET_PIDM@PROD.INT.UPAO.EDU.PE(V_ID_USUA),
                                DT_ROW.PERIODO, DT_ROW.CONCEPTO, DT_ROW.DESCRIPCION, DT_ROW.PAGO, DT_ROW.FECHA, SYSDATE,v_code_req, V_APPL_CODE, V_ID_USUA, v_id_usua_reg,V_EXISTE_RECIBO+1 );

                            UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='S' WHERE YTRREDO_CODE=v_code_req;
                            --COMMIT;
                            V_MSG:='OK';
                           
                            V_ENTRA_CURSOR := 1;

                        ELSE
                            V_MSG:='ERP-ERR CONCEPTO DE PAGO NO ES APLICABLE A ESTE TIPO DOCUMENTO VERIFICA LOS REQUISITOS DEL DOCUMENTO';
                        END IF;*/
                       
                       
                    END LOOP;
                    CLOSE  DT;
                   
                   
                    IF V_ENTRA_CURSOR = 0 THEN
                   
                        V_MSG:='ERP-ERR NO EXISTE RECIBO DE PAGO ::: N° RECIBO ' || v_num_recibo || '  ::: ID' || V_ID_USUA;
                   
                    END IF;
                   
                --INDOICA QUE EVALUACIÓN DE RECIBO SE ACETA
            ELSE
                V_MSG:='ERP-ERR Ya existe un pago asignado a este requisito elimine primero el pago para asignar otro';
            END IF;

        ELSE
            V_MSG:='ERP-ERR EL RECIBO YA FUE UTILIZADO';
        END IF;











   ELSIF(P_ACCION='ACT') THEN

    if(v_tipo='REC' AND LENGTH(v_conceptopago)<2) THEN
     v_msg := 'ERP-ERR[DEBES INGRESAR CONCEPTO DE PAGO]';

    ELSE

    UPDATE COMUMGR.YTVPRVE
SET    YTVPRVE_DESCRIPCION     = ky_json.campo(jsonObj, 'descripcion'),
       YTVPRVE_FECHA_ACTIVIDAD = SYSDATE,
       YTVPRVE_USUA_ID         = ky_json.campo(jsonObj, 'usua_id'),
       YTVPRVE_IND_ESTADO      = ky_json.campo(jsonObj, 'ind_estado')
WHERE  YTVPRVE_CODE            = trim(ky_json.campo(jsonObj, 'ytvprve_pk'));


     v_msg := 'TRANSACCIÓN APLICADA Y GRABADA';
     END IF;

   ELSIF(P_ACCION='ELI') THEN

      V_MSG:='ERP-ERR';

    SELECT YTBDOCU_USUA_ID INTO V_ID_USUA
    FROM YTRREDO AAA,YTBDOCU  BBB
    WHERE YTRREDO_CODE=v_code_req
    AND AAA.YTBDOCU_CODE=BBB.YTBDOCU_CODE;

        SELECT YTBDOCU_CODE INTO V_DOCU FROM YTRREDO WHERE YTRREDO_CODE=v_code_req ;

        SELECT  COUNT(*) INTO V_CERRADO
        FROM YTBDOCU WHERE YTBDOCU_CODE=V_DOCU AND YTBDOCU_ESTA_CODE IN('AT','TR','CO');

        IF(V_CERRADO=0) THEN
            SELECT COUNT(*) INTO V_VALIDADO FROM YTRREDO WHERE YTRREDO_CODE=v_code_req AND YTRREDO_IND_ESTADO='V';

            IF (V_VALIDADO=0) THEN
                DELETE YTRREPA WHERE YTRREPA_CODE_APP=v_code_req AND YTRREPA_APPL=V_APPL_CODE;
                UPDATE YTRREDO SET YTRREDO_IND_ENV_USUA='N' WHERE YTRREDO_CODE=v_code_req;

                    IF(SQL%ROWCOUNT>0) THEN
                        v_msg := 'TRANSACCIÓN APLICADA';
                    ELSE
                        v_msg := 'ERP-ERR[NO SE PUEDE ELIMINAR UN REGISTRO CON ESAS CARACTERISTICAS]' ;
                    END IF;
            ELSE
                V_MSG:='ERP-ERR NO PUEDES QUITAR EL PAGO DEL DOCUMENTO SI EL REQUISITO YA ESTA VALIDADO';
             END IF;
        ELSE
            V_MSG:='ERP-ERR DOCUMENTO ESTA EN PROCESO DE EVALUACIÓN/CERRADO NO SE PUEDEN HACER CAMBIOS';
        END IF;





   ELSE
     v_msg := 'NO HAY CAMBIOS POR APLICAR';
   END IF;

  --COMMIT;


    exception when OTHERS then
    v_msg := 'ERP-ERR['||SQLERRM||']';
   -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);

END;


FUNCTION KYT_CANT_CUR_APRO_YTPSCIN(P_DATA IN VARCHAR2) return varchar2
IS

V_TEXTO VARCHAR2(20);

--VARIABLES JSON
V_LISTVALUE_1 json_list;--PARA LA DATA QUE VIENE A REGISTRAR
V_LISTVALUE_2 json_list;--PARA LA DATA QUE YA ESTA REGISTRADA
V_LISTVALUE_3 json_list;--PARA LA DATA QUE YA ESTA REGISTRADA
V_LISTVALUE_4 json_list;--PARA LA DATA QUE YA ESTA REGISTRADA
v_element json_value;
v_obj json;

V_YTRTEMP_JSON_DATA_CLOB CLOB;
V_CICLO_1 VARCHAR2(20);
V_CREDITO_1 VARCHAR2(400);
V_SEMESTRE_1 VARCHAR2(400);
V_CURSO_1 VARCHAR2(400);    
V_CURSO_NOMBRE_1 VARCHAR2(4000);
V_CARRERA_1 VARCHAR2(4000);
V_NIVEL_1 VARCHAR2(4000);
V_CAMPUS_1 VARCHAR2(4000);
V_ESTADO_1 VARCHAR2(20 CHAR);
V_CARRERA_TRASLADO VARCHAR2(4000);

V_EXISTE NUMBER;
V_CANT NUMBER;


BEGIN

    V_TEXTO:='0';

    jsonObj := json(P_DATA);
    
    
    -- LOGICA EXCLUSIVA PARA CONVALIDACION EXTERNA

    SELECT COUNT(*) INTO V_EXISTE FROM COMUMGR.YTRVAMD WHERE YTRVAMD_DOCU_CODE  = ky_json.campo(jsonObj, 'V_YTRVAMD_DOCU_CODE') 
    AND YTRVAMD_CAME_CODE = ky_json.campo(jsonObj, 'V_YTRVAMD_CAME_CODE')  AND YTRVAMD_CONTROL = 'BT' AND YTRVAMD_VALOR_DEFECTO = 'YTPSCIN'; 
    
    
    
    IF V_EXISTE <> 0 THEN
    
        SELECT YTRVAMD_VALOR_JSON INTO V_YTRTEMP_JSON_DATA_CLOB FROM COMUMGR.YTRVAMD
        WHERE YTRVAMD_DOCU_CODE  = ky_json.campo(jsonObj, 'V_YTRVAMD_DOCU_CODE')   
        AND YTRVAMD_CAME_CODE = ky_json.campo(jsonObj, 'V_YTRVAMD_CAME_CODE')   AND YTRVAMD_CONTROL = 'BT';
                              
         V_LISTVALUE_1 := json_list(V_YTRTEMP_JSON_DATA_CLOB);--CAPTURAMOS LISTA DE OBJETOS QUE ESTA REGISTRADA
         
         V_CANT := 0;
         
         
         IF V_LISTVALUE_1.COUNT <> 0 THEN
         
            V_YTRTEMP_JSON_DATA_CLOB := '';
                                    
            --V_CONT_1 := 0;
            
            FOR i IN 1 .. V_LISTVALUE_1.COUNT
            LOOP
            
                v_element := V_LISTVALUE_1.get(i);
                v_obj := json(v_element);
                                                    
                V_CICLO_1 := json_ext.get_string(v_obj, 'ciclo');
                V_CREDITO_1 := json_ext.get_string(v_obj, 'creditos');
                V_CURSO_1 := json_ext.get_string(v_obj, 'curso');
                V_CURSO_NOMBRE_1 := json_ext.get_string(v_obj, 'curso_nombre');
                V_ESTADO_1 := json_ext.get_string(v_obj, 'estado');
                                                    
                                                    
                V_CARRERA_1 := json_ext.get_string(v_obj, 'carrera');
                V_NIVEL_1 := json_ext.get_string(v_obj, 'nivel');
                V_CAMPUS_1 := json_ext.get_string(v_obj, 'campus');
                V_CARRERA_TRASLADO  := json_ext.get_string(v_obj, 'carrera_traslado');
                
                IF V_ESTADO_1 = 'A' THEN
                
                    V_CANT := V_CANT + 1;
                
                END IF;
                
                            
            END LOOP;
         
         
         END IF;
         
         
    ELSE 
    
    
        V_CANT := -1; --NO TIENE BOTON DE COVALIDACION EXTERNA
    
    END IF;
 
    RETURN V_CANT;
--CUANDO NO ENCUENTA REGISTRO POR DEFECTO LO ADOPTA COMO PUBLICO
exception
 when no_data_found then
    RETURN '0/0';

   when OTHERS then
         RETURN '0/0';
end;


PROCEDURE FKYT_DOCU_CAMBIAR_ESTADO_BC
IS
  v_count INTEGER := 0;
  v_count_t INTEGER := 0;
  v_deleted_repa INTEGER := 0;  -- Contador de recibos eliminados
  v_updated_requisitos INTEGER := 0;  -- Contador de requisitos actualizados
  v_updated_documentos INTEGER := 0;  -- Contador de documentos actualizados

  v_text_msg VARCHAR2(32767) := '<p>' || SYSTIMESTAMP || ' [CAMBIO ESTADO] - BORRADOR CADUCADO' || '<br/>' || '<br/>';

  CURSOR C_REQUISITOS IS
    SELECT YTRREDO_CODE    
    FROM COMUMGR.YTRREDO    
    WHERE YTBDOCU_CODE IN (SELECT YTBDOCU_CODE FROM COMUMGR.YTBDOCU  
                           WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) < TRUNC(SYSDATE) - 7  
                           AND YTBDOCU_ESTA_CODE = 'NU')  
      AND YTRREDO_TIRE_CODE = 'REC';

  CURSOR C_DOCUMENTOS IS  
    SELECT YTBDOCU_CODE    
    FROM COMUMGR.YTBDOCU    
    WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) < TRUNC(SYSDATE) - 7  
      AND YTBDOCU_ESTA_CODE = 'NU';

BEGIN
  -- Eliminar registros de YTRREPA en bloque
  DELETE FROM COMUMGR.YTRREPA  
  WHERE YTRREPA_CODE_APP IN (SELECT YTRREDO_CODE FROM COMUMGR.YTRREDO  
                             WHERE YTBDOCU_CODE IN (SELECT YTBDOCU_CODE FROM COMUMGR.YTBDOCU  
                                                    WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) < TRUNC(SYSDATE) - 7  
                                                      AND YTBDOCU_ESTA_CODE = 'NU')  
                               AND YTRREDO_TIRE_CODE = 'REC');

  v_deleted_repa := SQL%ROWCOUNT;  -- Guardar la cantidad de registros eliminados
  COMMIT;

  -- Actualizar registros de YTRREDO en bloque
  UPDATE COMUMGR.YTRREDO
     SET YTRREDO_COMENTARIO = 'Pendiente', YTRREDO_IND_ESTADO = 'P'
   WHERE YTRREDO_CODE IN
         (SELECT YTRREDO_CODE
            FROM COMUMGR.YTRREDO
           WHERE YTBDOCU_CODE IN
                 (SELECT YTBDOCU_CODE
                    FROM COMUMGR.YTBDOCU
                   WHERE TRUNC(YTBDOCU_FECHA_ACTIVIDAD) < TRUNC(SYSDATE) - 7
                     AND YTBDOCU_ESTA_CODE = 'NU')
             AND YTRREDO_TIRE_CODE = 'REC');

  v_updated_requisitos := SQL%ROWCOUNT;  -- Guardar cantidad de requisitos actualizados

  COMMIT;

  -- Recorrer y actualizar los documentos
  FOR v_DOCU_CODE IN C_DOCUMENTOS LOOP  
    -- Actualizar estado del documento
    UPDATE COMUMGR.YTBDOCU
    SET YTBDOCU_ESTA_CODE = 'BC'
    WHERE YTBDOCU_CODE = v_DOCU_CODE.YTBDOCU_CODE;

    v_count := SQL%ROWCOUNT;
    v_updated_documentos := v_updated_documentos + v_count;

    -- Insertar comentario
    INSERT INTO COMUMGR.YTRCOME
      (YTRCOME_CODE, YTRCOME_DOCU_CODE, YTRCOME_DOCU_SEQ, 
       YTRCOME_FECHA_ACTIVIDAD, YTRCOME_USUA_ID, YTRCOME_TICO_CODE, 
       YTRCOME_MENSAJE, YTRCOME_NOTI_CORREO, YTRCOME_USUA_NOMBRE)
    VALUES
      (COMUMGR.SEQ_YTRCOME_CODE.NEXTVAL, v_DOCU_CODE.YTBDOCU_CODE, 1, 
       SYSDATE, '000026316', 'USUA', 
       'CAMBIO ESTADO - BORRADOR CADUCADO', 0, 
       'UNIVERSIDAD PRIVADA ANTENOR ORREGO'); 

    -- Insertar historial de estado
    INSERT INTO COMUMGR.YTRESDO
      (YTRESDO_DOCU_CODE, YTRESDO_OCU_SEQ, YTRESDO_SEQ, 
       YTRESDO_ESTADO, YTRESDO_FECHA_ACTIVIDAD, YTRESDO_USUA_ID, 
       YTRESDO_COMENTARIO)
    VALUES
      (v_DOCU_CODE.YTBDOCU_CODE, 1, COMUMGR.YTRESDO_SEQ_SEQ.NEXTVAL, 
       'BC', SYSDATE, '000026316', 
       'CAMBIO ESTADO - BORRADOR CADUCADO');       
  END LOOP;

  COMMIT;

  v_text_msg := v_text_msg || SYSTIMESTAMP || ' [COMUMGR.YTBDOCU] TOTAL DOCUMENTOS ACTUALIZADOS: ' || v_updated_documentos || '<br/>';
  v_text_msg := v_text_msg || SYSTIMESTAMP || ' [COMUMGR.YTRREPA] TOTAL RECIBOS ELIMINADOS: ' || v_deleted_repa || '<br/>';
  v_text_msg := v_text_msg || SYSTIMESTAMP || ' [COMUMGR.YTRREDO] TOTAL REQUISITOS ACTUALIZADOS: ' || v_updated_requisitos || '<br/><br/> </p>';
  -- Envío de correo con manejo de errores
  BEGIN
    COMUMGR.KYT_TRAMITE_COMUNICACION.FYT_ENVIAR_CORREO(
      'mcorreal@UPAO.EDU.PE',
      'CONFIRMATION DATE ' || TRUNC(SYSDATE) || ': DOCUMENTOS CAMBIO ESTADO - BORRADOR CADUCADO',
      NULL,
      v_text_msg
    );
  EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, '[ERR - ERP] Error al enviar el correo: ' || SQLERRM);
  END;

EXCEPTION
  WHEN OTHERS THEN  
    RAISE_APPLICATION_ERROR(-20001, '[ERR-ERP] Error en el procedimiento: ' || SQLERRM);
  
END FKYT_DOCU_CAMBIAR_ESTADO_BC;



 PROCEDURE PYT_ANIO_CUR(P_accion   in varchar2,
                         P_DATA     IN VARCHAR2,
                         CURSOR_OUT OUT T_CURSOR)
  
   is
  
    code         varchar2(20);
    v_PaginaSize INT;
    v_Ini        INT;
    v_Fin        INT;
    v_Pagina     INT;
    V_NUM_REG    INT;
    v_desc       varchar2(40);
    v_org_upao   varchar2(20);
    v_usu        varchar2(40);
    v_estado     varchar2(40);
    v_conten     varchar2(40);
    v_pk         varchar2(40);
  begin
  
    CASE P_ACCION
      WHEN 'LIS' THEN
      
        jsonObj      := json(P_DATA);
        v_PaginaSize := ky_json.campo(jsonObj, 'nre');
        v_Pagina     := ky_json.campo(jsonObj, 'pag');
        v_desc       := ky_json.campo(jsonObj, 'b');
        v_Ini        := (v_PaginaSize * v_Pagina) - (v_PaginaSize - 1);
        v_Fin        := v_PaginaSize * v_Pagina;
      
        v_usu    := ky_json.campo(jsonObj, 'usu');
        v_estado := ky_json.campo(jsonObj, 'es');
      
        SELECT COUNT(*) INTO V_NUM_REG FROM COMUMGR.YTVVAAN;
      
        OPEN CURSOR_OUT FOR
          SELECT TT.*, V_NUM_REG TOTAL, V_PAGINASIZE PAGINASIZE
            FROM (SELECT ROWNUM AS NUM, XX.*
                    FROM (SELECT ytvvaan_code            PK_ACCION,
                                 ytvvaan_code            CODE,
                                 ytvvaan_nombre          DESCRIPCION,
                                 ytvvaan_fecha_actividad FECHA,
                                 ytvvaan_usua_id         USUA_ID,
                                 ytvvaan_ind_estado      AAN_ESTADO
                            FROM COMUMGR.YTVVAAN
                           WHERE ytvvaan_usua_id LIKE
                               '%' || UPPER(v_usu) || '%'
                           AND ytvvaan_ind_estado LIKE
                               '%' || UPPER(v_estado) || '%'
                           AND (ytvvaan_nombre LIKE
                               '%' || UPPER(v_desc) || '%'    
                           OR ytvvaan_code LIKE
                               '%' || UPPER(v_desc) || '%'  )                                                           
                           ORDER BY ytvvaan_code) XX) TT
           WHERE NUM >= v_Ini
             AND NUM <= v_Fin;
      
      WHEN 'UNI' THEN
        OPEN CURSOR_OUT FOR
          SELECT ytvvaan_code            PK_ACCION,
                 ytvvaan_code            CODE,
                 ytvvaan_nombre          DESCRIPCION,
                 ytvvaan_fecha_actividad FECHA,
                 ytvvaan_usua_id         USUA_ID,
                 ytvvaan_ind_estado      IND_ESTADO
            FROM COMUMGR.YTVVAAN
           WHERE ytvvaan_code = P_DATA;
      
    END CASE;
  
  exception
    when OTHERS then
      raise_application_error(-20001, 'Error al listar ' || SQLERRM);
  END PYT_ANIO_CUR;

  PROCEDURE PYT_ANIO_CUR_AUD(P_ACCION IN VARCHAR2,
                             P_DATA   in varchar2,
                             V_MSG    OUT varchar2) IS
  
    v_seq          int;
    v_tipo         varchar2(5);
    v_orden        varchar2(8);
    v_conceptopago varchar2(20);
    v_documento    varchar2(20);
    v_existe_aprob int;
  
    V_DOC      varchar2(20);
    V_DOC_SEQ  varchar2(5);
    V_APRO_SEQ INT;
    V_ENORDEN  INT;
  
    V_ORDEN_COAS VARCHAR2(20);
    V_ORDEN_ORGN VARCHAR2(20);
    v_coas_orgn  varchar2(25);
  
    V_CODE       VARCHAR2(10);
    v_existe     int;
    v_nivel      int;
    v_desc_padre varchar2(100);
  
    V_CODE_1    VARCHAR2(10);
    v_siglas    varchar2(30);
    V_YAESTA    INT;
    V_CODE_UNID VARCHAR2(20);
  
  BEGIN
  
    jsonObj   := json(P_DATA);
    V_ENORDEN := 0;
  
    case P_ACCION
      when 'ACT' then
      
        V_CODE := ky_json.campo(jsonObj, 'ytvvaan_pk');
      
        UPDATE COMUMGR.YTVVAAN
           SET ytvvaan_nombre          = ky_json.campo(jsonObj,
                                                       'descripcion'),
               ytvvaan_fecha_actividad = SYSDATE,
               ytvvaan_usua_id         = ky_json.campo(jsonObj, 'usua_id'),
               ytvvaan_ind_estado      = ky_json.campo(jsonObj,'aan_estado')
         WHERE ytvvaan_code = V_CODE;
      
    end case;
  
  exception
    when OTHERS then
      rollback;
      v_msg := 'ERP-ERR[' || SQLERRM || ']';
      -- raise_application_error(-20001,'Error al crear el registro' || SQLERRM);
  
  END PYT_ANIO_CUR_AUD;






END;
